
RMS_calc.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001d84  080001ac  080001ac  000011ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08001f30  08001f30  00002f30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001f40  08001f40  00003150  2**0
                  CONTENTS
  4 .ARM          00000008  08001f40  08001f40  00002f40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08001f48  08001f48  00003150  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001f48  08001f48  00002f48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001f4c  08001f4c  00002f4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000150  20000000  08001f50  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00003150  2**0
                  CONTENTS
 10 .bss          00000098  20000150  20000150  00003150  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200001e8  200001e8  00003150  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00003150  2**0
                  CONTENTS, READONLY
 13 .debug_info   00008ad7  00000000  00000000  00003180  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000166e  00000000  00000000  0000bc57  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000998  00000000  00000000  0000d2c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000764  00000000  00000000  0000dc60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00022311  00000000  00000000  0000e3c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000a0ff  00000000  00000000  000306d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d3cf4  00000000  00000000  0003a7d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0010e4c8  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002780  00000000  00000000  0010e50c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000053  00000000  00000000  00110c8c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	@ (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	@ (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	20000150 	.word	0x20000150
 80001c8:	00000000 	.word	0x00000000
 80001cc:	08001f18 	.word	0x08001f18

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	@ (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	@ (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	@ (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000154 	.word	0x20000154
 80001e8:	08001f18 	.word	0x08001f18

080001ec <__aeabi_uldivmod>:
 80001ec:	b953      	cbnz	r3, 8000204 <__aeabi_uldivmod+0x18>
 80001ee:	b94a      	cbnz	r2, 8000204 <__aeabi_uldivmod+0x18>
 80001f0:	2900      	cmp	r1, #0
 80001f2:	bf08      	it	eq
 80001f4:	2800      	cmpeq	r0, #0
 80001f6:	bf1c      	itt	ne
 80001f8:	f04f 31ff 	movne.w	r1, #4294967295
 80001fc:	f04f 30ff 	movne.w	r0, #4294967295
 8000200:	f000 b96a 	b.w	80004d8 <__aeabi_idiv0>
 8000204:	f1ad 0c08 	sub.w	ip, sp, #8
 8000208:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800020c:	f000 f806 	bl	800021c <__udivmoddi4>
 8000210:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000214:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000218:	b004      	add	sp, #16
 800021a:	4770      	bx	lr

0800021c <__udivmoddi4>:
 800021c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000220:	9d08      	ldr	r5, [sp, #32]
 8000222:	460c      	mov	r4, r1
 8000224:	2b00      	cmp	r3, #0
 8000226:	d14e      	bne.n	80002c6 <__udivmoddi4+0xaa>
 8000228:	4694      	mov	ip, r2
 800022a:	458c      	cmp	ip, r1
 800022c:	4686      	mov	lr, r0
 800022e:	fab2 f282 	clz	r2, r2
 8000232:	d962      	bls.n	80002fa <__udivmoddi4+0xde>
 8000234:	b14a      	cbz	r2, 800024a <__udivmoddi4+0x2e>
 8000236:	f1c2 0320 	rsb	r3, r2, #32
 800023a:	4091      	lsls	r1, r2
 800023c:	fa20 f303 	lsr.w	r3, r0, r3
 8000240:	fa0c fc02 	lsl.w	ip, ip, r2
 8000244:	4319      	orrs	r1, r3
 8000246:	fa00 fe02 	lsl.w	lr, r0, r2
 800024a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800024e:	fa1f f68c 	uxth.w	r6, ip
 8000252:	fbb1 f4f7 	udiv	r4, r1, r7
 8000256:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800025a:	fb07 1114 	mls	r1, r7, r4, r1
 800025e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000262:	fb04 f106 	mul.w	r1, r4, r6
 8000266:	4299      	cmp	r1, r3
 8000268:	d90a      	bls.n	8000280 <__udivmoddi4+0x64>
 800026a:	eb1c 0303 	adds.w	r3, ip, r3
 800026e:	f104 30ff 	add.w	r0, r4, #4294967295
 8000272:	f080 8112 	bcs.w	800049a <__udivmoddi4+0x27e>
 8000276:	4299      	cmp	r1, r3
 8000278:	f240 810f 	bls.w	800049a <__udivmoddi4+0x27e>
 800027c:	3c02      	subs	r4, #2
 800027e:	4463      	add	r3, ip
 8000280:	1a59      	subs	r1, r3, r1
 8000282:	fa1f f38e 	uxth.w	r3, lr
 8000286:	fbb1 f0f7 	udiv	r0, r1, r7
 800028a:	fb07 1110 	mls	r1, r7, r0, r1
 800028e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000292:	fb00 f606 	mul.w	r6, r0, r6
 8000296:	429e      	cmp	r6, r3
 8000298:	d90a      	bls.n	80002b0 <__udivmoddi4+0x94>
 800029a:	eb1c 0303 	adds.w	r3, ip, r3
 800029e:	f100 31ff 	add.w	r1, r0, #4294967295
 80002a2:	f080 80fc 	bcs.w	800049e <__udivmoddi4+0x282>
 80002a6:	429e      	cmp	r6, r3
 80002a8:	f240 80f9 	bls.w	800049e <__udivmoddi4+0x282>
 80002ac:	4463      	add	r3, ip
 80002ae:	3802      	subs	r0, #2
 80002b0:	1b9b      	subs	r3, r3, r6
 80002b2:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002b6:	2100      	movs	r1, #0
 80002b8:	b11d      	cbz	r5, 80002c2 <__udivmoddi4+0xa6>
 80002ba:	40d3      	lsrs	r3, r2
 80002bc:	2200      	movs	r2, #0
 80002be:	e9c5 3200 	strd	r3, r2, [r5]
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d905      	bls.n	80002d6 <__udivmoddi4+0xba>
 80002ca:	b10d      	cbz	r5, 80002d0 <__udivmoddi4+0xb4>
 80002cc:	e9c5 0100 	strd	r0, r1, [r5]
 80002d0:	2100      	movs	r1, #0
 80002d2:	4608      	mov	r0, r1
 80002d4:	e7f5      	b.n	80002c2 <__udivmoddi4+0xa6>
 80002d6:	fab3 f183 	clz	r1, r3
 80002da:	2900      	cmp	r1, #0
 80002dc:	d146      	bne.n	800036c <__udivmoddi4+0x150>
 80002de:	42a3      	cmp	r3, r4
 80002e0:	d302      	bcc.n	80002e8 <__udivmoddi4+0xcc>
 80002e2:	4290      	cmp	r0, r2
 80002e4:	f0c0 80f0 	bcc.w	80004c8 <__udivmoddi4+0x2ac>
 80002e8:	1a86      	subs	r6, r0, r2
 80002ea:	eb64 0303 	sbc.w	r3, r4, r3
 80002ee:	2001      	movs	r0, #1
 80002f0:	2d00      	cmp	r5, #0
 80002f2:	d0e6      	beq.n	80002c2 <__udivmoddi4+0xa6>
 80002f4:	e9c5 6300 	strd	r6, r3, [r5]
 80002f8:	e7e3      	b.n	80002c2 <__udivmoddi4+0xa6>
 80002fa:	2a00      	cmp	r2, #0
 80002fc:	f040 8090 	bne.w	8000420 <__udivmoddi4+0x204>
 8000300:	eba1 040c 	sub.w	r4, r1, ip
 8000304:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000308:	fa1f f78c 	uxth.w	r7, ip
 800030c:	2101      	movs	r1, #1
 800030e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000312:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000316:	fb08 4416 	mls	r4, r8, r6, r4
 800031a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800031e:	fb07 f006 	mul.w	r0, r7, r6
 8000322:	4298      	cmp	r0, r3
 8000324:	d908      	bls.n	8000338 <__udivmoddi4+0x11c>
 8000326:	eb1c 0303 	adds.w	r3, ip, r3
 800032a:	f106 34ff 	add.w	r4, r6, #4294967295
 800032e:	d202      	bcs.n	8000336 <__udivmoddi4+0x11a>
 8000330:	4298      	cmp	r0, r3
 8000332:	f200 80cd 	bhi.w	80004d0 <__udivmoddi4+0x2b4>
 8000336:	4626      	mov	r6, r4
 8000338:	1a1c      	subs	r4, r3, r0
 800033a:	fa1f f38e 	uxth.w	r3, lr
 800033e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000342:	fb08 4410 	mls	r4, r8, r0, r4
 8000346:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800034a:	fb00 f707 	mul.w	r7, r0, r7
 800034e:	429f      	cmp	r7, r3
 8000350:	d908      	bls.n	8000364 <__udivmoddi4+0x148>
 8000352:	eb1c 0303 	adds.w	r3, ip, r3
 8000356:	f100 34ff 	add.w	r4, r0, #4294967295
 800035a:	d202      	bcs.n	8000362 <__udivmoddi4+0x146>
 800035c:	429f      	cmp	r7, r3
 800035e:	f200 80b0 	bhi.w	80004c2 <__udivmoddi4+0x2a6>
 8000362:	4620      	mov	r0, r4
 8000364:	1bdb      	subs	r3, r3, r7
 8000366:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800036a:	e7a5      	b.n	80002b8 <__udivmoddi4+0x9c>
 800036c:	f1c1 0620 	rsb	r6, r1, #32
 8000370:	408b      	lsls	r3, r1
 8000372:	fa22 f706 	lsr.w	r7, r2, r6
 8000376:	431f      	orrs	r7, r3
 8000378:	fa20 fc06 	lsr.w	ip, r0, r6
 800037c:	fa04 f301 	lsl.w	r3, r4, r1
 8000380:	ea43 030c 	orr.w	r3, r3, ip
 8000384:	40f4      	lsrs	r4, r6
 8000386:	fa00 f801 	lsl.w	r8, r0, r1
 800038a:	0c38      	lsrs	r0, r7, #16
 800038c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000390:	fbb4 fef0 	udiv	lr, r4, r0
 8000394:	fa1f fc87 	uxth.w	ip, r7
 8000398:	fb00 441e 	mls	r4, r0, lr, r4
 800039c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003a0:	fb0e f90c 	mul.w	r9, lr, ip
 80003a4:	45a1      	cmp	r9, r4
 80003a6:	fa02 f201 	lsl.w	r2, r2, r1
 80003aa:	d90a      	bls.n	80003c2 <__udivmoddi4+0x1a6>
 80003ac:	193c      	adds	r4, r7, r4
 80003ae:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003b2:	f080 8084 	bcs.w	80004be <__udivmoddi4+0x2a2>
 80003b6:	45a1      	cmp	r9, r4
 80003b8:	f240 8081 	bls.w	80004be <__udivmoddi4+0x2a2>
 80003bc:	f1ae 0e02 	sub.w	lr, lr, #2
 80003c0:	443c      	add	r4, r7
 80003c2:	eba4 0409 	sub.w	r4, r4, r9
 80003c6:	fa1f f983 	uxth.w	r9, r3
 80003ca:	fbb4 f3f0 	udiv	r3, r4, r0
 80003ce:	fb00 4413 	mls	r4, r0, r3, r4
 80003d2:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003d6:	fb03 fc0c 	mul.w	ip, r3, ip
 80003da:	45a4      	cmp	ip, r4
 80003dc:	d907      	bls.n	80003ee <__udivmoddi4+0x1d2>
 80003de:	193c      	adds	r4, r7, r4
 80003e0:	f103 30ff 	add.w	r0, r3, #4294967295
 80003e4:	d267      	bcs.n	80004b6 <__udivmoddi4+0x29a>
 80003e6:	45a4      	cmp	ip, r4
 80003e8:	d965      	bls.n	80004b6 <__udivmoddi4+0x29a>
 80003ea:	3b02      	subs	r3, #2
 80003ec:	443c      	add	r4, r7
 80003ee:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003f2:	fba0 9302 	umull	r9, r3, r0, r2
 80003f6:	eba4 040c 	sub.w	r4, r4, ip
 80003fa:	429c      	cmp	r4, r3
 80003fc:	46ce      	mov	lr, r9
 80003fe:	469c      	mov	ip, r3
 8000400:	d351      	bcc.n	80004a6 <__udivmoddi4+0x28a>
 8000402:	d04e      	beq.n	80004a2 <__udivmoddi4+0x286>
 8000404:	b155      	cbz	r5, 800041c <__udivmoddi4+0x200>
 8000406:	ebb8 030e 	subs.w	r3, r8, lr
 800040a:	eb64 040c 	sbc.w	r4, r4, ip
 800040e:	fa04 f606 	lsl.w	r6, r4, r6
 8000412:	40cb      	lsrs	r3, r1
 8000414:	431e      	orrs	r6, r3
 8000416:	40cc      	lsrs	r4, r1
 8000418:	e9c5 6400 	strd	r6, r4, [r5]
 800041c:	2100      	movs	r1, #0
 800041e:	e750      	b.n	80002c2 <__udivmoddi4+0xa6>
 8000420:	f1c2 0320 	rsb	r3, r2, #32
 8000424:	fa20 f103 	lsr.w	r1, r0, r3
 8000428:	fa0c fc02 	lsl.w	ip, ip, r2
 800042c:	fa24 f303 	lsr.w	r3, r4, r3
 8000430:	4094      	lsls	r4, r2
 8000432:	430c      	orrs	r4, r1
 8000434:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000438:	fa00 fe02 	lsl.w	lr, r0, r2
 800043c:	fa1f f78c 	uxth.w	r7, ip
 8000440:	fbb3 f0f8 	udiv	r0, r3, r8
 8000444:	fb08 3110 	mls	r1, r8, r0, r3
 8000448:	0c23      	lsrs	r3, r4, #16
 800044a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800044e:	fb00 f107 	mul.w	r1, r0, r7
 8000452:	4299      	cmp	r1, r3
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x24c>
 8000456:	eb1c 0303 	adds.w	r3, ip, r3
 800045a:	f100 36ff 	add.w	r6, r0, #4294967295
 800045e:	d22c      	bcs.n	80004ba <__udivmoddi4+0x29e>
 8000460:	4299      	cmp	r1, r3
 8000462:	d92a      	bls.n	80004ba <__udivmoddi4+0x29e>
 8000464:	3802      	subs	r0, #2
 8000466:	4463      	add	r3, ip
 8000468:	1a5b      	subs	r3, r3, r1
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000470:	fb08 3311 	mls	r3, r8, r1, r3
 8000474:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000478:	fb01 f307 	mul.w	r3, r1, r7
 800047c:	42a3      	cmp	r3, r4
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x276>
 8000480:	eb1c 0404 	adds.w	r4, ip, r4
 8000484:	f101 36ff 	add.w	r6, r1, #4294967295
 8000488:	d213      	bcs.n	80004b2 <__udivmoddi4+0x296>
 800048a:	42a3      	cmp	r3, r4
 800048c:	d911      	bls.n	80004b2 <__udivmoddi4+0x296>
 800048e:	3902      	subs	r1, #2
 8000490:	4464      	add	r4, ip
 8000492:	1ae4      	subs	r4, r4, r3
 8000494:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000498:	e739      	b.n	800030e <__udivmoddi4+0xf2>
 800049a:	4604      	mov	r4, r0
 800049c:	e6f0      	b.n	8000280 <__udivmoddi4+0x64>
 800049e:	4608      	mov	r0, r1
 80004a0:	e706      	b.n	80002b0 <__udivmoddi4+0x94>
 80004a2:	45c8      	cmp	r8, r9
 80004a4:	d2ae      	bcs.n	8000404 <__udivmoddi4+0x1e8>
 80004a6:	ebb9 0e02 	subs.w	lr, r9, r2
 80004aa:	eb63 0c07 	sbc.w	ip, r3, r7
 80004ae:	3801      	subs	r0, #1
 80004b0:	e7a8      	b.n	8000404 <__udivmoddi4+0x1e8>
 80004b2:	4631      	mov	r1, r6
 80004b4:	e7ed      	b.n	8000492 <__udivmoddi4+0x276>
 80004b6:	4603      	mov	r3, r0
 80004b8:	e799      	b.n	80003ee <__udivmoddi4+0x1d2>
 80004ba:	4630      	mov	r0, r6
 80004bc:	e7d4      	b.n	8000468 <__udivmoddi4+0x24c>
 80004be:	46d6      	mov	lr, sl
 80004c0:	e77f      	b.n	80003c2 <__udivmoddi4+0x1a6>
 80004c2:	4463      	add	r3, ip
 80004c4:	3802      	subs	r0, #2
 80004c6:	e74d      	b.n	8000364 <__udivmoddi4+0x148>
 80004c8:	4606      	mov	r6, r0
 80004ca:	4623      	mov	r3, r4
 80004cc:	4608      	mov	r0, r1
 80004ce:	e70f      	b.n	80002f0 <__udivmoddi4+0xd4>
 80004d0:	3e02      	subs	r6, #2
 80004d2:	4463      	add	r3, ip
 80004d4:	e730      	b.n	8000338 <__udivmoddi4+0x11c>
 80004d6:	bf00      	nop

080004d8 <__aeabi_idiv0>:
 80004d8:	4770      	bx	lr
 80004da:	bf00      	nop

080004dc <RMS_Init>:
 */

#include "RMS.h"

// Initialization of RMS calculation block (Must be called once for each signal, which RMS is calculated, before start of calculation)
void RMS_Init(tRMSCalc * RMS_Var) {
 80004dc:	b480      	push	{r7}
 80004de:	b083      	sub	sp, #12
 80004e0:	af00      	add	r7, sp, #0
 80004e2:	6078      	str	r0, [r7, #4]
	RMS_Var->MulDivPrev = 0;																			// Previous (instant^2)/RMSPrev
 80004e4:	687b      	ldr	r3, [r7, #4]
 80004e6:	f04f 0200 	mov.w	r2, #0
 80004ea:	605a      	str	r2, [r3, #4]
	RMS_Var->RMSPrev = RMS_PREV_VAL;																	// Previous RMS value of the signal
 80004ec:	687b      	ldr	r3, [r7, #4]
 80004ee:	4a06      	ldr	r2, [pc, #24]	@ (8000508 <RMS_Init+0x2c>)
 80004f0:	609a      	str	r2, [r3, #8]
	RMS_Var->RMSVal = 0;																				// RMS value of the signal
 80004f2:	687b      	ldr	r3, [r7, #4]
 80004f4:	f04f 0200 	mov.w	r2, #0
 80004f8:	60da      	str	r2, [r3, #12]
}
 80004fa:	bf00      	nop
 80004fc:	370c      	adds	r7, #12
 80004fe:	46bd      	mov	sp, r7
 8000500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop
 8000508:	3a83126f 	.word	0x3a83126f

0800050c <RMS_Step>:

// RMS Calculation step (Need several steps to reach steady state of RMS)
// Algorithm is described in an article https://elibrary.ru/download/elibrary_54475580_91851937.pdf
void RMS_Step(tRMSCalc * RMS_Var) {
 800050c:	b480      	push	{r7}
 800050e:	b085      	sub	sp, #20
 8000510:	af00      	add	r7, sp, #0
 8000512:	6078      	str	r0, [r7, #4]
	float tmp = RMS_Var->InstantVal * RMS_Var->InstantVal / RMS_Var->RMSPrev;
 8000514:	687b      	ldr	r3, [r7, #4]
 8000516:	ed93 7a00 	vldr	s14, [r3]
 800051a:	687b      	ldr	r3, [r7, #4]
 800051c:	edd3 7a00 	vldr	s15, [r3]
 8000520:	ee67 6a27 	vmul.f32	s13, s14, s15
 8000524:	687b      	ldr	r3, [r7, #4]
 8000526:	ed93 7a02 	vldr	s14, [r3, #8]
 800052a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800052e:	edc7 7a03 	vstr	s15, [r7, #12]
	RMS_Var->RMSVal = B0 * tmp + B1 * RMS_Var->MulDivPrev - A1 * RMS_Var->RMSPrev;
 8000532:	edd7 7a03 	vldr	s15, [r7, #12]
 8000536:	ed9f 7a13 	vldr	s14, [pc, #76]	@ 8000584 <RMS_Step+0x78>
 800053a:	ee27 7a87 	vmul.f32	s14, s15, s14
 800053e:	687b      	ldr	r3, [r7, #4]
 8000540:	edd3 7a01 	vldr	s15, [r3, #4]
 8000544:	eddf 6a0f 	vldr	s13, [pc, #60]	@ 8000584 <RMS_Step+0x78>
 8000548:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800054c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000550:	687b      	ldr	r3, [r7, #4]
 8000552:	edd3 7a02 	vldr	s15, [r3, #8]
 8000556:	eddf 6a0c 	vldr	s13, [pc, #48]	@ 8000588 <RMS_Step+0x7c>
 800055a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800055e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000562:	687b      	ldr	r3, [r7, #4]
 8000564:	edc3 7a03 	vstr	s15, [r3, #12]

	RMS_Var->MulDivPrev = tmp;
 8000568:	687b      	ldr	r3, [r7, #4]
 800056a:	68fa      	ldr	r2, [r7, #12]
 800056c:	605a      	str	r2, [r3, #4]
	RMS_Var->RMSPrev = RMS_Var->RMSVal;
 800056e:	687b      	ldr	r3, [r7, #4]
 8000570:	68da      	ldr	r2, [r3, #12]
 8000572:	687b      	ldr	r3, [r7, #4]
 8000574:	609a      	str	r2, [r3, #8]

}
 8000576:	bf00      	nop
 8000578:	3714      	adds	r7, #20
 800057a:	46bd      	mov	sp, r7
 800057c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop
 8000584:	3a5a42d7 	.word	0x3a5a42d7
 8000588:	3f7f9097 	.word	0x3f7f9097

0800058c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800058c:	b580      	push	{r7, lr}
 800058e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000590:	f000 fa28 	bl	80009e4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000594:	f000 f81a 	bl	80005cc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000598:	f000 f8d8 	bl	800074c <MX_GPIO_Init>
  MX_TIM1_Init();
 800059c:	f000 f886 	bl	80006ac <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */

  // Init RMS Calculation blocks for three phases
  RMS_Init(&RMS_A);
 80005a0:	4806      	ldr	r0, [pc, #24]	@ (80005bc <main+0x30>)
 80005a2:	f7ff ff9b 	bl	80004dc <RMS_Init>
  RMS_Init(&RMS_B);
 80005a6:	4806      	ldr	r0, [pc, #24]	@ (80005c0 <main+0x34>)
 80005a8:	f7ff ff98 	bl	80004dc <RMS_Init>
  RMS_Init(&RMS_C);
 80005ac:	4805      	ldr	r0, [pc, #20]	@ (80005c4 <main+0x38>)
 80005ae:	f7ff ff95 	bl	80004dc <RMS_Init>

  // Start timer to simulate sine wave
  HAL_TIM_Base_Start_IT(&htim1);
 80005b2:	4805      	ldr	r0, [pc, #20]	@ (80005c8 <main+0x3c>)
 80005b4:	f001 f85e 	bl	8001674 <HAL_TIM_Base_Start_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005b8:	bf00      	nop
 80005ba:	e7fd      	b.n	80005b8 <main+0x2c>
 80005bc:	200001b4 	.word	0x200001b4
 80005c0:	200001c4 	.word	0x200001c4
 80005c4:	200001d4 	.word	0x200001d4
 80005c8:	2000016c 	.word	0x2000016c

080005cc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	b094      	sub	sp, #80	@ 0x50
 80005d0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005d2:	f107 0320 	add.w	r3, r7, #32
 80005d6:	2230      	movs	r2, #48	@ 0x30
 80005d8:	2100      	movs	r1, #0
 80005da:	4618      	mov	r0, r3
 80005dc:	f001 fc70 	bl	8001ec0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005e0:	f107 030c 	add.w	r3, r7, #12
 80005e4:	2200      	movs	r2, #0
 80005e6:	601a      	str	r2, [r3, #0]
 80005e8:	605a      	str	r2, [r3, #4]
 80005ea:	609a      	str	r2, [r3, #8]
 80005ec:	60da      	str	r2, [r3, #12]
 80005ee:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005f0:	2300      	movs	r3, #0
 80005f2:	60bb      	str	r3, [r7, #8]
 80005f4:	4b2b      	ldr	r3, [pc, #172]	@ (80006a4 <SystemClock_Config+0xd8>)
 80005f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005f8:	4a2a      	ldr	r2, [pc, #168]	@ (80006a4 <SystemClock_Config+0xd8>)
 80005fa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80005fe:	6413      	str	r3, [r2, #64]	@ 0x40
 8000600:	4b28      	ldr	r3, [pc, #160]	@ (80006a4 <SystemClock_Config+0xd8>)
 8000602:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000604:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000608:	60bb      	str	r3, [r7, #8]
 800060a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800060c:	2300      	movs	r3, #0
 800060e:	607b      	str	r3, [r7, #4]
 8000610:	4b25      	ldr	r3, [pc, #148]	@ (80006a8 <SystemClock_Config+0xdc>)
 8000612:	681b      	ldr	r3, [r3, #0]
 8000614:	4a24      	ldr	r2, [pc, #144]	@ (80006a8 <SystemClock_Config+0xdc>)
 8000616:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800061a:	6013      	str	r3, [r2, #0]
 800061c:	4b22      	ldr	r3, [pc, #136]	@ (80006a8 <SystemClock_Config+0xdc>)
 800061e:	681b      	ldr	r3, [r3, #0]
 8000620:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000624:	607b      	str	r3, [r7, #4]
 8000626:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000628:	2301      	movs	r3, #1
 800062a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800062c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000630:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000632:	2302      	movs	r3, #2
 8000634:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000636:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800063a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 15;
 800063c:	230f      	movs	r3, #15
 800063e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 216;
 8000640:	23d8      	movs	r3, #216	@ 0xd8
 8000642:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000644:	2302      	movs	r3, #2
 8000646:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000648:	2304      	movs	r3, #4
 800064a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800064c:	f107 0320 	add.w	r3, r7, #32
 8000650:	4618      	mov	r0, r3
 8000652:	f000 fb9b 	bl	8000d8c <HAL_RCC_OscConfig>
 8000656:	4603      	mov	r3, r0
 8000658:	2b00      	cmp	r3, #0
 800065a:	d001      	beq.n	8000660 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800065c:	f000 f8f6 	bl	800084c <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000660:	f000 fb44 	bl	8000cec <HAL_PWREx_EnableOverDrive>
 8000664:	4603      	mov	r3, r0
 8000666:	2b00      	cmp	r3, #0
 8000668:	d001      	beq.n	800066e <SystemClock_Config+0xa2>
  {
    Error_Handler();
 800066a:	f000 f8ef 	bl	800084c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800066e:	230f      	movs	r3, #15
 8000670:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000672:	2302      	movs	r3, #2
 8000674:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000676:	2300      	movs	r3, #0
 8000678:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800067a:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800067e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000680:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000684:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000686:	f107 030c 	add.w	r3, r7, #12
 800068a:	2105      	movs	r1, #5
 800068c:	4618      	mov	r0, r3
 800068e:	f000 fdf5 	bl	800127c <HAL_RCC_ClockConfig>
 8000692:	4603      	mov	r3, r0
 8000694:	2b00      	cmp	r3, #0
 8000696:	d001      	beq.n	800069c <SystemClock_Config+0xd0>
  {
    Error_Handler();
 8000698:	f000 f8d8 	bl	800084c <Error_Handler>
  }
}
 800069c:	bf00      	nop
 800069e:	3750      	adds	r7, #80	@ 0x50
 80006a0:	46bd      	mov	sp, r7
 80006a2:	bd80      	pop	{r7, pc}
 80006a4:	40023800 	.word	0x40023800
 80006a8:	40007000 	.word	0x40007000

080006ac <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b086      	sub	sp, #24
 80006b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80006b2:	f107 0308 	add.w	r3, r7, #8
 80006b6:	2200      	movs	r2, #0
 80006b8:	601a      	str	r2, [r3, #0]
 80006ba:	605a      	str	r2, [r3, #4]
 80006bc:	609a      	str	r2, [r3, #8]
 80006be:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80006c0:	463b      	mov	r3, r7
 80006c2:	2200      	movs	r2, #0
 80006c4:	601a      	str	r2, [r3, #0]
 80006c6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80006c8:	4b1e      	ldr	r3, [pc, #120]	@ (8000744 <MX_TIM1_Init+0x98>)
 80006ca:	4a1f      	ldr	r2, [pc, #124]	@ (8000748 <MX_TIM1_Init+0x9c>)
 80006cc:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80006ce:	4b1d      	ldr	r3, [pc, #116]	@ (8000744 <MX_TIM1_Init+0x98>)
 80006d0:	2200      	movs	r2, #0
 80006d2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006d4:	4b1b      	ldr	r3, [pc, #108]	@ (8000744 <MX_TIM1_Init+0x98>)
 80006d6:	2200      	movs	r2, #0
 80006d8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 44999;
 80006da:	4b1a      	ldr	r3, [pc, #104]	@ (8000744 <MX_TIM1_Init+0x98>)
 80006dc:	f64a 72c7 	movw	r2, #44999	@ 0xafc7
 80006e0:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80006e2:	4b18      	ldr	r3, [pc, #96]	@ (8000744 <MX_TIM1_Init+0x98>)
 80006e4:	2200      	movs	r2, #0
 80006e6:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80006e8:	4b16      	ldr	r3, [pc, #88]	@ (8000744 <MX_TIM1_Init+0x98>)
 80006ea:	2200      	movs	r2, #0
 80006ec:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80006ee:	4b15      	ldr	r3, [pc, #84]	@ (8000744 <MX_TIM1_Init+0x98>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80006f4:	4813      	ldr	r0, [pc, #76]	@ (8000744 <MX_TIM1_Init+0x98>)
 80006f6:	f000 ff6d 	bl	80015d4 <HAL_TIM_Base_Init>
 80006fa:	4603      	mov	r3, r0
 80006fc:	2b00      	cmp	r3, #0
 80006fe:	d001      	beq.n	8000704 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8000700:	f000 f8a4 	bl	800084c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000704:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000708:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800070a:	f107 0308 	add.w	r3, r7, #8
 800070e:	4619      	mov	r1, r3
 8000710:	480c      	ldr	r0, [pc, #48]	@ (8000744 <MX_TIM1_Init+0x98>)
 8000712:	f001 f90f 	bl	8001934 <HAL_TIM_ConfigClockSource>
 8000716:	4603      	mov	r3, r0
 8000718:	2b00      	cmp	r3, #0
 800071a:	d001      	beq.n	8000720 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 800071c:	f000 f896 	bl	800084c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000720:	2300      	movs	r3, #0
 8000722:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000724:	2300      	movs	r3, #0
 8000726:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000728:	463b      	mov	r3, r7
 800072a:	4619      	mov	r1, r3
 800072c:	4805      	ldr	r0, [pc, #20]	@ (8000744 <MX_TIM1_Init+0x98>)
 800072e:	f001 fb37 	bl	8001da0 <HAL_TIMEx_MasterConfigSynchronization>
 8000732:	4603      	mov	r3, r0
 8000734:	2b00      	cmp	r3, #0
 8000736:	d001      	beq.n	800073c <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8000738:	f000 f888 	bl	800084c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800073c:	bf00      	nop
 800073e:	3718      	adds	r7, #24
 8000740:	46bd      	mov	sp, r7
 8000742:	bd80      	pop	{r7, pc}
 8000744:	2000016c 	.word	0x2000016c
 8000748:	40010000 	.word	0x40010000

0800074c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800074c:	b480      	push	{r7}
 800074e:	b083      	sub	sp, #12
 8000750:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000752:	2300      	movs	r3, #0
 8000754:	607b      	str	r3, [r7, #4]
 8000756:	4b10      	ldr	r3, [pc, #64]	@ (8000798 <MX_GPIO_Init+0x4c>)
 8000758:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800075a:	4a0f      	ldr	r2, [pc, #60]	@ (8000798 <MX_GPIO_Init+0x4c>)
 800075c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000760:	6313      	str	r3, [r2, #48]	@ 0x30
 8000762:	4b0d      	ldr	r3, [pc, #52]	@ (8000798 <MX_GPIO_Init+0x4c>)
 8000764:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000766:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800076a:	607b      	str	r3, [r7, #4]
 800076c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800076e:	2300      	movs	r3, #0
 8000770:	603b      	str	r3, [r7, #0]
 8000772:	4b09      	ldr	r3, [pc, #36]	@ (8000798 <MX_GPIO_Init+0x4c>)
 8000774:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000776:	4a08      	ldr	r2, [pc, #32]	@ (8000798 <MX_GPIO_Init+0x4c>)
 8000778:	f043 0301 	orr.w	r3, r3, #1
 800077c:	6313      	str	r3, [r2, #48]	@ 0x30
 800077e:	4b06      	ldr	r3, [pc, #24]	@ (8000798 <MX_GPIO_Init+0x4c>)
 8000780:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000782:	f003 0301 	and.w	r3, r3, #1
 8000786:	603b      	str	r3, [r7, #0]
 8000788:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800078a:	bf00      	nop
 800078c:	370c      	adds	r7, #12
 800078e:	46bd      	mov	sp, r7
 8000790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000794:	4770      	bx	lr
 8000796:	bf00      	nop
 8000798:	40023800 	.word	0x40023800

0800079c <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */

// Timer callback
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 800079c:	b580      	push	{r7, lr}
 800079e:	b084      	sub	sp, #16
 80007a0:	af00      	add	r7, sp, #0
 80007a2:	6078      	str	r0, [r7, #4]

	if (htim->Instance == TIM1) {
 80007a4:	687b      	ldr	r3, [r7, #4]
 80007a6:	681b      	ldr	r3, [r3, #0]
 80007a8:	4a22      	ldr	r2, [pc, #136]	@ (8000834 <HAL_TIM_PeriodElapsedCallback+0x98>)
 80007aa:	4293      	cmp	r3, r2
 80007ac:	d13e      	bne.n	800082c <HAL_TIM_PeriodElapsedCallback+0x90>

		// Update instant values of three phases of sine wave signals
		RMS_A.InstantVal = v_in_vals[sample_num[0]++];
 80007ae:	4b22      	ldr	r3, [pc, #136]	@ (8000838 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 80007b0:	781b      	ldrb	r3, [r3, #0]
 80007b2:	1c5a      	adds	r2, r3, #1
 80007b4:	b2d1      	uxtb	r1, r2
 80007b6:	4a20      	ldr	r2, [pc, #128]	@ (8000838 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 80007b8:	7011      	strb	r1, [r2, #0]
 80007ba:	4a20      	ldr	r2, [pc, #128]	@ (800083c <HAL_TIM_PeriodElapsedCallback+0xa0>)
 80007bc:	009b      	lsls	r3, r3, #2
 80007be:	4413      	add	r3, r2
 80007c0:	681b      	ldr	r3, [r3, #0]
 80007c2:	4a1f      	ldr	r2, [pc, #124]	@ (8000840 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 80007c4:	6013      	str	r3, [r2, #0]
		RMS_B.InstantVal = v_in_vals[sample_num[1]++];
 80007c6:	4b1c      	ldr	r3, [pc, #112]	@ (8000838 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 80007c8:	785b      	ldrb	r3, [r3, #1]
 80007ca:	1c5a      	adds	r2, r3, #1
 80007cc:	b2d1      	uxtb	r1, r2
 80007ce:	4a1a      	ldr	r2, [pc, #104]	@ (8000838 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 80007d0:	7051      	strb	r1, [r2, #1]
 80007d2:	4a1a      	ldr	r2, [pc, #104]	@ (800083c <HAL_TIM_PeriodElapsedCallback+0xa0>)
 80007d4:	009b      	lsls	r3, r3, #2
 80007d6:	4413      	add	r3, r2
 80007d8:	681b      	ldr	r3, [r3, #0]
 80007da:	4a1a      	ldr	r2, [pc, #104]	@ (8000844 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 80007dc:	6013      	str	r3, [r2, #0]
		RMS_C.InstantVal = v_in_vals[sample_num[2]++];
 80007de:	4b16      	ldr	r3, [pc, #88]	@ (8000838 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 80007e0:	789b      	ldrb	r3, [r3, #2]
 80007e2:	1c5a      	adds	r2, r3, #1
 80007e4:	b2d1      	uxtb	r1, r2
 80007e6:	4a14      	ldr	r2, [pc, #80]	@ (8000838 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 80007e8:	7091      	strb	r1, [r2, #2]
 80007ea:	4a14      	ldr	r2, [pc, #80]	@ (800083c <HAL_TIM_PeriodElapsedCallback+0xa0>)
 80007ec:	009b      	lsls	r3, r3, #2
 80007ee:	4413      	add	r3, r2
 80007f0:	681b      	ldr	r3, [r3, #0]
 80007f2:	4a15      	ldr	r2, [pc, #84]	@ (8000848 <HAL_TIM_PeriodElapsedCallback+0xac>)
 80007f4:	6013      	str	r3, [r2, #0]

		// Make sure the value numbers are correct
		for (uint8_t i = 0; i < 3; i++) {
 80007f6:	2300      	movs	r3, #0
 80007f8:	73fb      	strb	r3, [r7, #15]
 80007fa:	e00b      	b.n	8000814 <HAL_TIM_PeriodElapsedCallback+0x78>
			if (sample_num[i] >= TABLE_SIZE) {
 80007fc:	7bfb      	ldrb	r3, [r7, #15]
 80007fe:	4a0e      	ldr	r2, [pc, #56]	@ (8000838 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8000800:	5cd3      	ldrb	r3, [r2, r3]
 8000802:	2b4f      	cmp	r3, #79	@ 0x4f
 8000804:	d903      	bls.n	800080e <HAL_TIM_PeriodElapsedCallback+0x72>
				sample_num[i] = 0;
 8000806:	7bfb      	ldrb	r3, [r7, #15]
 8000808:	4a0b      	ldr	r2, [pc, #44]	@ (8000838 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 800080a:	2100      	movs	r1, #0
 800080c:	54d1      	strb	r1, [r2, r3]
		for (uint8_t i = 0; i < 3; i++) {
 800080e:	7bfb      	ldrb	r3, [r7, #15]
 8000810:	3301      	adds	r3, #1
 8000812:	73fb      	strb	r3, [r7, #15]
 8000814:	7bfb      	ldrb	r3, [r7, #15]
 8000816:	2b02      	cmp	r3, #2
 8000818:	d9f0      	bls.n	80007fc <HAL_TIM_PeriodElapsedCallback+0x60>
			}
		}

		// Calculate RMS values of all phases
		RMS_Step(&RMS_A);
 800081a:	4809      	ldr	r0, [pc, #36]	@ (8000840 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 800081c:	f7ff fe76 	bl	800050c <RMS_Step>
		RMS_Step(&RMS_B);
 8000820:	4808      	ldr	r0, [pc, #32]	@ (8000844 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8000822:	f7ff fe73 	bl	800050c <RMS_Step>
		RMS_Step(&RMS_C);
 8000826:	4808      	ldr	r0, [pc, #32]	@ (8000848 <HAL_TIM_PeriodElapsedCallback+0xac>)
 8000828:	f7ff fe70 	bl	800050c <RMS_Step>

		// The RMS values are in RMS_X.RMSVal (X is A, B or C)

	}

}
 800082c:	bf00      	nop
 800082e:	3710      	adds	r7, #16
 8000830:	46bd      	mov	sp, r7
 8000832:	bd80      	pop	{r7, pc}
 8000834:	40010000 	.word	0x40010000
 8000838:	20000140 	.word	0x20000140
 800083c:	20000000 	.word	0x20000000
 8000840:	200001b4 	.word	0x200001b4
 8000844:	200001c4 	.word	0x200001c4
 8000848:	200001d4 	.word	0x200001d4

0800084c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800084c:	b480      	push	{r7}
 800084e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000850:	b672      	cpsid	i
}
 8000852:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000854:	bf00      	nop
 8000856:	e7fd      	b.n	8000854 <Error_Handler+0x8>

08000858 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000858:	b480      	push	{r7}
 800085a:	b083      	sub	sp, #12
 800085c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800085e:	2300      	movs	r3, #0
 8000860:	607b      	str	r3, [r7, #4]
 8000862:	4b10      	ldr	r3, [pc, #64]	@ (80008a4 <HAL_MspInit+0x4c>)
 8000864:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000866:	4a0f      	ldr	r2, [pc, #60]	@ (80008a4 <HAL_MspInit+0x4c>)
 8000868:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800086c:	6453      	str	r3, [r2, #68]	@ 0x44
 800086e:	4b0d      	ldr	r3, [pc, #52]	@ (80008a4 <HAL_MspInit+0x4c>)
 8000870:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000872:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000876:	607b      	str	r3, [r7, #4]
 8000878:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800087a:	2300      	movs	r3, #0
 800087c:	603b      	str	r3, [r7, #0]
 800087e:	4b09      	ldr	r3, [pc, #36]	@ (80008a4 <HAL_MspInit+0x4c>)
 8000880:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000882:	4a08      	ldr	r2, [pc, #32]	@ (80008a4 <HAL_MspInit+0x4c>)
 8000884:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000888:	6413      	str	r3, [r2, #64]	@ 0x40
 800088a:	4b06      	ldr	r3, [pc, #24]	@ (80008a4 <HAL_MspInit+0x4c>)
 800088c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800088e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000892:	603b      	str	r3, [r7, #0]
 8000894:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000896:	bf00      	nop
 8000898:	370c      	adds	r7, #12
 800089a:	46bd      	mov	sp, r7
 800089c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a0:	4770      	bx	lr
 80008a2:	bf00      	nop
 80008a4:	40023800 	.word	0x40023800

080008a8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	b084      	sub	sp, #16
 80008ac:	af00      	add	r7, sp, #0
 80008ae:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	681b      	ldr	r3, [r3, #0]
 80008b4:	4a0e      	ldr	r2, [pc, #56]	@ (80008f0 <HAL_TIM_Base_MspInit+0x48>)
 80008b6:	4293      	cmp	r3, r2
 80008b8:	d115      	bne.n	80008e6 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80008ba:	2300      	movs	r3, #0
 80008bc:	60fb      	str	r3, [r7, #12]
 80008be:	4b0d      	ldr	r3, [pc, #52]	@ (80008f4 <HAL_TIM_Base_MspInit+0x4c>)
 80008c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80008c2:	4a0c      	ldr	r2, [pc, #48]	@ (80008f4 <HAL_TIM_Base_MspInit+0x4c>)
 80008c4:	f043 0301 	orr.w	r3, r3, #1
 80008c8:	6453      	str	r3, [r2, #68]	@ 0x44
 80008ca:	4b0a      	ldr	r3, [pc, #40]	@ (80008f4 <HAL_TIM_Base_MspInit+0x4c>)
 80008cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80008ce:	f003 0301 	and.w	r3, r3, #1
 80008d2:	60fb      	str	r3, [r7, #12]
 80008d4:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 80008d6:	2200      	movs	r2, #0
 80008d8:	2100      	movs	r1, #0
 80008da:	2019      	movs	r0, #25
 80008dc:	f000 f9cf 	bl	8000c7e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80008e0:	2019      	movs	r0, #25
 80008e2:	f000 f9e8 	bl	8000cb6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80008e6:	bf00      	nop
 80008e8:	3710      	adds	r7, #16
 80008ea:	46bd      	mov	sp, r7
 80008ec:	bd80      	pop	{r7, pc}
 80008ee:	bf00      	nop
 80008f0:	40010000 	.word	0x40010000
 80008f4:	40023800 	.word	0x40023800

080008f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008f8:	b480      	push	{r7}
 80008fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80008fc:	bf00      	nop
 80008fe:	e7fd      	b.n	80008fc <NMI_Handler+0x4>

08000900 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000900:	b480      	push	{r7}
 8000902:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000904:	bf00      	nop
 8000906:	e7fd      	b.n	8000904 <HardFault_Handler+0x4>

08000908 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000908:	b480      	push	{r7}
 800090a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800090c:	bf00      	nop
 800090e:	e7fd      	b.n	800090c <MemManage_Handler+0x4>

08000910 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000910:	b480      	push	{r7}
 8000912:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000914:	bf00      	nop
 8000916:	e7fd      	b.n	8000914 <BusFault_Handler+0x4>

08000918 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000918:	b480      	push	{r7}
 800091a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800091c:	bf00      	nop
 800091e:	e7fd      	b.n	800091c <UsageFault_Handler+0x4>

08000920 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000920:	b480      	push	{r7}
 8000922:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000924:	bf00      	nop
 8000926:	46bd      	mov	sp, r7
 8000928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800092c:	4770      	bx	lr

0800092e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800092e:	b480      	push	{r7}
 8000930:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000932:	bf00      	nop
 8000934:	46bd      	mov	sp, r7
 8000936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800093a:	4770      	bx	lr

0800093c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800093c:	b480      	push	{r7}
 800093e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000940:	bf00      	nop
 8000942:	46bd      	mov	sp, r7
 8000944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000948:	4770      	bx	lr

0800094a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800094a:	b580      	push	{r7, lr}
 800094c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800094e:	f000 f89b 	bl	8000a88 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000952:	bf00      	nop
 8000954:	bd80      	pop	{r7, pc}
	...

08000958 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800095c:	4802      	ldr	r0, [pc, #8]	@ (8000968 <TIM1_UP_TIM10_IRQHandler+0x10>)
 800095e:	f000 fef9 	bl	8001754 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000962:	bf00      	nop
 8000964:	bd80      	pop	{r7, pc}
 8000966:	bf00      	nop
 8000968:	2000016c 	.word	0x2000016c

0800096c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800096c:	b480      	push	{r7}
 800096e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000970:	4b06      	ldr	r3, [pc, #24]	@ (800098c <SystemInit+0x20>)
 8000972:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000976:	4a05      	ldr	r2, [pc, #20]	@ (800098c <SystemInit+0x20>)
 8000978:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800097c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000980:	bf00      	nop
 8000982:	46bd      	mov	sp, r7
 8000984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000988:	4770      	bx	lr
 800098a:	bf00      	nop
 800098c:	e000ed00 	.word	0xe000ed00

08000990 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8000990:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80009c8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000994:	f7ff ffea 	bl	800096c <SystemInit>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000998:	480c      	ldr	r0, [pc, #48]	@ (80009cc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800099a:	490d      	ldr	r1, [pc, #52]	@ (80009d0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800099c:	4a0d      	ldr	r2, [pc, #52]	@ (80009d4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800099e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80009a0:	e002      	b.n	80009a8 <LoopCopyDataInit>

080009a2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80009a2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009a4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009a6:	3304      	adds	r3, #4

080009a8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80009a8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009aa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80009ac:	d3f9      	bcc.n	80009a2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80009ae:	4a0a      	ldr	r2, [pc, #40]	@ (80009d8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80009b0:	4c0a      	ldr	r4, [pc, #40]	@ (80009dc <LoopFillZerobss+0x22>)
  movs r3, #0
 80009b2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80009b4:	e001      	b.n	80009ba <LoopFillZerobss>

080009b6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80009b6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009b8:	3204      	adds	r2, #4

080009ba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009ba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009bc:	d3fb      	bcc.n	80009b6 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80009be:	f001 fa87 	bl	8001ed0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80009c2:	f7ff fde3 	bl	800058c <main>
  bx  lr    
 80009c6:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80009c8:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 80009cc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80009d0:	20000150 	.word	0x20000150
  ldr r2, =_sidata
 80009d4:	08001f50 	.word	0x08001f50
  ldr r2, =_sbss
 80009d8:	20000150 	.word	0x20000150
  ldr r4, =_ebss
 80009dc:	200001e8 	.word	0x200001e8

080009e0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80009e0:	e7fe      	b.n	80009e0 <ADC_IRQHandler>
	...

080009e4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80009e8:	4b0e      	ldr	r3, [pc, #56]	@ (8000a24 <HAL_Init+0x40>)
 80009ea:	681b      	ldr	r3, [r3, #0]
 80009ec:	4a0d      	ldr	r2, [pc, #52]	@ (8000a24 <HAL_Init+0x40>)
 80009ee:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80009f2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80009f4:	4b0b      	ldr	r3, [pc, #44]	@ (8000a24 <HAL_Init+0x40>)
 80009f6:	681b      	ldr	r3, [r3, #0]
 80009f8:	4a0a      	ldr	r2, [pc, #40]	@ (8000a24 <HAL_Init+0x40>)
 80009fa:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80009fe:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a00:	4b08      	ldr	r3, [pc, #32]	@ (8000a24 <HAL_Init+0x40>)
 8000a02:	681b      	ldr	r3, [r3, #0]
 8000a04:	4a07      	ldr	r2, [pc, #28]	@ (8000a24 <HAL_Init+0x40>)
 8000a06:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000a0a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a0c:	2003      	movs	r0, #3
 8000a0e:	f000 f92b 	bl	8000c68 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a12:	200f      	movs	r0, #15
 8000a14:	f000 f808 	bl	8000a28 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a18:	f7ff ff1e 	bl	8000858 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a1c:	2300      	movs	r3, #0
}
 8000a1e:	4618      	mov	r0, r3
 8000a20:	bd80      	pop	{r7, pc}
 8000a22:	bf00      	nop
 8000a24:	40023c00 	.word	0x40023c00

08000a28 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	b082      	sub	sp, #8
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a30:	4b12      	ldr	r3, [pc, #72]	@ (8000a7c <HAL_InitTick+0x54>)
 8000a32:	681a      	ldr	r2, [r3, #0]
 8000a34:	4b12      	ldr	r3, [pc, #72]	@ (8000a80 <HAL_InitTick+0x58>)
 8000a36:	781b      	ldrb	r3, [r3, #0]
 8000a38:	4619      	mov	r1, r3
 8000a3a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000a3e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a42:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a46:	4618      	mov	r0, r3
 8000a48:	f000 f943 	bl	8000cd2 <HAL_SYSTICK_Config>
 8000a4c:	4603      	mov	r3, r0
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	d001      	beq.n	8000a56 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000a52:	2301      	movs	r3, #1
 8000a54:	e00e      	b.n	8000a74 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	2b0f      	cmp	r3, #15
 8000a5a:	d80a      	bhi.n	8000a72 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	6879      	ldr	r1, [r7, #4]
 8000a60:	f04f 30ff 	mov.w	r0, #4294967295
 8000a64:	f000 f90b 	bl	8000c7e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a68:	4a06      	ldr	r2, [pc, #24]	@ (8000a84 <HAL_InitTick+0x5c>)
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000a6e:	2300      	movs	r3, #0
 8000a70:	e000      	b.n	8000a74 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000a72:	2301      	movs	r3, #1
}
 8000a74:	4618      	mov	r0, r3
 8000a76:	3708      	adds	r7, #8
 8000a78:	46bd      	mov	sp, r7
 8000a7a:	bd80      	pop	{r7, pc}
 8000a7c:	20000144 	.word	0x20000144
 8000a80:	2000014c 	.word	0x2000014c
 8000a84:	20000148 	.word	0x20000148

08000a88 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a88:	b480      	push	{r7}
 8000a8a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a8c:	4b06      	ldr	r3, [pc, #24]	@ (8000aa8 <HAL_IncTick+0x20>)
 8000a8e:	781b      	ldrb	r3, [r3, #0]
 8000a90:	461a      	mov	r2, r3
 8000a92:	4b06      	ldr	r3, [pc, #24]	@ (8000aac <HAL_IncTick+0x24>)
 8000a94:	681b      	ldr	r3, [r3, #0]
 8000a96:	4413      	add	r3, r2
 8000a98:	4a04      	ldr	r2, [pc, #16]	@ (8000aac <HAL_IncTick+0x24>)
 8000a9a:	6013      	str	r3, [r2, #0]
}
 8000a9c:	bf00      	nop
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop
 8000aa8:	2000014c 	.word	0x2000014c
 8000aac:	200001e4 	.word	0x200001e4

08000ab0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ab0:	b480      	push	{r7}
 8000ab2:	af00      	add	r7, sp, #0
  return uwTick;
 8000ab4:	4b03      	ldr	r3, [pc, #12]	@ (8000ac4 <HAL_GetTick+0x14>)
 8000ab6:	681b      	ldr	r3, [r3, #0]
}
 8000ab8:	4618      	mov	r0, r3
 8000aba:	46bd      	mov	sp, r7
 8000abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac0:	4770      	bx	lr
 8000ac2:	bf00      	nop
 8000ac4:	200001e4 	.word	0x200001e4

08000ac8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ac8:	b480      	push	{r7}
 8000aca:	b085      	sub	sp, #20
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	f003 0307 	and.w	r3, r3, #7
 8000ad6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ad8:	4b0c      	ldr	r3, [pc, #48]	@ (8000b0c <__NVIC_SetPriorityGrouping+0x44>)
 8000ada:	68db      	ldr	r3, [r3, #12]
 8000adc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ade:	68ba      	ldr	r2, [r7, #8]
 8000ae0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000ae4:	4013      	ands	r3, r2
 8000ae6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ae8:	68fb      	ldr	r3, [r7, #12]
 8000aea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000aec:	68bb      	ldr	r3, [r7, #8]
 8000aee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000af0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000af4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000af8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000afa:	4a04      	ldr	r2, [pc, #16]	@ (8000b0c <__NVIC_SetPriorityGrouping+0x44>)
 8000afc:	68bb      	ldr	r3, [r7, #8]
 8000afe:	60d3      	str	r3, [r2, #12]
}
 8000b00:	bf00      	nop
 8000b02:	3714      	adds	r7, #20
 8000b04:	46bd      	mov	sp, r7
 8000b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b0a:	4770      	bx	lr
 8000b0c:	e000ed00 	.word	0xe000ed00

08000b10 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b10:	b480      	push	{r7}
 8000b12:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b14:	4b04      	ldr	r3, [pc, #16]	@ (8000b28 <__NVIC_GetPriorityGrouping+0x18>)
 8000b16:	68db      	ldr	r3, [r3, #12]
 8000b18:	0a1b      	lsrs	r3, r3, #8
 8000b1a:	f003 0307 	and.w	r3, r3, #7
}
 8000b1e:	4618      	mov	r0, r3
 8000b20:	46bd      	mov	sp, r7
 8000b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b26:	4770      	bx	lr
 8000b28:	e000ed00 	.word	0xe000ed00

08000b2c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b2c:	b480      	push	{r7}
 8000b2e:	b083      	sub	sp, #12
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	4603      	mov	r3, r0
 8000b34:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	db0b      	blt.n	8000b56 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b3e:	79fb      	ldrb	r3, [r7, #7]
 8000b40:	f003 021f 	and.w	r2, r3, #31
 8000b44:	4907      	ldr	r1, [pc, #28]	@ (8000b64 <__NVIC_EnableIRQ+0x38>)
 8000b46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b4a:	095b      	lsrs	r3, r3, #5
 8000b4c:	2001      	movs	r0, #1
 8000b4e:	fa00 f202 	lsl.w	r2, r0, r2
 8000b52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000b56:	bf00      	nop
 8000b58:	370c      	adds	r7, #12
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b60:	4770      	bx	lr
 8000b62:	bf00      	nop
 8000b64:	e000e100 	.word	0xe000e100

08000b68 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b68:	b480      	push	{r7}
 8000b6a:	b083      	sub	sp, #12
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	4603      	mov	r3, r0
 8000b70:	6039      	str	r1, [r7, #0]
 8000b72:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	db0a      	blt.n	8000b92 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b7c:	683b      	ldr	r3, [r7, #0]
 8000b7e:	b2da      	uxtb	r2, r3
 8000b80:	490c      	ldr	r1, [pc, #48]	@ (8000bb4 <__NVIC_SetPriority+0x4c>)
 8000b82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b86:	0112      	lsls	r2, r2, #4
 8000b88:	b2d2      	uxtb	r2, r2
 8000b8a:	440b      	add	r3, r1
 8000b8c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b90:	e00a      	b.n	8000ba8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b92:	683b      	ldr	r3, [r7, #0]
 8000b94:	b2da      	uxtb	r2, r3
 8000b96:	4908      	ldr	r1, [pc, #32]	@ (8000bb8 <__NVIC_SetPriority+0x50>)
 8000b98:	79fb      	ldrb	r3, [r7, #7]
 8000b9a:	f003 030f 	and.w	r3, r3, #15
 8000b9e:	3b04      	subs	r3, #4
 8000ba0:	0112      	lsls	r2, r2, #4
 8000ba2:	b2d2      	uxtb	r2, r2
 8000ba4:	440b      	add	r3, r1
 8000ba6:	761a      	strb	r2, [r3, #24]
}
 8000ba8:	bf00      	nop
 8000baa:	370c      	adds	r7, #12
 8000bac:	46bd      	mov	sp, r7
 8000bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb2:	4770      	bx	lr
 8000bb4:	e000e100 	.word	0xe000e100
 8000bb8:	e000ed00 	.word	0xe000ed00

08000bbc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000bbc:	b480      	push	{r7}
 8000bbe:	b089      	sub	sp, #36	@ 0x24
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	60f8      	str	r0, [r7, #12]
 8000bc4:	60b9      	str	r1, [r7, #8]
 8000bc6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000bc8:	68fb      	ldr	r3, [r7, #12]
 8000bca:	f003 0307 	and.w	r3, r3, #7
 8000bce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000bd0:	69fb      	ldr	r3, [r7, #28]
 8000bd2:	f1c3 0307 	rsb	r3, r3, #7
 8000bd6:	2b04      	cmp	r3, #4
 8000bd8:	bf28      	it	cs
 8000bda:	2304      	movcs	r3, #4
 8000bdc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000bde:	69fb      	ldr	r3, [r7, #28]
 8000be0:	3304      	adds	r3, #4
 8000be2:	2b06      	cmp	r3, #6
 8000be4:	d902      	bls.n	8000bec <NVIC_EncodePriority+0x30>
 8000be6:	69fb      	ldr	r3, [r7, #28]
 8000be8:	3b03      	subs	r3, #3
 8000bea:	e000      	b.n	8000bee <NVIC_EncodePriority+0x32>
 8000bec:	2300      	movs	r3, #0
 8000bee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bf0:	f04f 32ff 	mov.w	r2, #4294967295
 8000bf4:	69bb      	ldr	r3, [r7, #24]
 8000bf6:	fa02 f303 	lsl.w	r3, r2, r3
 8000bfa:	43da      	mvns	r2, r3
 8000bfc:	68bb      	ldr	r3, [r7, #8]
 8000bfe:	401a      	ands	r2, r3
 8000c00:	697b      	ldr	r3, [r7, #20]
 8000c02:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c04:	f04f 31ff 	mov.w	r1, #4294967295
 8000c08:	697b      	ldr	r3, [r7, #20]
 8000c0a:	fa01 f303 	lsl.w	r3, r1, r3
 8000c0e:	43d9      	mvns	r1, r3
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c14:	4313      	orrs	r3, r2
         );
}
 8000c16:	4618      	mov	r0, r3
 8000c18:	3724      	adds	r7, #36	@ 0x24
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c20:	4770      	bx	lr
	...

08000c24 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b082      	sub	sp, #8
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	3b01      	subs	r3, #1
 8000c30:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000c34:	d301      	bcc.n	8000c3a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c36:	2301      	movs	r3, #1
 8000c38:	e00f      	b.n	8000c5a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c3a:	4a0a      	ldr	r2, [pc, #40]	@ (8000c64 <SysTick_Config+0x40>)
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	3b01      	subs	r3, #1
 8000c40:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c42:	210f      	movs	r1, #15
 8000c44:	f04f 30ff 	mov.w	r0, #4294967295
 8000c48:	f7ff ff8e 	bl	8000b68 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c4c:	4b05      	ldr	r3, [pc, #20]	@ (8000c64 <SysTick_Config+0x40>)
 8000c4e:	2200      	movs	r2, #0
 8000c50:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c52:	4b04      	ldr	r3, [pc, #16]	@ (8000c64 <SysTick_Config+0x40>)
 8000c54:	2207      	movs	r2, #7
 8000c56:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c58:	2300      	movs	r3, #0
}
 8000c5a:	4618      	mov	r0, r3
 8000c5c:	3708      	adds	r7, #8
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	bd80      	pop	{r7, pc}
 8000c62:	bf00      	nop
 8000c64:	e000e010 	.word	0xe000e010

08000c68 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	b082      	sub	sp, #8
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c70:	6878      	ldr	r0, [r7, #4]
 8000c72:	f7ff ff29 	bl	8000ac8 <__NVIC_SetPriorityGrouping>
}
 8000c76:	bf00      	nop
 8000c78:	3708      	adds	r7, #8
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	bd80      	pop	{r7, pc}

08000c7e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000c7e:	b580      	push	{r7, lr}
 8000c80:	b086      	sub	sp, #24
 8000c82:	af00      	add	r7, sp, #0
 8000c84:	4603      	mov	r3, r0
 8000c86:	60b9      	str	r1, [r7, #8]
 8000c88:	607a      	str	r2, [r7, #4]
 8000c8a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000c90:	f7ff ff3e 	bl	8000b10 <__NVIC_GetPriorityGrouping>
 8000c94:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c96:	687a      	ldr	r2, [r7, #4]
 8000c98:	68b9      	ldr	r1, [r7, #8]
 8000c9a:	6978      	ldr	r0, [r7, #20]
 8000c9c:	f7ff ff8e 	bl	8000bbc <NVIC_EncodePriority>
 8000ca0:	4602      	mov	r2, r0
 8000ca2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ca6:	4611      	mov	r1, r2
 8000ca8:	4618      	mov	r0, r3
 8000caa:	f7ff ff5d 	bl	8000b68 <__NVIC_SetPriority>
}
 8000cae:	bf00      	nop
 8000cb0:	3718      	adds	r7, #24
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	bd80      	pop	{r7, pc}

08000cb6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000cb6:	b580      	push	{r7, lr}
 8000cb8:	b082      	sub	sp, #8
 8000cba:	af00      	add	r7, sp, #0
 8000cbc:	4603      	mov	r3, r0
 8000cbe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000cc0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cc4:	4618      	mov	r0, r3
 8000cc6:	f7ff ff31 	bl	8000b2c <__NVIC_EnableIRQ>
}
 8000cca:	bf00      	nop
 8000ccc:	3708      	adds	r7, #8
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	bd80      	pop	{r7, pc}

08000cd2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000cd2:	b580      	push	{r7, lr}
 8000cd4:	b082      	sub	sp, #8
 8000cd6:	af00      	add	r7, sp, #0
 8000cd8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000cda:	6878      	ldr	r0, [r7, #4]
 8000cdc:	f7ff ffa2 	bl	8000c24 <SysTick_Config>
 8000ce0:	4603      	mov	r3, r0
}
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	3708      	adds	r7, #8
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	bd80      	pop	{r7, pc}
	...

08000cec <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b082      	sub	sp, #8
 8000cf0:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	603b      	str	r3, [r7, #0]
 8000cfa:	4b20      	ldr	r3, [pc, #128]	@ (8000d7c <HAL_PWREx_EnableOverDrive+0x90>)
 8000cfc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cfe:	4a1f      	ldr	r2, [pc, #124]	@ (8000d7c <HAL_PWREx_EnableOverDrive+0x90>)
 8000d00:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000d04:	6413      	str	r3, [r2, #64]	@ 0x40
 8000d06:	4b1d      	ldr	r3, [pc, #116]	@ (8000d7c <HAL_PWREx_EnableOverDrive+0x90>)
 8000d08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d0a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000d0e:	603b      	str	r3, [r7, #0]
 8000d10:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8000d12:	4b1b      	ldr	r3, [pc, #108]	@ (8000d80 <HAL_PWREx_EnableOverDrive+0x94>)
 8000d14:	2201      	movs	r2, #1
 8000d16:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000d18:	f7ff feca 	bl	8000ab0 <HAL_GetTick>
 8000d1c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8000d1e:	e009      	b.n	8000d34 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8000d20:	f7ff fec6 	bl	8000ab0 <HAL_GetTick>
 8000d24:	4602      	mov	r2, r0
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	1ad3      	subs	r3, r2, r3
 8000d2a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8000d2e:	d901      	bls.n	8000d34 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8000d30:	2303      	movs	r3, #3
 8000d32:	e01f      	b.n	8000d74 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8000d34:	4b13      	ldr	r3, [pc, #76]	@ (8000d84 <HAL_PWREx_EnableOverDrive+0x98>)
 8000d36:	685b      	ldr	r3, [r3, #4]
 8000d38:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000d3c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000d40:	d1ee      	bne.n	8000d20 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8000d42:	4b11      	ldr	r3, [pc, #68]	@ (8000d88 <HAL_PWREx_EnableOverDrive+0x9c>)
 8000d44:	2201      	movs	r2, #1
 8000d46:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000d48:	f7ff feb2 	bl	8000ab0 <HAL_GetTick>
 8000d4c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8000d4e:	e009      	b.n	8000d64 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8000d50:	f7ff feae 	bl	8000ab0 <HAL_GetTick>
 8000d54:	4602      	mov	r2, r0
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	1ad3      	subs	r3, r2, r3
 8000d5a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8000d5e:	d901      	bls.n	8000d64 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8000d60:	2303      	movs	r3, #3
 8000d62:	e007      	b.n	8000d74 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8000d64:	4b07      	ldr	r3, [pc, #28]	@ (8000d84 <HAL_PWREx_EnableOverDrive+0x98>)
 8000d66:	685b      	ldr	r3, [r3, #4]
 8000d68:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000d6c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8000d70:	d1ee      	bne.n	8000d50 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8000d72:	2300      	movs	r3, #0
}
 8000d74:	4618      	mov	r0, r3
 8000d76:	3708      	adds	r7, #8
 8000d78:	46bd      	mov	sp, r7
 8000d7a:	bd80      	pop	{r7, pc}
 8000d7c:	40023800 	.word	0x40023800
 8000d80:	420e0040 	.word	0x420e0040
 8000d84:	40007000 	.word	0x40007000
 8000d88:	420e0044 	.word	0x420e0044

08000d8c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b086      	sub	sp, #24
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d101      	bne.n	8000d9e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000d9a:	2301      	movs	r3, #1
 8000d9c:	e267      	b.n	800126e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	f003 0301 	and.w	r3, r3, #1
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d075      	beq.n	8000e96 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000daa:	4b88      	ldr	r3, [pc, #544]	@ (8000fcc <HAL_RCC_OscConfig+0x240>)
 8000dac:	689b      	ldr	r3, [r3, #8]
 8000dae:	f003 030c 	and.w	r3, r3, #12
 8000db2:	2b04      	cmp	r3, #4
 8000db4:	d00c      	beq.n	8000dd0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000db6:	4b85      	ldr	r3, [pc, #532]	@ (8000fcc <HAL_RCC_OscConfig+0x240>)
 8000db8:	689b      	ldr	r3, [r3, #8]
 8000dba:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000dbe:	2b08      	cmp	r3, #8
 8000dc0:	d112      	bne.n	8000de8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000dc2:	4b82      	ldr	r3, [pc, #520]	@ (8000fcc <HAL_RCC_OscConfig+0x240>)
 8000dc4:	685b      	ldr	r3, [r3, #4]
 8000dc6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000dca:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8000dce:	d10b      	bne.n	8000de8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000dd0:	4b7e      	ldr	r3, [pc, #504]	@ (8000fcc <HAL_RCC_OscConfig+0x240>)
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	d05b      	beq.n	8000e94 <HAL_RCC_OscConfig+0x108>
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	685b      	ldr	r3, [r3, #4]
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	d157      	bne.n	8000e94 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8000de4:	2301      	movs	r3, #1
 8000de6:	e242      	b.n	800126e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	685b      	ldr	r3, [r3, #4]
 8000dec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000df0:	d106      	bne.n	8000e00 <HAL_RCC_OscConfig+0x74>
 8000df2:	4b76      	ldr	r3, [pc, #472]	@ (8000fcc <HAL_RCC_OscConfig+0x240>)
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	4a75      	ldr	r2, [pc, #468]	@ (8000fcc <HAL_RCC_OscConfig+0x240>)
 8000df8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000dfc:	6013      	str	r3, [r2, #0]
 8000dfe:	e01d      	b.n	8000e3c <HAL_RCC_OscConfig+0xb0>
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	685b      	ldr	r3, [r3, #4]
 8000e04:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8000e08:	d10c      	bne.n	8000e24 <HAL_RCC_OscConfig+0x98>
 8000e0a:	4b70      	ldr	r3, [pc, #448]	@ (8000fcc <HAL_RCC_OscConfig+0x240>)
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	4a6f      	ldr	r2, [pc, #444]	@ (8000fcc <HAL_RCC_OscConfig+0x240>)
 8000e10:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000e14:	6013      	str	r3, [r2, #0]
 8000e16:	4b6d      	ldr	r3, [pc, #436]	@ (8000fcc <HAL_RCC_OscConfig+0x240>)
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	4a6c      	ldr	r2, [pc, #432]	@ (8000fcc <HAL_RCC_OscConfig+0x240>)
 8000e1c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000e20:	6013      	str	r3, [r2, #0]
 8000e22:	e00b      	b.n	8000e3c <HAL_RCC_OscConfig+0xb0>
 8000e24:	4b69      	ldr	r3, [pc, #420]	@ (8000fcc <HAL_RCC_OscConfig+0x240>)
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	4a68      	ldr	r2, [pc, #416]	@ (8000fcc <HAL_RCC_OscConfig+0x240>)
 8000e2a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000e2e:	6013      	str	r3, [r2, #0]
 8000e30:	4b66      	ldr	r3, [pc, #408]	@ (8000fcc <HAL_RCC_OscConfig+0x240>)
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	4a65      	ldr	r2, [pc, #404]	@ (8000fcc <HAL_RCC_OscConfig+0x240>)
 8000e36:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000e3a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	685b      	ldr	r3, [r3, #4]
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	d013      	beq.n	8000e6c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e44:	f7ff fe34 	bl	8000ab0 <HAL_GetTick>
 8000e48:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000e4a:	e008      	b.n	8000e5e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000e4c:	f7ff fe30 	bl	8000ab0 <HAL_GetTick>
 8000e50:	4602      	mov	r2, r0
 8000e52:	693b      	ldr	r3, [r7, #16]
 8000e54:	1ad3      	subs	r3, r2, r3
 8000e56:	2b64      	cmp	r3, #100	@ 0x64
 8000e58:	d901      	bls.n	8000e5e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8000e5a:	2303      	movs	r3, #3
 8000e5c:	e207      	b.n	800126e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000e5e:	4b5b      	ldr	r3, [pc, #364]	@ (8000fcc <HAL_RCC_OscConfig+0x240>)
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	d0f0      	beq.n	8000e4c <HAL_RCC_OscConfig+0xc0>
 8000e6a:	e014      	b.n	8000e96 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e6c:	f7ff fe20 	bl	8000ab0 <HAL_GetTick>
 8000e70:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000e72:	e008      	b.n	8000e86 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000e74:	f7ff fe1c 	bl	8000ab0 <HAL_GetTick>
 8000e78:	4602      	mov	r2, r0
 8000e7a:	693b      	ldr	r3, [r7, #16]
 8000e7c:	1ad3      	subs	r3, r2, r3
 8000e7e:	2b64      	cmp	r3, #100	@ 0x64
 8000e80:	d901      	bls.n	8000e86 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8000e82:	2303      	movs	r3, #3
 8000e84:	e1f3      	b.n	800126e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000e86:	4b51      	ldr	r3, [pc, #324]	@ (8000fcc <HAL_RCC_OscConfig+0x240>)
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d1f0      	bne.n	8000e74 <HAL_RCC_OscConfig+0xe8>
 8000e92:	e000      	b.n	8000e96 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000e94:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	f003 0302 	and.w	r3, r3, #2
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d063      	beq.n	8000f6a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000ea2:	4b4a      	ldr	r3, [pc, #296]	@ (8000fcc <HAL_RCC_OscConfig+0x240>)
 8000ea4:	689b      	ldr	r3, [r3, #8]
 8000ea6:	f003 030c 	and.w	r3, r3, #12
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d00b      	beq.n	8000ec6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000eae:	4b47      	ldr	r3, [pc, #284]	@ (8000fcc <HAL_RCC_OscConfig+0x240>)
 8000eb0:	689b      	ldr	r3, [r3, #8]
 8000eb2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000eb6:	2b08      	cmp	r3, #8
 8000eb8:	d11c      	bne.n	8000ef4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000eba:	4b44      	ldr	r3, [pc, #272]	@ (8000fcc <HAL_RCC_OscConfig+0x240>)
 8000ebc:	685b      	ldr	r3, [r3, #4]
 8000ebe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d116      	bne.n	8000ef4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000ec6:	4b41      	ldr	r3, [pc, #260]	@ (8000fcc <HAL_RCC_OscConfig+0x240>)
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	f003 0302 	and.w	r3, r3, #2
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d005      	beq.n	8000ede <HAL_RCC_OscConfig+0x152>
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	68db      	ldr	r3, [r3, #12]
 8000ed6:	2b01      	cmp	r3, #1
 8000ed8:	d001      	beq.n	8000ede <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8000eda:	2301      	movs	r3, #1
 8000edc:	e1c7      	b.n	800126e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000ede:	4b3b      	ldr	r3, [pc, #236]	@ (8000fcc <HAL_RCC_OscConfig+0x240>)
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	691b      	ldr	r3, [r3, #16]
 8000eea:	00db      	lsls	r3, r3, #3
 8000eec:	4937      	ldr	r1, [pc, #220]	@ (8000fcc <HAL_RCC_OscConfig+0x240>)
 8000eee:	4313      	orrs	r3, r2
 8000ef0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000ef2:	e03a      	b.n	8000f6a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	68db      	ldr	r3, [r3, #12]
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d020      	beq.n	8000f3e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000efc:	4b34      	ldr	r3, [pc, #208]	@ (8000fd0 <HAL_RCC_OscConfig+0x244>)
 8000efe:	2201      	movs	r2, #1
 8000f00:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000f02:	f7ff fdd5 	bl	8000ab0 <HAL_GetTick>
 8000f06:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000f08:	e008      	b.n	8000f1c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000f0a:	f7ff fdd1 	bl	8000ab0 <HAL_GetTick>
 8000f0e:	4602      	mov	r2, r0
 8000f10:	693b      	ldr	r3, [r7, #16]
 8000f12:	1ad3      	subs	r3, r2, r3
 8000f14:	2b02      	cmp	r3, #2
 8000f16:	d901      	bls.n	8000f1c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8000f18:	2303      	movs	r3, #3
 8000f1a:	e1a8      	b.n	800126e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000f1c:	4b2b      	ldr	r3, [pc, #172]	@ (8000fcc <HAL_RCC_OscConfig+0x240>)
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	f003 0302 	and.w	r3, r3, #2
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d0f0      	beq.n	8000f0a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000f28:	4b28      	ldr	r3, [pc, #160]	@ (8000fcc <HAL_RCC_OscConfig+0x240>)
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	691b      	ldr	r3, [r3, #16]
 8000f34:	00db      	lsls	r3, r3, #3
 8000f36:	4925      	ldr	r1, [pc, #148]	@ (8000fcc <HAL_RCC_OscConfig+0x240>)
 8000f38:	4313      	orrs	r3, r2
 8000f3a:	600b      	str	r3, [r1, #0]
 8000f3c:	e015      	b.n	8000f6a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000f3e:	4b24      	ldr	r3, [pc, #144]	@ (8000fd0 <HAL_RCC_OscConfig+0x244>)
 8000f40:	2200      	movs	r2, #0
 8000f42:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000f44:	f7ff fdb4 	bl	8000ab0 <HAL_GetTick>
 8000f48:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000f4a:	e008      	b.n	8000f5e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000f4c:	f7ff fdb0 	bl	8000ab0 <HAL_GetTick>
 8000f50:	4602      	mov	r2, r0
 8000f52:	693b      	ldr	r3, [r7, #16]
 8000f54:	1ad3      	subs	r3, r2, r3
 8000f56:	2b02      	cmp	r3, #2
 8000f58:	d901      	bls.n	8000f5e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8000f5a:	2303      	movs	r3, #3
 8000f5c:	e187      	b.n	800126e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000f5e:	4b1b      	ldr	r3, [pc, #108]	@ (8000fcc <HAL_RCC_OscConfig+0x240>)
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	f003 0302 	and.w	r3, r3, #2
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d1f0      	bne.n	8000f4c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	f003 0308 	and.w	r3, r3, #8
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d036      	beq.n	8000fe4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	695b      	ldr	r3, [r3, #20]
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d016      	beq.n	8000fac <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000f7e:	4b15      	ldr	r3, [pc, #84]	@ (8000fd4 <HAL_RCC_OscConfig+0x248>)
 8000f80:	2201      	movs	r2, #1
 8000f82:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000f84:	f7ff fd94 	bl	8000ab0 <HAL_GetTick>
 8000f88:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000f8a:	e008      	b.n	8000f9e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000f8c:	f7ff fd90 	bl	8000ab0 <HAL_GetTick>
 8000f90:	4602      	mov	r2, r0
 8000f92:	693b      	ldr	r3, [r7, #16]
 8000f94:	1ad3      	subs	r3, r2, r3
 8000f96:	2b02      	cmp	r3, #2
 8000f98:	d901      	bls.n	8000f9e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8000f9a:	2303      	movs	r3, #3
 8000f9c:	e167      	b.n	800126e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000f9e:	4b0b      	ldr	r3, [pc, #44]	@ (8000fcc <HAL_RCC_OscConfig+0x240>)
 8000fa0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8000fa2:	f003 0302 	and.w	r3, r3, #2
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d0f0      	beq.n	8000f8c <HAL_RCC_OscConfig+0x200>
 8000faa:	e01b      	b.n	8000fe4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000fac:	4b09      	ldr	r3, [pc, #36]	@ (8000fd4 <HAL_RCC_OscConfig+0x248>)
 8000fae:	2200      	movs	r2, #0
 8000fb0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000fb2:	f7ff fd7d 	bl	8000ab0 <HAL_GetTick>
 8000fb6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000fb8:	e00e      	b.n	8000fd8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000fba:	f7ff fd79 	bl	8000ab0 <HAL_GetTick>
 8000fbe:	4602      	mov	r2, r0
 8000fc0:	693b      	ldr	r3, [r7, #16]
 8000fc2:	1ad3      	subs	r3, r2, r3
 8000fc4:	2b02      	cmp	r3, #2
 8000fc6:	d907      	bls.n	8000fd8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8000fc8:	2303      	movs	r3, #3
 8000fca:	e150      	b.n	800126e <HAL_RCC_OscConfig+0x4e2>
 8000fcc:	40023800 	.word	0x40023800
 8000fd0:	42470000 	.word	0x42470000
 8000fd4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000fd8:	4b88      	ldr	r3, [pc, #544]	@ (80011fc <HAL_RCC_OscConfig+0x470>)
 8000fda:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8000fdc:	f003 0302 	and.w	r3, r3, #2
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d1ea      	bne.n	8000fba <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	f003 0304 	and.w	r3, r3, #4
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	f000 8097 	beq.w	8001120 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000ff6:	4b81      	ldr	r3, [pc, #516]	@ (80011fc <HAL_RCC_OscConfig+0x470>)
 8000ff8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ffa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d10f      	bne.n	8001022 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001002:	2300      	movs	r3, #0
 8001004:	60bb      	str	r3, [r7, #8]
 8001006:	4b7d      	ldr	r3, [pc, #500]	@ (80011fc <HAL_RCC_OscConfig+0x470>)
 8001008:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800100a:	4a7c      	ldr	r2, [pc, #496]	@ (80011fc <HAL_RCC_OscConfig+0x470>)
 800100c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001010:	6413      	str	r3, [r2, #64]	@ 0x40
 8001012:	4b7a      	ldr	r3, [pc, #488]	@ (80011fc <HAL_RCC_OscConfig+0x470>)
 8001014:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001016:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800101a:	60bb      	str	r3, [r7, #8]
 800101c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800101e:	2301      	movs	r3, #1
 8001020:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001022:	4b77      	ldr	r3, [pc, #476]	@ (8001200 <HAL_RCC_OscConfig+0x474>)
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800102a:	2b00      	cmp	r3, #0
 800102c:	d118      	bne.n	8001060 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800102e:	4b74      	ldr	r3, [pc, #464]	@ (8001200 <HAL_RCC_OscConfig+0x474>)
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	4a73      	ldr	r2, [pc, #460]	@ (8001200 <HAL_RCC_OscConfig+0x474>)
 8001034:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001038:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800103a:	f7ff fd39 	bl	8000ab0 <HAL_GetTick>
 800103e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001040:	e008      	b.n	8001054 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001042:	f7ff fd35 	bl	8000ab0 <HAL_GetTick>
 8001046:	4602      	mov	r2, r0
 8001048:	693b      	ldr	r3, [r7, #16]
 800104a:	1ad3      	subs	r3, r2, r3
 800104c:	2b02      	cmp	r3, #2
 800104e:	d901      	bls.n	8001054 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001050:	2303      	movs	r3, #3
 8001052:	e10c      	b.n	800126e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001054:	4b6a      	ldr	r3, [pc, #424]	@ (8001200 <HAL_RCC_OscConfig+0x474>)
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800105c:	2b00      	cmp	r3, #0
 800105e:	d0f0      	beq.n	8001042 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	689b      	ldr	r3, [r3, #8]
 8001064:	2b01      	cmp	r3, #1
 8001066:	d106      	bne.n	8001076 <HAL_RCC_OscConfig+0x2ea>
 8001068:	4b64      	ldr	r3, [pc, #400]	@ (80011fc <HAL_RCC_OscConfig+0x470>)
 800106a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800106c:	4a63      	ldr	r2, [pc, #396]	@ (80011fc <HAL_RCC_OscConfig+0x470>)
 800106e:	f043 0301 	orr.w	r3, r3, #1
 8001072:	6713      	str	r3, [r2, #112]	@ 0x70
 8001074:	e01c      	b.n	80010b0 <HAL_RCC_OscConfig+0x324>
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	689b      	ldr	r3, [r3, #8]
 800107a:	2b05      	cmp	r3, #5
 800107c:	d10c      	bne.n	8001098 <HAL_RCC_OscConfig+0x30c>
 800107e:	4b5f      	ldr	r3, [pc, #380]	@ (80011fc <HAL_RCC_OscConfig+0x470>)
 8001080:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001082:	4a5e      	ldr	r2, [pc, #376]	@ (80011fc <HAL_RCC_OscConfig+0x470>)
 8001084:	f043 0304 	orr.w	r3, r3, #4
 8001088:	6713      	str	r3, [r2, #112]	@ 0x70
 800108a:	4b5c      	ldr	r3, [pc, #368]	@ (80011fc <HAL_RCC_OscConfig+0x470>)
 800108c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800108e:	4a5b      	ldr	r2, [pc, #364]	@ (80011fc <HAL_RCC_OscConfig+0x470>)
 8001090:	f043 0301 	orr.w	r3, r3, #1
 8001094:	6713      	str	r3, [r2, #112]	@ 0x70
 8001096:	e00b      	b.n	80010b0 <HAL_RCC_OscConfig+0x324>
 8001098:	4b58      	ldr	r3, [pc, #352]	@ (80011fc <HAL_RCC_OscConfig+0x470>)
 800109a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800109c:	4a57      	ldr	r2, [pc, #348]	@ (80011fc <HAL_RCC_OscConfig+0x470>)
 800109e:	f023 0301 	bic.w	r3, r3, #1
 80010a2:	6713      	str	r3, [r2, #112]	@ 0x70
 80010a4:	4b55      	ldr	r3, [pc, #340]	@ (80011fc <HAL_RCC_OscConfig+0x470>)
 80010a6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80010a8:	4a54      	ldr	r2, [pc, #336]	@ (80011fc <HAL_RCC_OscConfig+0x470>)
 80010aa:	f023 0304 	bic.w	r3, r3, #4
 80010ae:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	689b      	ldr	r3, [r3, #8]
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d015      	beq.n	80010e4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80010b8:	f7ff fcfa 	bl	8000ab0 <HAL_GetTick>
 80010bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80010be:	e00a      	b.n	80010d6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80010c0:	f7ff fcf6 	bl	8000ab0 <HAL_GetTick>
 80010c4:	4602      	mov	r2, r0
 80010c6:	693b      	ldr	r3, [r7, #16]
 80010c8:	1ad3      	subs	r3, r2, r3
 80010ca:	f241 3288 	movw	r2, #5000	@ 0x1388
 80010ce:	4293      	cmp	r3, r2
 80010d0:	d901      	bls.n	80010d6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80010d2:	2303      	movs	r3, #3
 80010d4:	e0cb      	b.n	800126e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80010d6:	4b49      	ldr	r3, [pc, #292]	@ (80011fc <HAL_RCC_OscConfig+0x470>)
 80010d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80010da:	f003 0302 	and.w	r3, r3, #2
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d0ee      	beq.n	80010c0 <HAL_RCC_OscConfig+0x334>
 80010e2:	e014      	b.n	800110e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80010e4:	f7ff fce4 	bl	8000ab0 <HAL_GetTick>
 80010e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80010ea:	e00a      	b.n	8001102 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80010ec:	f7ff fce0 	bl	8000ab0 <HAL_GetTick>
 80010f0:	4602      	mov	r2, r0
 80010f2:	693b      	ldr	r3, [r7, #16]
 80010f4:	1ad3      	subs	r3, r2, r3
 80010f6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80010fa:	4293      	cmp	r3, r2
 80010fc:	d901      	bls.n	8001102 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80010fe:	2303      	movs	r3, #3
 8001100:	e0b5      	b.n	800126e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001102:	4b3e      	ldr	r3, [pc, #248]	@ (80011fc <HAL_RCC_OscConfig+0x470>)
 8001104:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001106:	f003 0302 	and.w	r3, r3, #2
 800110a:	2b00      	cmp	r3, #0
 800110c:	d1ee      	bne.n	80010ec <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800110e:	7dfb      	ldrb	r3, [r7, #23]
 8001110:	2b01      	cmp	r3, #1
 8001112:	d105      	bne.n	8001120 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001114:	4b39      	ldr	r3, [pc, #228]	@ (80011fc <HAL_RCC_OscConfig+0x470>)
 8001116:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001118:	4a38      	ldr	r2, [pc, #224]	@ (80011fc <HAL_RCC_OscConfig+0x470>)
 800111a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800111e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	699b      	ldr	r3, [r3, #24]
 8001124:	2b00      	cmp	r3, #0
 8001126:	f000 80a1 	beq.w	800126c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800112a:	4b34      	ldr	r3, [pc, #208]	@ (80011fc <HAL_RCC_OscConfig+0x470>)
 800112c:	689b      	ldr	r3, [r3, #8]
 800112e:	f003 030c 	and.w	r3, r3, #12
 8001132:	2b08      	cmp	r3, #8
 8001134:	d05c      	beq.n	80011f0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	699b      	ldr	r3, [r3, #24]
 800113a:	2b02      	cmp	r3, #2
 800113c:	d141      	bne.n	80011c2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800113e:	4b31      	ldr	r3, [pc, #196]	@ (8001204 <HAL_RCC_OscConfig+0x478>)
 8001140:	2200      	movs	r2, #0
 8001142:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001144:	f7ff fcb4 	bl	8000ab0 <HAL_GetTick>
 8001148:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800114a:	e008      	b.n	800115e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800114c:	f7ff fcb0 	bl	8000ab0 <HAL_GetTick>
 8001150:	4602      	mov	r2, r0
 8001152:	693b      	ldr	r3, [r7, #16]
 8001154:	1ad3      	subs	r3, r2, r3
 8001156:	2b02      	cmp	r3, #2
 8001158:	d901      	bls.n	800115e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800115a:	2303      	movs	r3, #3
 800115c:	e087      	b.n	800126e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800115e:	4b27      	ldr	r3, [pc, #156]	@ (80011fc <HAL_RCC_OscConfig+0x470>)
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001166:	2b00      	cmp	r3, #0
 8001168:	d1f0      	bne.n	800114c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	69da      	ldr	r2, [r3, #28]
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	6a1b      	ldr	r3, [r3, #32]
 8001172:	431a      	orrs	r2, r3
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001178:	019b      	lsls	r3, r3, #6
 800117a:	431a      	orrs	r2, r3
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001180:	085b      	lsrs	r3, r3, #1
 8001182:	3b01      	subs	r3, #1
 8001184:	041b      	lsls	r3, r3, #16
 8001186:	431a      	orrs	r2, r3
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800118c:	061b      	lsls	r3, r3, #24
 800118e:	491b      	ldr	r1, [pc, #108]	@ (80011fc <HAL_RCC_OscConfig+0x470>)
 8001190:	4313      	orrs	r3, r2
 8001192:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001194:	4b1b      	ldr	r3, [pc, #108]	@ (8001204 <HAL_RCC_OscConfig+0x478>)
 8001196:	2201      	movs	r2, #1
 8001198:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800119a:	f7ff fc89 	bl	8000ab0 <HAL_GetTick>
 800119e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80011a0:	e008      	b.n	80011b4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80011a2:	f7ff fc85 	bl	8000ab0 <HAL_GetTick>
 80011a6:	4602      	mov	r2, r0
 80011a8:	693b      	ldr	r3, [r7, #16]
 80011aa:	1ad3      	subs	r3, r2, r3
 80011ac:	2b02      	cmp	r3, #2
 80011ae:	d901      	bls.n	80011b4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80011b0:	2303      	movs	r3, #3
 80011b2:	e05c      	b.n	800126e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80011b4:	4b11      	ldr	r3, [pc, #68]	@ (80011fc <HAL_RCC_OscConfig+0x470>)
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d0f0      	beq.n	80011a2 <HAL_RCC_OscConfig+0x416>
 80011c0:	e054      	b.n	800126c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80011c2:	4b10      	ldr	r3, [pc, #64]	@ (8001204 <HAL_RCC_OscConfig+0x478>)
 80011c4:	2200      	movs	r2, #0
 80011c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011c8:	f7ff fc72 	bl	8000ab0 <HAL_GetTick>
 80011cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80011ce:	e008      	b.n	80011e2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80011d0:	f7ff fc6e 	bl	8000ab0 <HAL_GetTick>
 80011d4:	4602      	mov	r2, r0
 80011d6:	693b      	ldr	r3, [r7, #16]
 80011d8:	1ad3      	subs	r3, r2, r3
 80011da:	2b02      	cmp	r3, #2
 80011dc:	d901      	bls.n	80011e2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80011de:	2303      	movs	r3, #3
 80011e0:	e045      	b.n	800126e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80011e2:	4b06      	ldr	r3, [pc, #24]	@ (80011fc <HAL_RCC_OscConfig+0x470>)
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d1f0      	bne.n	80011d0 <HAL_RCC_OscConfig+0x444>
 80011ee:	e03d      	b.n	800126c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	699b      	ldr	r3, [r3, #24]
 80011f4:	2b01      	cmp	r3, #1
 80011f6:	d107      	bne.n	8001208 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80011f8:	2301      	movs	r3, #1
 80011fa:	e038      	b.n	800126e <HAL_RCC_OscConfig+0x4e2>
 80011fc:	40023800 	.word	0x40023800
 8001200:	40007000 	.word	0x40007000
 8001204:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001208:	4b1b      	ldr	r3, [pc, #108]	@ (8001278 <HAL_RCC_OscConfig+0x4ec>)
 800120a:	685b      	ldr	r3, [r3, #4]
 800120c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	699b      	ldr	r3, [r3, #24]
 8001212:	2b01      	cmp	r3, #1
 8001214:	d028      	beq.n	8001268 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001216:	68fb      	ldr	r3, [r7, #12]
 8001218:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001220:	429a      	cmp	r2, r3
 8001222:	d121      	bne.n	8001268 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001224:	68fb      	ldr	r3, [r7, #12]
 8001226:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800122e:	429a      	cmp	r2, r3
 8001230:	d11a      	bne.n	8001268 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001232:	68fa      	ldr	r2, [r7, #12]
 8001234:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001238:	4013      	ands	r3, r2
 800123a:	687a      	ldr	r2, [r7, #4]
 800123c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800123e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001240:	4293      	cmp	r3, r2
 8001242:	d111      	bne.n	8001268 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001244:	68fb      	ldr	r3, [r7, #12]
 8001246:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800124e:	085b      	lsrs	r3, r3, #1
 8001250:	3b01      	subs	r3, #1
 8001252:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001254:	429a      	cmp	r2, r3
 8001256:	d107      	bne.n	8001268 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001258:	68fb      	ldr	r3, [r7, #12]
 800125a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001262:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001264:	429a      	cmp	r2, r3
 8001266:	d001      	beq.n	800126c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001268:	2301      	movs	r3, #1
 800126a:	e000      	b.n	800126e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800126c:	2300      	movs	r3, #0
}
 800126e:	4618      	mov	r0, r3
 8001270:	3718      	adds	r7, #24
 8001272:	46bd      	mov	sp, r7
 8001274:	bd80      	pop	{r7, pc}
 8001276:	bf00      	nop
 8001278:	40023800 	.word	0x40023800

0800127c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	b084      	sub	sp, #16
 8001280:	af00      	add	r7, sp, #0
 8001282:	6078      	str	r0, [r7, #4]
 8001284:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	2b00      	cmp	r3, #0
 800128a:	d101      	bne.n	8001290 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800128c:	2301      	movs	r3, #1
 800128e:	e0cc      	b.n	800142a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001290:	4b68      	ldr	r3, [pc, #416]	@ (8001434 <HAL_RCC_ClockConfig+0x1b8>)
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	f003 030f 	and.w	r3, r3, #15
 8001298:	683a      	ldr	r2, [r7, #0]
 800129a:	429a      	cmp	r2, r3
 800129c:	d90c      	bls.n	80012b8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800129e:	4b65      	ldr	r3, [pc, #404]	@ (8001434 <HAL_RCC_ClockConfig+0x1b8>)
 80012a0:	683a      	ldr	r2, [r7, #0]
 80012a2:	b2d2      	uxtb	r2, r2
 80012a4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80012a6:	4b63      	ldr	r3, [pc, #396]	@ (8001434 <HAL_RCC_ClockConfig+0x1b8>)
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	f003 030f 	and.w	r3, r3, #15
 80012ae:	683a      	ldr	r2, [r7, #0]
 80012b0:	429a      	cmp	r2, r3
 80012b2:	d001      	beq.n	80012b8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80012b4:	2301      	movs	r3, #1
 80012b6:	e0b8      	b.n	800142a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	f003 0302 	and.w	r3, r3, #2
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d020      	beq.n	8001306 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	f003 0304 	and.w	r3, r3, #4
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d005      	beq.n	80012dc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80012d0:	4b59      	ldr	r3, [pc, #356]	@ (8001438 <HAL_RCC_ClockConfig+0x1bc>)
 80012d2:	689b      	ldr	r3, [r3, #8]
 80012d4:	4a58      	ldr	r2, [pc, #352]	@ (8001438 <HAL_RCC_ClockConfig+0x1bc>)
 80012d6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80012da:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	f003 0308 	and.w	r3, r3, #8
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d005      	beq.n	80012f4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80012e8:	4b53      	ldr	r3, [pc, #332]	@ (8001438 <HAL_RCC_ClockConfig+0x1bc>)
 80012ea:	689b      	ldr	r3, [r3, #8]
 80012ec:	4a52      	ldr	r2, [pc, #328]	@ (8001438 <HAL_RCC_ClockConfig+0x1bc>)
 80012ee:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80012f2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80012f4:	4b50      	ldr	r3, [pc, #320]	@ (8001438 <HAL_RCC_ClockConfig+0x1bc>)
 80012f6:	689b      	ldr	r3, [r3, #8]
 80012f8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	689b      	ldr	r3, [r3, #8]
 8001300:	494d      	ldr	r1, [pc, #308]	@ (8001438 <HAL_RCC_ClockConfig+0x1bc>)
 8001302:	4313      	orrs	r3, r2
 8001304:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	f003 0301 	and.w	r3, r3, #1
 800130e:	2b00      	cmp	r3, #0
 8001310:	d044      	beq.n	800139c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	685b      	ldr	r3, [r3, #4]
 8001316:	2b01      	cmp	r3, #1
 8001318:	d107      	bne.n	800132a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800131a:	4b47      	ldr	r3, [pc, #284]	@ (8001438 <HAL_RCC_ClockConfig+0x1bc>)
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001322:	2b00      	cmp	r3, #0
 8001324:	d119      	bne.n	800135a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001326:	2301      	movs	r3, #1
 8001328:	e07f      	b.n	800142a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	685b      	ldr	r3, [r3, #4]
 800132e:	2b02      	cmp	r3, #2
 8001330:	d003      	beq.n	800133a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001336:	2b03      	cmp	r3, #3
 8001338:	d107      	bne.n	800134a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800133a:	4b3f      	ldr	r3, [pc, #252]	@ (8001438 <HAL_RCC_ClockConfig+0x1bc>)
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001342:	2b00      	cmp	r3, #0
 8001344:	d109      	bne.n	800135a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001346:	2301      	movs	r3, #1
 8001348:	e06f      	b.n	800142a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800134a:	4b3b      	ldr	r3, [pc, #236]	@ (8001438 <HAL_RCC_ClockConfig+0x1bc>)
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	f003 0302 	and.w	r3, r3, #2
 8001352:	2b00      	cmp	r3, #0
 8001354:	d101      	bne.n	800135a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001356:	2301      	movs	r3, #1
 8001358:	e067      	b.n	800142a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800135a:	4b37      	ldr	r3, [pc, #220]	@ (8001438 <HAL_RCC_ClockConfig+0x1bc>)
 800135c:	689b      	ldr	r3, [r3, #8]
 800135e:	f023 0203 	bic.w	r2, r3, #3
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	685b      	ldr	r3, [r3, #4]
 8001366:	4934      	ldr	r1, [pc, #208]	@ (8001438 <HAL_RCC_ClockConfig+0x1bc>)
 8001368:	4313      	orrs	r3, r2
 800136a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800136c:	f7ff fba0 	bl	8000ab0 <HAL_GetTick>
 8001370:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001372:	e00a      	b.n	800138a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001374:	f7ff fb9c 	bl	8000ab0 <HAL_GetTick>
 8001378:	4602      	mov	r2, r0
 800137a:	68fb      	ldr	r3, [r7, #12]
 800137c:	1ad3      	subs	r3, r2, r3
 800137e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001382:	4293      	cmp	r3, r2
 8001384:	d901      	bls.n	800138a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001386:	2303      	movs	r3, #3
 8001388:	e04f      	b.n	800142a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800138a:	4b2b      	ldr	r3, [pc, #172]	@ (8001438 <HAL_RCC_ClockConfig+0x1bc>)
 800138c:	689b      	ldr	r3, [r3, #8]
 800138e:	f003 020c 	and.w	r2, r3, #12
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	685b      	ldr	r3, [r3, #4]
 8001396:	009b      	lsls	r3, r3, #2
 8001398:	429a      	cmp	r2, r3
 800139a:	d1eb      	bne.n	8001374 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800139c:	4b25      	ldr	r3, [pc, #148]	@ (8001434 <HAL_RCC_ClockConfig+0x1b8>)
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	f003 030f 	and.w	r3, r3, #15
 80013a4:	683a      	ldr	r2, [r7, #0]
 80013a6:	429a      	cmp	r2, r3
 80013a8:	d20c      	bcs.n	80013c4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80013aa:	4b22      	ldr	r3, [pc, #136]	@ (8001434 <HAL_RCC_ClockConfig+0x1b8>)
 80013ac:	683a      	ldr	r2, [r7, #0]
 80013ae:	b2d2      	uxtb	r2, r2
 80013b0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80013b2:	4b20      	ldr	r3, [pc, #128]	@ (8001434 <HAL_RCC_ClockConfig+0x1b8>)
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	f003 030f 	and.w	r3, r3, #15
 80013ba:	683a      	ldr	r2, [r7, #0]
 80013bc:	429a      	cmp	r2, r3
 80013be:	d001      	beq.n	80013c4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80013c0:	2301      	movs	r3, #1
 80013c2:	e032      	b.n	800142a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	f003 0304 	and.w	r3, r3, #4
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d008      	beq.n	80013e2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80013d0:	4b19      	ldr	r3, [pc, #100]	@ (8001438 <HAL_RCC_ClockConfig+0x1bc>)
 80013d2:	689b      	ldr	r3, [r3, #8]
 80013d4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	68db      	ldr	r3, [r3, #12]
 80013dc:	4916      	ldr	r1, [pc, #88]	@ (8001438 <HAL_RCC_ClockConfig+0x1bc>)
 80013de:	4313      	orrs	r3, r2
 80013e0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	f003 0308 	and.w	r3, r3, #8
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d009      	beq.n	8001402 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80013ee:	4b12      	ldr	r3, [pc, #72]	@ (8001438 <HAL_RCC_ClockConfig+0x1bc>)
 80013f0:	689b      	ldr	r3, [r3, #8]
 80013f2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	691b      	ldr	r3, [r3, #16]
 80013fa:	00db      	lsls	r3, r3, #3
 80013fc:	490e      	ldr	r1, [pc, #56]	@ (8001438 <HAL_RCC_ClockConfig+0x1bc>)
 80013fe:	4313      	orrs	r3, r2
 8001400:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001402:	f000 f821 	bl	8001448 <HAL_RCC_GetSysClockFreq>
 8001406:	4602      	mov	r2, r0
 8001408:	4b0b      	ldr	r3, [pc, #44]	@ (8001438 <HAL_RCC_ClockConfig+0x1bc>)
 800140a:	689b      	ldr	r3, [r3, #8]
 800140c:	091b      	lsrs	r3, r3, #4
 800140e:	f003 030f 	and.w	r3, r3, #15
 8001412:	490a      	ldr	r1, [pc, #40]	@ (800143c <HAL_RCC_ClockConfig+0x1c0>)
 8001414:	5ccb      	ldrb	r3, [r1, r3]
 8001416:	fa22 f303 	lsr.w	r3, r2, r3
 800141a:	4a09      	ldr	r2, [pc, #36]	@ (8001440 <HAL_RCC_ClockConfig+0x1c4>)
 800141c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800141e:	4b09      	ldr	r3, [pc, #36]	@ (8001444 <HAL_RCC_ClockConfig+0x1c8>)
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	4618      	mov	r0, r3
 8001424:	f7ff fb00 	bl	8000a28 <HAL_InitTick>

  return HAL_OK;
 8001428:	2300      	movs	r3, #0
}
 800142a:	4618      	mov	r0, r3
 800142c:	3710      	adds	r7, #16
 800142e:	46bd      	mov	sp, r7
 8001430:	bd80      	pop	{r7, pc}
 8001432:	bf00      	nop
 8001434:	40023c00 	.word	0x40023c00
 8001438:	40023800 	.word	0x40023800
 800143c:	08001f30 	.word	0x08001f30
 8001440:	20000144 	.word	0x20000144
 8001444:	20000148 	.word	0x20000148

08001448 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001448:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800144c:	b090      	sub	sp, #64	@ 0x40
 800144e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001450:	2300      	movs	r3, #0
 8001452:	637b      	str	r3, [r7, #52]	@ 0x34
 8001454:	2300      	movs	r3, #0
 8001456:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001458:	2300      	movs	r3, #0
 800145a:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 800145c:	2300      	movs	r3, #0
 800145e:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001460:	4b59      	ldr	r3, [pc, #356]	@ (80015c8 <HAL_RCC_GetSysClockFreq+0x180>)
 8001462:	689b      	ldr	r3, [r3, #8]
 8001464:	f003 030c 	and.w	r3, r3, #12
 8001468:	2b08      	cmp	r3, #8
 800146a:	d00d      	beq.n	8001488 <HAL_RCC_GetSysClockFreq+0x40>
 800146c:	2b08      	cmp	r3, #8
 800146e:	f200 80a1 	bhi.w	80015b4 <HAL_RCC_GetSysClockFreq+0x16c>
 8001472:	2b00      	cmp	r3, #0
 8001474:	d002      	beq.n	800147c <HAL_RCC_GetSysClockFreq+0x34>
 8001476:	2b04      	cmp	r3, #4
 8001478:	d003      	beq.n	8001482 <HAL_RCC_GetSysClockFreq+0x3a>
 800147a:	e09b      	b.n	80015b4 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800147c:	4b53      	ldr	r3, [pc, #332]	@ (80015cc <HAL_RCC_GetSysClockFreq+0x184>)
 800147e:	63bb      	str	r3, [r7, #56]	@ 0x38
       break;
 8001480:	e09b      	b.n	80015ba <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001482:	4b53      	ldr	r3, [pc, #332]	@ (80015d0 <HAL_RCC_GetSysClockFreq+0x188>)
 8001484:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001486:	e098      	b.n	80015ba <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001488:	4b4f      	ldr	r3, [pc, #316]	@ (80015c8 <HAL_RCC_GetSysClockFreq+0x180>)
 800148a:	685b      	ldr	r3, [r3, #4]
 800148c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001490:	637b      	str	r3, [r7, #52]	@ 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001492:	4b4d      	ldr	r3, [pc, #308]	@ (80015c8 <HAL_RCC_GetSysClockFreq+0x180>)
 8001494:	685b      	ldr	r3, [r3, #4]
 8001496:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800149a:	2b00      	cmp	r3, #0
 800149c:	d028      	beq.n	80014f0 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800149e:	4b4a      	ldr	r3, [pc, #296]	@ (80015c8 <HAL_RCC_GetSysClockFreq+0x180>)
 80014a0:	685b      	ldr	r3, [r3, #4]
 80014a2:	099b      	lsrs	r3, r3, #6
 80014a4:	2200      	movs	r2, #0
 80014a6:	623b      	str	r3, [r7, #32]
 80014a8:	627a      	str	r2, [r7, #36]	@ 0x24
 80014aa:	6a3b      	ldr	r3, [r7, #32]
 80014ac:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80014b0:	2100      	movs	r1, #0
 80014b2:	4b47      	ldr	r3, [pc, #284]	@ (80015d0 <HAL_RCC_GetSysClockFreq+0x188>)
 80014b4:	fb03 f201 	mul.w	r2, r3, r1
 80014b8:	2300      	movs	r3, #0
 80014ba:	fb00 f303 	mul.w	r3, r0, r3
 80014be:	4413      	add	r3, r2
 80014c0:	4a43      	ldr	r2, [pc, #268]	@ (80015d0 <HAL_RCC_GetSysClockFreq+0x188>)
 80014c2:	fba0 1202 	umull	r1, r2, r0, r2
 80014c6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80014c8:	460a      	mov	r2, r1
 80014ca:	62ba      	str	r2, [r7, #40]	@ 0x28
 80014cc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80014ce:	4413      	add	r3, r2
 80014d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80014d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80014d4:	2200      	movs	r2, #0
 80014d6:	61bb      	str	r3, [r7, #24]
 80014d8:	61fa      	str	r2, [r7, #28]
 80014da:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80014de:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80014e2:	f7fe fe83 	bl	80001ec <__aeabi_uldivmod>
 80014e6:	4602      	mov	r2, r0
 80014e8:	460b      	mov	r3, r1
 80014ea:	4613      	mov	r3, r2
 80014ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80014ee:	e053      	b.n	8001598 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80014f0:	4b35      	ldr	r3, [pc, #212]	@ (80015c8 <HAL_RCC_GetSysClockFreq+0x180>)
 80014f2:	685b      	ldr	r3, [r3, #4]
 80014f4:	099b      	lsrs	r3, r3, #6
 80014f6:	2200      	movs	r2, #0
 80014f8:	613b      	str	r3, [r7, #16]
 80014fa:	617a      	str	r2, [r7, #20]
 80014fc:	693b      	ldr	r3, [r7, #16]
 80014fe:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8001502:	f04f 0b00 	mov.w	fp, #0
 8001506:	4652      	mov	r2, sl
 8001508:	465b      	mov	r3, fp
 800150a:	f04f 0000 	mov.w	r0, #0
 800150e:	f04f 0100 	mov.w	r1, #0
 8001512:	0159      	lsls	r1, r3, #5
 8001514:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001518:	0150      	lsls	r0, r2, #5
 800151a:	4602      	mov	r2, r0
 800151c:	460b      	mov	r3, r1
 800151e:	ebb2 080a 	subs.w	r8, r2, sl
 8001522:	eb63 090b 	sbc.w	r9, r3, fp
 8001526:	f04f 0200 	mov.w	r2, #0
 800152a:	f04f 0300 	mov.w	r3, #0
 800152e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8001532:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8001536:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800153a:	ebb2 0408 	subs.w	r4, r2, r8
 800153e:	eb63 0509 	sbc.w	r5, r3, r9
 8001542:	f04f 0200 	mov.w	r2, #0
 8001546:	f04f 0300 	mov.w	r3, #0
 800154a:	00eb      	lsls	r3, r5, #3
 800154c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001550:	00e2      	lsls	r2, r4, #3
 8001552:	4614      	mov	r4, r2
 8001554:	461d      	mov	r5, r3
 8001556:	eb14 030a 	adds.w	r3, r4, sl
 800155a:	603b      	str	r3, [r7, #0]
 800155c:	eb45 030b 	adc.w	r3, r5, fp
 8001560:	607b      	str	r3, [r7, #4]
 8001562:	f04f 0200 	mov.w	r2, #0
 8001566:	f04f 0300 	mov.w	r3, #0
 800156a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800156e:	4629      	mov	r1, r5
 8001570:	028b      	lsls	r3, r1, #10
 8001572:	4621      	mov	r1, r4
 8001574:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001578:	4621      	mov	r1, r4
 800157a:	028a      	lsls	r2, r1, #10
 800157c:	4610      	mov	r0, r2
 800157e:	4619      	mov	r1, r3
 8001580:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001582:	2200      	movs	r2, #0
 8001584:	60bb      	str	r3, [r7, #8]
 8001586:	60fa      	str	r2, [r7, #12]
 8001588:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800158c:	f7fe fe2e 	bl	80001ec <__aeabi_uldivmod>
 8001590:	4602      	mov	r2, r0
 8001592:	460b      	mov	r3, r1
 8001594:	4613      	mov	r3, r2
 8001596:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001598:	4b0b      	ldr	r3, [pc, #44]	@ (80015c8 <HAL_RCC_GetSysClockFreq+0x180>)
 800159a:	685b      	ldr	r3, [r3, #4]
 800159c:	0c1b      	lsrs	r3, r3, #16
 800159e:	f003 0303 	and.w	r3, r3, #3
 80015a2:	3301      	adds	r3, #1
 80015a4:	005b      	lsls	r3, r3, #1
 80015a6:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco/pllp;
 80015a8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80015aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80015ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80015b0:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80015b2:	e002      	b.n	80015ba <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80015b4:	4b05      	ldr	r3, [pc, #20]	@ (80015cc <HAL_RCC_GetSysClockFreq+0x184>)
 80015b6:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80015b8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80015ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 80015bc:	4618      	mov	r0, r3
 80015be:	3740      	adds	r7, #64	@ 0x40
 80015c0:	46bd      	mov	sp, r7
 80015c2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80015c6:	bf00      	nop
 80015c8:	40023800 	.word	0x40023800
 80015cc:	00f42400 	.word	0x00f42400
 80015d0:	017d7840 	.word	0x017d7840

080015d4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b082      	sub	sp, #8
 80015d8:	af00      	add	r7, sp, #0
 80015da:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d101      	bne.n	80015e6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80015e2:	2301      	movs	r3, #1
 80015e4:	e041      	b.n	800166a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80015ec:	b2db      	uxtb	r3, r3
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d106      	bne.n	8001600 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	2200      	movs	r2, #0
 80015f6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80015fa:	6878      	ldr	r0, [r7, #4]
 80015fc:	f7ff f954 	bl	80008a8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	2202      	movs	r2, #2
 8001604:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681a      	ldr	r2, [r3, #0]
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	3304      	adds	r3, #4
 8001610:	4619      	mov	r1, r3
 8001612:	4610      	mov	r0, r2
 8001614:	f000 fa7e 	bl	8001b14 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	2201      	movs	r2, #1
 800161c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	2201      	movs	r2, #1
 8001624:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	2201      	movs	r2, #1
 800162c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	2201      	movs	r2, #1
 8001634:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	2201      	movs	r2, #1
 800163c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	2201      	movs	r2, #1
 8001644:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	2201      	movs	r2, #1
 800164c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	2201      	movs	r2, #1
 8001654:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	2201      	movs	r2, #1
 800165c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	2201      	movs	r2, #1
 8001664:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001668:	2300      	movs	r3, #0
}
 800166a:	4618      	mov	r0, r3
 800166c:	3708      	adds	r7, #8
 800166e:	46bd      	mov	sp, r7
 8001670:	bd80      	pop	{r7, pc}
	...

08001674 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001674:	b480      	push	{r7}
 8001676:	b085      	sub	sp, #20
 8001678:	af00      	add	r7, sp, #0
 800167a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001682:	b2db      	uxtb	r3, r3
 8001684:	2b01      	cmp	r3, #1
 8001686:	d001      	beq.n	800168c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001688:	2301      	movs	r3, #1
 800168a:	e04e      	b.n	800172a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	2202      	movs	r2, #2
 8001690:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	68da      	ldr	r2, [r3, #12]
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	f042 0201 	orr.w	r2, r2, #1
 80016a2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	4a23      	ldr	r2, [pc, #140]	@ (8001738 <HAL_TIM_Base_Start_IT+0xc4>)
 80016aa:	4293      	cmp	r3, r2
 80016ac:	d022      	beq.n	80016f4 <HAL_TIM_Base_Start_IT+0x80>
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80016b6:	d01d      	beq.n	80016f4 <HAL_TIM_Base_Start_IT+0x80>
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	4a1f      	ldr	r2, [pc, #124]	@ (800173c <HAL_TIM_Base_Start_IT+0xc8>)
 80016be:	4293      	cmp	r3, r2
 80016c0:	d018      	beq.n	80016f4 <HAL_TIM_Base_Start_IT+0x80>
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	4a1e      	ldr	r2, [pc, #120]	@ (8001740 <HAL_TIM_Base_Start_IT+0xcc>)
 80016c8:	4293      	cmp	r3, r2
 80016ca:	d013      	beq.n	80016f4 <HAL_TIM_Base_Start_IT+0x80>
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	4a1c      	ldr	r2, [pc, #112]	@ (8001744 <HAL_TIM_Base_Start_IT+0xd0>)
 80016d2:	4293      	cmp	r3, r2
 80016d4:	d00e      	beq.n	80016f4 <HAL_TIM_Base_Start_IT+0x80>
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	4a1b      	ldr	r2, [pc, #108]	@ (8001748 <HAL_TIM_Base_Start_IT+0xd4>)
 80016dc:	4293      	cmp	r3, r2
 80016de:	d009      	beq.n	80016f4 <HAL_TIM_Base_Start_IT+0x80>
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	4a19      	ldr	r2, [pc, #100]	@ (800174c <HAL_TIM_Base_Start_IT+0xd8>)
 80016e6:	4293      	cmp	r3, r2
 80016e8:	d004      	beq.n	80016f4 <HAL_TIM_Base_Start_IT+0x80>
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	4a18      	ldr	r2, [pc, #96]	@ (8001750 <HAL_TIM_Base_Start_IT+0xdc>)
 80016f0:	4293      	cmp	r3, r2
 80016f2:	d111      	bne.n	8001718 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	689b      	ldr	r3, [r3, #8]
 80016fa:	f003 0307 	and.w	r3, r3, #7
 80016fe:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	2b06      	cmp	r3, #6
 8001704:	d010      	beq.n	8001728 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	681a      	ldr	r2, [r3, #0]
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	f042 0201 	orr.w	r2, r2, #1
 8001714:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001716:	e007      	b.n	8001728 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	681a      	ldr	r2, [r3, #0]
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	f042 0201 	orr.w	r2, r2, #1
 8001726:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001728:	2300      	movs	r3, #0
}
 800172a:	4618      	mov	r0, r3
 800172c:	3714      	adds	r7, #20
 800172e:	46bd      	mov	sp, r7
 8001730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001734:	4770      	bx	lr
 8001736:	bf00      	nop
 8001738:	40010000 	.word	0x40010000
 800173c:	40000400 	.word	0x40000400
 8001740:	40000800 	.word	0x40000800
 8001744:	40000c00 	.word	0x40000c00
 8001748:	40010400 	.word	0x40010400
 800174c:	40014000 	.word	0x40014000
 8001750:	40001800 	.word	0x40001800

08001754 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	b084      	sub	sp, #16
 8001758:	af00      	add	r7, sp, #0
 800175a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	68db      	ldr	r3, [r3, #12]
 8001762:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	691b      	ldr	r3, [r3, #16]
 800176a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800176c:	68bb      	ldr	r3, [r7, #8]
 800176e:	f003 0302 	and.w	r3, r3, #2
 8001772:	2b00      	cmp	r3, #0
 8001774:	d020      	beq.n	80017b8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	f003 0302 	and.w	r3, r3, #2
 800177c:	2b00      	cmp	r3, #0
 800177e:	d01b      	beq.n	80017b8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	f06f 0202 	mvn.w	r2, #2
 8001788:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	2201      	movs	r2, #1
 800178e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	699b      	ldr	r3, [r3, #24]
 8001796:	f003 0303 	and.w	r3, r3, #3
 800179a:	2b00      	cmp	r3, #0
 800179c:	d003      	beq.n	80017a6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800179e:	6878      	ldr	r0, [r7, #4]
 80017a0:	f000 f999 	bl	8001ad6 <HAL_TIM_IC_CaptureCallback>
 80017a4:	e005      	b.n	80017b2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80017a6:	6878      	ldr	r0, [r7, #4]
 80017a8:	f000 f98b 	bl	8001ac2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80017ac:	6878      	ldr	r0, [r7, #4]
 80017ae:	f000 f99c 	bl	8001aea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	2200      	movs	r2, #0
 80017b6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80017b8:	68bb      	ldr	r3, [r7, #8]
 80017ba:	f003 0304 	and.w	r3, r3, #4
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d020      	beq.n	8001804 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	f003 0304 	and.w	r3, r3, #4
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d01b      	beq.n	8001804 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	f06f 0204 	mvn.w	r2, #4
 80017d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	2202      	movs	r2, #2
 80017da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	699b      	ldr	r3, [r3, #24]
 80017e2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d003      	beq.n	80017f2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80017ea:	6878      	ldr	r0, [r7, #4]
 80017ec:	f000 f973 	bl	8001ad6 <HAL_TIM_IC_CaptureCallback>
 80017f0:	e005      	b.n	80017fe <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80017f2:	6878      	ldr	r0, [r7, #4]
 80017f4:	f000 f965 	bl	8001ac2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80017f8:	6878      	ldr	r0, [r7, #4]
 80017fa:	f000 f976 	bl	8001aea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	2200      	movs	r2, #0
 8001802:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8001804:	68bb      	ldr	r3, [r7, #8]
 8001806:	f003 0308 	and.w	r3, r3, #8
 800180a:	2b00      	cmp	r3, #0
 800180c:	d020      	beq.n	8001850 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	f003 0308 	and.w	r3, r3, #8
 8001814:	2b00      	cmp	r3, #0
 8001816:	d01b      	beq.n	8001850 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	f06f 0208 	mvn.w	r2, #8
 8001820:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	2204      	movs	r2, #4
 8001826:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	69db      	ldr	r3, [r3, #28]
 800182e:	f003 0303 	and.w	r3, r3, #3
 8001832:	2b00      	cmp	r3, #0
 8001834:	d003      	beq.n	800183e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001836:	6878      	ldr	r0, [r7, #4]
 8001838:	f000 f94d 	bl	8001ad6 <HAL_TIM_IC_CaptureCallback>
 800183c:	e005      	b.n	800184a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800183e:	6878      	ldr	r0, [r7, #4]
 8001840:	f000 f93f 	bl	8001ac2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001844:	6878      	ldr	r0, [r7, #4]
 8001846:	f000 f950 	bl	8001aea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	2200      	movs	r2, #0
 800184e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8001850:	68bb      	ldr	r3, [r7, #8]
 8001852:	f003 0310 	and.w	r3, r3, #16
 8001856:	2b00      	cmp	r3, #0
 8001858:	d020      	beq.n	800189c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800185a:	68fb      	ldr	r3, [r7, #12]
 800185c:	f003 0310 	and.w	r3, r3, #16
 8001860:	2b00      	cmp	r3, #0
 8001862:	d01b      	beq.n	800189c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	f06f 0210 	mvn.w	r2, #16
 800186c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	2208      	movs	r2, #8
 8001872:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	69db      	ldr	r3, [r3, #28]
 800187a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800187e:	2b00      	cmp	r3, #0
 8001880:	d003      	beq.n	800188a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001882:	6878      	ldr	r0, [r7, #4]
 8001884:	f000 f927 	bl	8001ad6 <HAL_TIM_IC_CaptureCallback>
 8001888:	e005      	b.n	8001896 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800188a:	6878      	ldr	r0, [r7, #4]
 800188c:	f000 f919 	bl	8001ac2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001890:	6878      	ldr	r0, [r7, #4]
 8001892:	f000 f92a 	bl	8001aea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	2200      	movs	r2, #0
 800189a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800189c:	68bb      	ldr	r3, [r7, #8]
 800189e:	f003 0301 	and.w	r3, r3, #1
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d00c      	beq.n	80018c0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	f003 0301 	and.w	r3, r3, #1
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d007      	beq.n	80018c0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	f06f 0201 	mvn.w	r2, #1
 80018b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80018ba:	6878      	ldr	r0, [r7, #4]
 80018bc:	f7fe ff6e 	bl	800079c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80018c0:	68bb      	ldr	r3, [r7, #8]
 80018c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d00c      	beq.n	80018e4 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d007      	beq.n	80018e4 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80018dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80018de:	6878      	ldr	r0, [r7, #4]
 80018e0:	f000 fae4 	bl	8001eac <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80018e4:	68bb      	ldr	r3, [r7, #8]
 80018e6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d00c      	beq.n	8001908 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d007      	beq.n	8001908 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8001900:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001902:	6878      	ldr	r0, [r7, #4]
 8001904:	f000 f8fb 	bl	8001afe <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8001908:	68bb      	ldr	r3, [r7, #8]
 800190a:	f003 0320 	and.w	r3, r3, #32
 800190e:	2b00      	cmp	r3, #0
 8001910:	d00c      	beq.n	800192c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	f003 0320 	and.w	r3, r3, #32
 8001918:	2b00      	cmp	r3, #0
 800191a:	d007      	beq.n	800192c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	f06f 0220 	mvn.w	r2, #32
 8001924:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001926:	6878      	ldr	r0, [r7, #4]
 8001928:	f000 fab6 	bl	8001e98 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800192c:	bf00      	nop
 800192e:	3710      	adds	r7, #16
 8001930:	46bd      	mov	sp, r7
 8001932:	bd80      	pop	{r7, pc}

08001934 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	b084      	sub	sp, #16
 8001938:	af00      	add	r7, sp, #0
 800193a:	6078      	str	r0, [r7, #4]
 800193c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800193e:	2300      	movs	r3, #0
 8001940:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001948:	2b01      	cmp	r3, #1
 800194a:	d101      	bne.n	8001950 <HAL_TIM_ConfigClockSource+0x1c>
 800194c:	2302      	movs	r3, #2
 800194e:	e0b4      	b.n	8001aba <HAL_TIM_ConfigClockSource+0x186>
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	2201      	movs	r2, #1
 8001954:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	2202      	movs	r2, #2
 800195c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	689b      	ldr	r3, [r3, #8]
 8001966:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8001968:	68bb      	ldr	r3, [r7, #8]
 800196a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800196e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001970:	68bb      	ldr	r3, [r7, #8]
 8001972:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8001976:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	68ba      	ldr	r2, [r7, #8]
 800197e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8001980:	683b      	ldr	r3, [r7, #0]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001988:	d03e      	beq.n	8001a08 <HAL_TIM_ConfigClockSource+0xd4>
 800198a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800198e:	f200 8087 	bhi.w	8001aa0 <HAL_TIM_ConfigClockSource+0x16c>
 8001992:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001996:	f000 8086 	beq.w	8001aa6 <HAL_TIM_ConfigClockSource+0x172>
 800199a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800199e:	d87f      	bhi.n	8001aa0 <HAL_TIM_ConfigClockSource+0x16c>
 80019a0:	2b70      	cmp	r3, #112	@ 0x70
 80019a2:	d01a      	beq.n	80019da <HAL_TIM_ConfigClockSource+0xa6>
 80019a4:	2b70      	cmp	r3, #112	@ 0x70
 80019a6:	d87b      	bhi.n	8001aa0 <HAL_TIM_ConfigClockSource+0x16c>
 80019a8:	2b60      	cmp	r3, #96	@ 0x60
 80019aa:	d050      	beq.n	8001a4e <HAL_TIM_ConfigClockSource+0x11a>
 80019ac:	2b60      	cmp	r3, #96	@ 0x60
 80019ae:	d877      	bhi.n	8001aa0 <HAL_TIM_ConfigClockSource+0x16c>
 80019b0:	2b50      	cmp	r3, #80	@ 0x50
 80019b2:	d03c      	beq.n	8001a2e <HAL_TIM_ConfigClockSource+0xfa>
 80019b4:	2b50      	cmp	r3, #80	@ 0x50
 80019b6:	d873      	bhi.n	8001aa0 <HAL_TIM_ConfigClockSource+0x16c>
 80019b8:	2b40      	cmp	r3, #64	@ 0x40
 80019ba:	d058      	beq.n	8001a6e <HAL_TIM_ConfigClockSource+0x13a>
 80019bc:	2b40      	cmp	r3, #64	@ 0x40
 80019be:	d86f      	bhi.n	8001aa0 <HAL_TIM_ConfigClockSource+0x16c>
 80019c0:	2b30      	cmp	r3, #48	@ 0x30
 80019c2:	d064      	beq.n	8001a8e <HAL_TIM_ConfigClockSource+0x15a>
 80019c4:	2b30      	cmp	r3, #48	@ 0x30
 80019c6:	d86b      	bhi.n	8001aa0 <HAL_TIM_ConfigClockSource+0x16c>
 80019c8:	2b20      	cmp	r3, #32
 80019ca:	d060      	beq.n	8001a8e <HAL_TIM_ConfigClockSource+0x15a>
 80019cc:	2b20      	cmp	r3, #32
 80019ce:	d867      	bhi.n	8001aa0 <HAL_TIM_ConfigClockSource+0x16c>
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d05c      	beq.n	8001a8e <HAL_TIM_ConfigClockSource+0x15a>
 80019d4:	2b10      	cmp	r3, #16
 80019d6:	d05a      	beq.n	8001a8e <HAL_TIM_ConfigClockSource+0x15a>
 80019d8:	e062      	b.n	8001aa0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80019de:	683b      	ldr	r3, [r7, #0]
 80019e0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80019e2:	683b      	ldr	r3, [r7, #0]
 80019e4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80019e6:	683b      	ldr	r3, [r7, #0]
 80019e8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80019ea:	f000 f9b9 	bl	8001d60 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	689b      	ldr	r3, [r3, #8]
 80019f4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80019f6:	68bb      	ldr	r3, [r7, #8]
 80019f8:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80019fc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	68ba      	ldr	r2, [r7, #8]
 8001a04:	609a      	str	r2, [r3, #8]
      break;
 8001a06:	e04f      	b.n	8001aa8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8001a0c:	683b      	ldr	r3, [r7, #0]
 8001a0e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8001a10:	683b      	ldr	r3, [r7, #0]
 8001a12:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8001a14:	683b      	ldr	r3, [r7, #0]
 8001a16:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8001a18:	f000 f9a2 	bl	8001d60 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	689a      	ldr	r2, [r3, #8]
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8001a2a:	609a      	str	r2, [r3, #8]
      break;
 8001a2c:	e03c      	b.n	8001aa8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8001a32:	683b      	ldr	r3, [r7, #0]
 8001a34:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8001a36:	683b      	ldr	r3, [r7, #0]
 8001a38:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001a3a:	461a      	mov	r2, r3
 8001a3c:	f000 f916 	bl	8001c6c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	2150      	movs	r1, #80	@ 0x50
 8001a46:	4618      	mov	r0, r3
 8001a48:	f000 f96f 	bl	8001d2a <TIM_ITRx_SetConfig>
      break;
 8001a4c:	e02c      	b.n	8001aa8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8001a52:	683b      	ldr	r3, [r7, #0]
 8001a54:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8001a56:	683b      	ldr	r3, [r7, #0]
 8001a58:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8001a5a:	461a      	mov	r2, r3
 8001a5c:	f000 f935 	bl	8001cca <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	2160      	movs	r1, #96	@ 0x60
 8001a66:	4618      	mov	r0, r3
 8001a68:	f000 f95f 	bl	8001d2a <TIM_ITRx_SetConfig>
      break;
 8001a6c:	e01c      	b.n	8001aa8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8001a72:	683b      	ldr	r3, [r7, #0]
 8001a74:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8001a76:	683b      	ldr	r3, [r7, #0]
 8001a78:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001a7a:	461a      	mov	r2, r3
 8001a7c:	f000 f8f6 	bl	8001c6c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	2140      	movs	r1, #64	@ 0x40
 8001a86:	4618      	mov	r0, r3
 8001a88:	f000 f94f 	bl	8001d2a <TIM_ITRx_SetConfig>
      break;
 8001a8c:	e00c      	b.n	8001aa8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681a      	ldr	r2, [r3, #0]
 8001a92:	683b      	ldr	r3, [r7, #0]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	4619      	mov	r1, r3
 8001a98:	4610      	mov	r0, r2
 8001a9a:	f000 f946 	bl	8001d2a <TIM_ITRx_SetConfig>
      break;
 8001a9e:	e003      	b.n	8001aa8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8001aa0:	2301      	movs	r3, #1
 8001aa2:	73fb      	strb	r3, [r7, #15]
      break;
 8001aa4:	e000      	b.n	8001aa8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8001aa6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	2201      	movs	r2, #1
 8001aac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8001ab8:	7bfb      	ldrb	r3, [r7, #15]
}
 8001aba:	4618      	mov	r0, r3
 8001abc:	3710      	adds	r7, #16
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	bd80      	pop	{r7, pc}

08001ac2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001ac2:	b480      	push	{r7}
 8001ac4:	b083      	sub	sp, #12
 8001ac6:	af00      	add	r7, sp, #0
 8001ac8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001aca:	bf00      	nop
 8001acc:	370c      	adds	r7, #12
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad4:	4770      	bx	lr

08001ad6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001ad6:	b480      	push	{r7}
 8001ad8:	b083      	sub	sp, #12
 8001ada:	af00      	add	r7, sp, #0
 8001adc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001ade:	bf00      	nop
 8001ae0:	370c      	adds	r7, #12
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae8:	4770      	bx	lr

08001aea <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001aea:	b480      	push	{r7}
 8001aec:	b083      	sub	sp, #12
 8001aee:	af00      	add	r7, sp, #0
 8001af0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001af2:	bf00      	nop
 8001af4:	370c      	adds	r7, #12
 8001af6:	46bd      	mov	sp, r7
 8001af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afc:	4770      	bx	lr

08001afe <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001afe:	b480      	push	{r7}
 8001b00:	b083      	sub	sp, #12
 8001b02:	af00      	add	r7, sp, #0
 8001b04:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001b06:	bf00      	nop
 8001b08:	370c      	adds	r7, #12
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b10:	4770      	bx	lr
	...

08001b14 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001b14:	b480      	push	{r7}
 8001b16:	b085      	sub	sp, #20
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	6078      	str	r0, [r7, #4]
 8001b1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	4a46      	ldr	r2, [pc, #280]	@ (8001c40 <TIM_Base_SetConfig+0x12c>)
 8001b28:	4293      	cmp	r3, r2
 8001b2a:	d013      	beq.n	8001b54 <TIM_Base_SetConfig+0x40>
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001b32:	d00f      	beq.n	8001b54 <TIM_Base_SetConfig+0x40>
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	4a43      	ldr	r2, [pc, #268]	@ (8001c44 <TIM_Base_SetConfig+0x130>)
 8001b38:	4293      	cmp	r3, r2
 8001b3a:	d00b      	beq.n	8001b54 <TIM_Base_SetConfig+0x40>
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	4a42      	ldr	r2, [pc, #264]	@ (8001c48 <TIM_Base_SetConfig+0x134>)
 8001b40:	4293      	cmp	r3, r2
 8001b42:	d007      	beq.n	8001b54 <TIM_Base_SetConfig+0x40>
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	4a41      	ldr	r2, [pc, #260]	@ (8001c4c <TIM_Base_SetConfig+0x138>)
 8001b48:	4293      	cmp	r3, r2
 8001b4a:	d003      	beq.n	8001b54 <TIM_Base_SetConfig+0x40>
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	4a40      	ldr	r2, [pc, #256]	@ (8001c50 <TIM_Base_SetConfig+0x13c>)
 8001b50:	4293      	cmp	r3, r2
 8001b52:	d108      	bne.n	8001b66 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001b5a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001b5c:	683b      	ldr	r3, [r7, #0]
 8001b5e:	685b      	ldr	r3, [r3, #4]
 8001b60:	68fa      	ldr	r2, [r7, #12]
 8001b62:	4313      	orrs	r3, r2
 8001b64:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	4a35      	ldr	r2, [pc, #212]	@ (8001c40 <TIM_Base_SetConfig+0x12c>)
 8001b6a:	4293      	cmp	r3, r2
 8001b6c:	d02b      	beq.n	8001bc6 <TIM_Base_SetConfig+0xb2>
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001b74:	d027      	beq.n	8001bc6 <TIM_Base_SetConfig+0xb2>
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	4a32      	ldr	r2, [pc, #200]	@ (8001c44 <TIM_Base_SetConfig+0x130>)
 8001b7a:	4293      	cmp	r3, r2
 8001b7c:	d023      	beq.n	8001bc6 <TIM_Base_SetConfig+0xb2>
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	4a31      	ldr	r2, [pc, #196]	@ (8001c48 <TIM_Base_SetConfig+0x134>)
 8001b82:	4293      	cmp	r3, r2
 8001b84:	d01f      	beq.n	8001bc6 <TIM_Base_SetConfig+0xb2>
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	4a30      	ldr	r2, [pc, #192]	@ (8001c4c <TIM_Base_SetConfig+0x138>)
 8001b8a:	4293      	cmp	r3, r2
 8001b8c:	d01b      	beq.n	8001bc6 <TIM_Base_SetConfig+0xb2>
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	4a2f      	ldr	r2, [pc, #188]	@ (8001c50 <TIM_Base_SetConfig+0x13c>)
 8001b92:	4293      	cmp	r3, r2
 8001b94:	d017      	beq.n	8001bc6 <TIM_Base_SetConfig+0xb2>
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	4a2e      	ldr	r2, [pc, #184]	@ (8001c54 <TIM_Base_SetConfig+0x140>)
 8001b9a:	4293      	cmp	r3, r2
 8001b9c:	d013      	beq.n	8001bc6 <TIM_Base_SetConfig+0xb2>
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	4a2d      	ldr	r2, [pc, #180]	@ (8001c58 <TIM_Base_SetConfig+0x144>)
 8001ba2:	4293      	cmp	r3, r2
 8001ba4:	d00f      	beq.n	8001bc6 <TIM_Base_SetConfig+0xb2>
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	4a2c      	ldr	r2, [pc, #176]	@ (8001c5c <TIM_Base_SetConfig+0x148>)
 8001baa:	4293      	cmp	r3, r2
 8001bac:	d00b      	beq.n	8001bc6 <TIM_Base_SetConfig+0xb2>
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	4a2b      	ldr	r2, [pc, #172]	@ (8001c60 <TIM_Base_SetConfig+0x14c>)
 8001bb2:	4293      	cmp	r3, r2
 8001bb4:	d007      	beq.n	8001bc6 <TIM_Base_SetConfig+0xb2>
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	4a2a      	ldr	r2, [pc, #168]	@ (8001c64 <TIM_Base_SetConfig+0x150>)
 8001bba:	4293      	cmp	r3, r2
 8001bbc:	d003      	beq.n	8001bc6 <TIM_Base_SetConfig+0xb2>
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	4a29      	ldr	r2, [pc, #164]	@ (8001c68 <TIM_Base_SetConfig+0x154>)
 8001bc2:	4293      	cmp	r3, r2
 8001bc4:	d108      	bne.n	8001bd8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001bcc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001bce:	683b      	ldr	r3, [r7, #0]
 8001bd0:	68db      	ldr	r3, [r3, #12]
 8001bd2:	68fa      	ldr	r2, [r7, #12]
 8001bd4:	4313      	orrs	r3, r2
 8001bd6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8001bde:	683b      	ldr	r3, [r7, #0]
 8001be0:	695b      	ldr	r3, [r3, #20]
 8001be2:	4313      	orrs	r3, r2
 8001be4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	68fa      	ldr	r2, [r7, #12]
 8001bea:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001bec:	683b      	ldr	r3, [r7, #0]
 8001bee:	689a      	ldr	r2, [r3, #8]
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001bf4:	683b      	ldr	r3, [r7, #0]
 8001bf6:	681a      	ldr	r2, [r3, #0]
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	4a10      	ldr	r2, [pc, #64]	@ (8001c40 <TIM_Base_SetConfig+0x12c>)
 8001c00:	4293      	cmp	r3, r2
 8001c02:	d003      	beq.n	8001c0c <TIM_Base_SetConfig+0xf8>
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	4a12      	ldr	r2, [pc, #72]	@ (8001c50 <TIM_Base_SetConfig+0x13c>)
 8001c08:	4293      	cmp	r3, r2
 8001c0a:	d103      	bne.n	8001c14 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001c0c:	683b      	ldr	r3, [r7, #0]
 8001c0e:	691a      	ldr	r2, [r3, #16]
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	2201      	movs	r2, #1
 8001c18:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	691b      	ldr	r3, [r3, #16]
 8001c1e:	f003 0301 	and.w	r3, r3, #1
 8001c22:	2b01      	cmp	r3, #1
 8001c24:	d105      	bne.n	8001c32 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	691b      	ldr	r3, [r3, #16]
 8001c2a:	f023 0201 	bic.w	r2, r3, #1
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	611a      	str	r2, [r3, #16]
  }
}
 8001c32:	bf00      	nop
 8001c34:	3714      	adds	r7, #20
 8001c36:	46bd      	mov	sp, r7
 8001c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3c:	4770      	bx	lr
 8001c3e:	bf00      	nop
 8001c40:	40010000 	.word	0x40010000
 8001c44:	40000400 	.word	0x40000400
 8001c48:	40000800 	.word	0x40000800
 8001c4c:	40000c00 	.word	0x40000c00
 8001c50:	40010400 	.word	0x40010400
 8001c54:	40014000 	.word	0x40014000
 8001c58:	40014400 	.word	0x40014400
 8001c5c:	40014800 	.word	0x40014800
 8001c60:	40001800 	.word	0x40001800
 8001c64:	40001c00 	.word	0x40001c00
 8001c68:	40002000 	.word	0x40002000

08001c6c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8001c6c:	b480      	push	{r7}
 8001c6e:	b087      	sub	sp, #28
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	60f8      	str	r0, [r7, #12]
 8001c74:	60b9      	str	r1, [r7, #8]
 8001c76:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	6a1b      	ldr	r3, [r3, #32]
 8001c7c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	6a1b      	ldr	r3, [r3, #32]
 8001c82:	f023 0201 	bic.w	r2, r3, #1
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	699b      	ldr	r3, [r3, #24]
 8001c8e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001c90:	693b      	ldr	r3, [r7, #16]
 8001c92:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001c96:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	011b      	lsls	r3, r3, #4
 8001c9c:	693a      	ldr	r2, [r7, #16]
 8001c9e:	4313      	orrs	r3, r2
 8001ca0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001ca2:	697b      	ldr	r3, [r7, #20]
 8001ca4:	f023 030a 	bic.w	r3, r3, #10
 8001ca8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8001caa:	697a      	ldr	r2, [r7, #20]
 8001cac:	68bb      	ldr	r3, [r7, #8]
 8001cae:	4313      	orrs	r3, r2
 8001cb0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	693a      	ldr	r2, [r7, #16]
 8001cb6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	697a      	ldr	r2, [r7, #20]
 8001cbc:	621a      	str	r2, [r3, #32]
}
 8001cbe:	bf00      	nop
 8001cc0:	371c      	adds	r7, #28
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc8:	4770      	bx	lr

08001cca <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8001cca:	b480      	push	{r7}
 8001ccc:	b087      	sub	sp, #28
 8001cce:	af00      	add	r7, sp, #0
 8001cd0:	60f8      	str	r0, [r7, #12]
 8001cd2:	60b9      	str	r1, [r7, #8]
 8001cd4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	6a1b      	ldr	r3, [r3, #32]
 8001cda:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	6a1b      	ldr	r3, [r3, #32]
 8001ce0:	f023 0210 	bic.w	r2, r3, #16
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	699b      	ldr	r3, [r3, #24]
 8001cec:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8001cee:	693b      	ldr	r3, [r7, #16]
 8001cf0:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8001cf4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	031b      	lsls	r3, r3, #12
 8001cfa:	693a      	ldr	r2, [r7, #16]
 8001cfc:	4313      	orrs	r3, r2
 8001cfe:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8001d00:	697b      	ldr	r3, [r7, #20]
 8001d02:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8001d06:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8001d08:	68bb      	ldr	r3, [r7, #8]
 8001d0a:	011b      	lsls	r3, r3, #4
 8001d0c:	697a      	ldr	r2, [r7, #20]
 8001d0e:	4313      	orrs	r3, r2
 8001d10:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	693a      	ldr	r2, [r7, #16]
 8001d16:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	697a      	ldr	r2, [r7, #20]
 8001d1c:	621a      	str	r2, [r3, #32]
}
 8001d1e:	bf00      	nop
 8001d20:	371c      	adds	r7, #28
 8001d22:	46bd      	mov	sp, r7
 8001d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d28:	4770      	bx	lr

08001d2a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8001d2a:	b480      	push	{r7}
 8001d2c:	b085      	sub	sp, #20
 8001d2e:	af00      	add	r7, sp, #0
 8001d30:	6078      	str	r0, [r7, #4]
 8001d32:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	689b      	ldr	r3, [r3, #8]
 8001d38:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001d40:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8001d42:	683a      	ldr	r2, [r7, #0]
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	4313      	orrs	r3, r2
 8001d48:	f043 0307 	orr.w	r3, r3, #7
 8001d4c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	68fa      	ldr	r2, [r7, #12]
 8001d52:	609a      	str	r2, [r3, #8]
}
 8001d54:	bf00      	nop
 8001d56:	3714      	adds	r7, #20
 8001d58:	46bd      	mov	sp, r7
 8001d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5e:	4770      	bx	lr

08001d60 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8001d60:	b480      	push	{r7}
 8001d62:	b087      	sub	sp, #28
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	60f8      	str	r0, [r7, #12]
 8001d68:	60b9      	str	r1, [r7, #8]
 8001d6a:	607a      	str	r2, [r7, #4]
 8001d6c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	689b      	ldr	r3, [r3, #8]
 8001d72:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001d74:	697b      	ldr	r3, [r7, #20]
 8001d76:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8001d7a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001d7c:	683b      	ldr	r3, [r7, #0]
 8001d7e:	021a      	lsls	r2, r3, #8
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	431a      	orrs	r2, r3
 8001d84:	68bb      	ldr	r3, [r7, #8]
 8001d86:	4313      	orrs	r3, r2
 8001d88:	697a      	ldr	r2, [r7, #20]
 8001d8a:	4313      	orrs	r3, r2
 8001d8c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	697a      	ldr	r2, [r7, #20]
 8001d92:	609a      	str	r2, [r3, #8]
}
 8001d94:	bf00      	nop
 8001d96:	371c      	adds	r7, #28
 8001d98:	46bd      	mov	sp, r7
 8001d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9e:	4770      	bx	lr

08001da0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8001da0:	b480      	push	{r7}
 8001da2:	b085      	sub	sp, #20
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	6078      	str	r0, [r7, #4]
 8001da8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001db0:	2b01      	cmp	r3, #1
 8001db2:	d101      	bne.n	8001db8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8001db4:	2302      	movs	r3, #2
 8001db6:	e05a      	b.n	8001e6e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	2201      	movs	r2, #1
 8001dbc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	2202      	movs	r2, #2
 8001dc4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	685b      	ldr	r3, [r3, #4]
 8001dce:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	689b      	ldr	r3, [r3, #8]
 8001dd6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001dde:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8001de0:	683b      	ldr	r3, [r7, #0]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	68fa      	ldr	r2, [r7, #12]
 8001de6:	4313      	orrs	r3, r2
 8001de8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	68fa      	ldr	r2, [r7, #12]
 8001df0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	4a21      	ldr	r2, [pc, #132]	@ (8001e7c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8001df8:	4293      	cmp	r3, r2
 8001dfa:	d022      	beq.n	8001e42 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001e04:	d01d      	beq.n	8001e42 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	4a1d      	ldr	r2, [pc, #116]	@ (8001e80 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8001e0c:	4293      	cmp	r3, r2
 8001e0e:	d018      	beq.n	8001e42 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	4a1b      	ldr	r2, [pc, #108]	@ (8001e84 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8001e16:	4293      	cmp	r3, r2
 8001e18:	d013      	beq.n	8001e42 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	4a1a      	ldr	r2, [pc, #104]	@ (8001e88 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8001e20:	4293      	cmp	r3, r2
 8001e22:	d00e      	beq.n	8001e42 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	4a18      	ldr	r2, [pc, #96]	@ (8001e8c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8001e2a:	4293      	cmp	r3, r2
 8001e2c:	d009      	beq.n	8001e42 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	4a17      	ldr	r2, [pc, #92]	@ (8001e90 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8001e34:	4293      	cmp	r3, r2
 8001e36:	d004      	beq.n	8001e42 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	4a15      	ldr	r2, [pc, #84]	@ (8001e94 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8001e3e:	4293      	cmp	r3, r2
 8001e40:	d10c      	bne.n	8001e5c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8001e42:	68bb      	ldr	r3, [r7, #8]
 8001e44:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001e48:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8001e4a:	683b      	ldr	r3, [r7, #0]
 8001e4c:	685b      	ldr	r3, [r3, #4]
 8001e4e:	68ba      	ldr	r2, [r7, #8]
 8001e50:	4313      	orrs	r3, r2
 8001e52:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	68ba      	ldr	r2, [r7, #8]
 8001e5a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	2201      	movs	r2, #1
 8001e60:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	2200      	movs	r2, #0
 8001e68:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8001e6c:	2300      	movs	r3, #0
}
 8001e6e:	4618      	mov	r0, r3
 8001e70:	3714      	adds	r7, #20
 8001e72:	46bd      	mov	sp, r7
 8001e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e78:	4770      	bx	lr
 8001e7a:	bf00      	nop
 8001e7c:	40010000 	.word	0x40010000
 8001e80:	40000400 	.word	0x40000400
 8001e84:	40000800 	.word	0x40000800
 8001e88:	40000c00 	.word	0x40000c00
 8001e8c:	40010400 	.word	0x40010400
 8001e90:	40014000 	.word	0x40014000
 8001e94:	40001800 	.word	0x40001800

08001e98 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001e98:	b480      	push	{r7}
 8001e9a:	b083      	sub	sp, #12
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001ea0:	bf00      	nop
 8001ea2:	370c      	adds	r7, #12
 8001ea4:	46bd      	mov	sp, r7
 8001ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eaa:	4770      	bx	lr

08001eac <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001eac:	b480      	push	{r7}
 8001eae:	b083      	sub	sp, #12
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001eb4:	bf00      	nop
 8001eb6:	370c      	adds	r7, #12
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ebe:	4770      	bx	lr

08001ec0 <memset>:
 8001ec0:	4402      	add	r2, r0
 8001ec2:	4603      	mov	r3, r0
 8001ec4:	4293      	cmp	r3, r2
 8001ec6:	d100      	bne.n	8001eca <memset+0xa>
 8001ec8:	4770      	bx	lr
 8001eca:	f803 1b01 	strb.w	r1, [r3], #1
 8001ece:	e7f9      	b.n	8001ec4 <memset+0x4>

08001ed0 <__libc_init_array>:
 8001ed0:	b570      	push	{r4, r5, r6, lr}
 8001ed2:	4d0d      	ldr	r5, [pc, #52]	@ (8001f08 <__libc_init_array+0x38>)
 8001ed4:	4c0d      	ldr	r4, [pc, #52]	@ (8001f0c <__libc_init_array+0x3c>)
 8001ed6:	1b64      	subs	r4, r4, r5
 8001ed8:	10a4      	asrs	r4, r4, #2
 8001eda:	2600      	movs	r6, #0
 8001edc:	42a6      	cmp	r6, r4
 8001ede:	d109      	bne.n	8001ef4 <__libc_init_array+0x24>
 8001ee0:	4d0b      	ldr	r5, [pc, #44]	@ (8001f10 <__libc_init_array+0x40>)
 8001ee2:	4c0c      	ldr	r4, [pc, #48]	@ (8001f14 <__libc_init_array+0x44>)
 8001ee4:	f000 f818 	bl	8001f18 <_init>
 8001ee8:	1b64      	subs	r4, r4, r5
 8001eea:	10a4      	asrs	r4, r4, #2
 8001eec:	2600      	movs	r6, #0
 8001eee:	42a6      	cmp	r6, r4
 8001ef0:	d105      	bne.n	8001efe <__libc_init_array+0x2e>
 8001ef2:	bd70      	pop	{r4, r5, r6, pc}
 8001ef4:	f855 3b04 	ldr.w	r3, [r5], #4
 8001ef8:	4798      	blx	r3
 8001efa:	3601      	adds	r6, #1
 8001efc:	e7ee      	b.n	8001edc <__libc_init_array+0xc>
 8001efe:	f855 3b04 	ldr.w	r3, [r5], #4
 8001f02:	4798      	blx	r3
 8001f04:	3601      	adds	r6, #1
 8001f06:	e7f2      	b.n	8001eee <__libc_init_array+0x1e>
 8001f08:	08001f48 	.word	0x08001f48
 8001f0c:	08001f48 	.word	0x08001f48
 8001f10:	08001f48 	.word	0x08001f48
 8001f14:	08001f4c 	.word	0x08001f4c

08001f18 <_init>:
 8001f18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001f1a:	bf00      	nop
 8001f1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001f1e:	bc08      	pop	{r3}
 8001f20:	469e      	mov	lr, r3
 8001f22:	4770      	bx	lr

08001f24 <_fini>:
 8001f24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001f26:	bf00      	nop
 8001f28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001f2a:	bc08      	pop	{r3}
 8001f2c:	469e      	mov	lr, r3
 8001f2e:	4770      	bx	lr
