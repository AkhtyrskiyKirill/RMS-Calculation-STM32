
RMS_calc.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001e28  080001ac  080001ac  000011ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08001fd4  08001fd4  00002fd4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001fe4  08001fe4  000033d0  2**0
                  CONTENTS
  4 .ARM          00000008  08001fe4  08001fe4  00002fe4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08001fec  08001fec  000033d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001fec  08001fec  00002fec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08001ff0  08001ff0  00002ff0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000003d0  20000000  08001ff4  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000033d0  2**0
                  CONTENTS
 10 .bss          0000008c  200003d0  200003d0  000033d0  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000045c  2000045c  000033d0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000033d0  2**0
                  CONTENTS, READONLY
 13 .debug_info   00008b50  00000000  00000000  00003400  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000016a6  00000000  00000000  0000bf50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000009a8  00000000  00000000  0000d5f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000076f  00000000  00000000  0000dfa0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00022316  00000000  00000000  0000e70f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000a128  00000000  00000000  00030a25  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d3df1  00000000  00000000  0003ab4d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0010e93e  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000027d0  00000000  00000000  0010e984  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000060  00000000  00000000  00111154  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	@ (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	@ (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	200003d0 	.word	0x200003d0
 80001c8:	00000000 	.word	0x00000000
 80001cc:	08001fbc 	.word	0x08001fbc

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	@ (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	@ (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	@ (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	200003d4 	.word	0x200003d4
 80001e8:	08001fbc 	.word	0x08001fbc

080001ec <__aeabi_uldivmod>:
 80001ec:	b953      	cbnz	r3, 8000204 <__aeabi_uldivmod+0x18>
 80001ee:	b94a      	cbnz	r2, 8000204 <__aeabi_uldivmod+0x18>
 80001f0:	2900      	cmp	r1, #0
 80001f2:	bf08      	it	eq
 80001f4:	2800      	cmpeq	r0, #0
 80001f6:	bf1c      	itt	ne
 80001f8:	f04f 31ff 	movne.w	r1, #4294967295
 80001fc:	f04f 30ff 	movne.w	r0, #4294967295
 8000200:	f000 b96a 	b.w	80004d8 <__aeabi_idiv0>
 8000204:	f1ad 0c08 	sub.w	ip, sp, #8
 8000208:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800020c:	f000 f806 	bl	800021c <__udivmoddi4>
 8000210:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000214:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000218:	b004      	add	sp, #16
 800021a:	4770      	bx	lr

0800021c <__udivmoddi4>:
 800021c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000220:	9d08      	ldr	r5, [sp, #32]
 8000222:	460c      	mov	r4, r1
 8000224:	2b00      	cmp	r3, #0
 8000226:	d14e      	bne.n	80002c6 <__udivmoddi4+0xaa>
 8000228:	4694      	mov	ip, r2
 800022a:	458c      	cmp	ip, r1
 800022c:	4686      	mov	lr, r0
 800022e:	fab2 f282 	clz	r2, r2
 8000232:	d962      	bls.n	80002fa <__udivmoddi4+0xde>
 8000234:	b14a      	cbz	r2, 800024a <__udivmoddi4+0x2e>
 8000236:	f1c2 0320 	rsb	r3, r2, #32
 800023a:	4091      	lsls	r1, r2
 800023c:	fa20 f303 	lsr.w	r3, r0, r3
 8000240:	fa0c fc02 	lsl.w	ip, ip, r2
 8000244:	4319      	orrs	r1, r3
 8000246:	fa00 fe02 	lsl.w	lr, r0, r2
 800024a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800024e:	fa1f f68c 	uxth.w	r6, ip
 8000252:	fbb1 f4f7 	udiv	r4, r1, r7
 8000256:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800025a:	fb07 1114 	mls	r1, r7, r4, r1
 800025e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000262:	fb04 f106 	mul.w	r1, r4, r6
 8000266:	4299      	cmp	r1, r3
 8000268:	d90a      	bls.n	8000280 <__udivmoddi4+0x64>
 800026a:	eb1c 0303 	adds.w	r3, ip, r3
 800026e:	f104 30ff 	add.w	r0, r4, #4294967295
 8000272:	f080 8112 	bcs.w	800049a <__udivmoddi4+0x27e>
 8000276:	4299      	cmp	r1, r3
 8000278:	f240 810f 	bls.w	800049a <__udivmoddi4+0x27e>
 800027c:	3c02      	subs	r4, #2
 800027e:	4463      	add	r3, ip
 8000280:	1a59      	subs	r1, r3, r1
 8000282:	fa1f f38e 	uxth.w	r3, lr
 8000286:	fbb1 f0f7 	udiv	r0, r1, r7
 800028a:	fb07 1110 	mls	r1, r7, r0, r1
 800028e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000292:	fb00 f606 	mul.w	r6, r0, r6
 8000296:	429e      	cmp	r6, r3
 8000298:	d90a      	bls.n	80002b0 <__udivmoddi4+0x94>
 800029a:	eb1c 0303 	adds.w	r3, ip, r3
 800029e:	f100 31ff 	add.w	r1, r0, #4294967295
 80002a2:	f080 80fc 	bcs.w	800049e <__udivmoddi4+0x282>
 80002a6:	429e      	cmp	r6, r3
 80002a8:	f240 80f9 	bls.w	800049e <__udivmoddi4+0x282>
 80002ac:	4463      	add	r3, ip
 80002ae:	3802      	subs	r0, #2
 80002b0:	1b9b      	subs	r3, r3, r6
 80002b2:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002b6:	2100      	movs	r1, #0
 80002b8:	b11d      	cbz	r5, 80002c2 <__udivmoddi4+0xa6>
 80002ba:	40d3      	lsrs	r3, r2
 80002bc:	2200      	movs	r2, #0
 80002be:	e9c5 3200 	strd	r3, r2, [r5]
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d905      	bls.n	80002d6 <__udivmoddi4+0xba>
 80002ca:	b10d      	cbz	r5, 80002d0 <__udivmoddi4+0xb4>
 80002cc:	e9c5 0100 	strd	r0, r1, [r5]
 80002d0:	2100      	movs	r1, #0
 80002d2:	4608      	mov	r0, r1
 80002d4:	e7f5      	b.n	80002c2 <__udivmoddi4+0xa6>
 80002d6:	fab3 f183 	clz	r1, r3
 80002da:	2900      	cmp	r1, #0
 80002dc:	d146      	bne.n	800036c <__udivmoddi4+0x150>
 80002de:	42a3      	cmp	r3, r4
 80002e0:	d302      	bcc.n	80002e8 <__udivmoddi4+0xcc>
 80002e2:	4290      	cmp	r0, r2
 80002e4:	f0c0 80f0 	bcc.w	80004c8 <__udivmoddi4+0x2ac>
 80002e8:	1a86      	subs	r6, r0, r2
 80002ea:	eb64 0303 	sbc.w	r3, r4, r3
 80002ee:	2001      	movs	r0, #1
 80002f0:	2d00      	cmp	r5, #0
 80002f2:	d0e6      	beq.n	80002c2 <__udivmoddi4+0xa6>
 80002f4:	e9c5 6300 	strd	r6, r3, [r5]
 80002f8:	e7e3      	b.n	80002c2 <__udivmoddi4+0xa6>
 80002fa:	2a00      	cmp	r2, #0
 80002fc:	f040 8090 	bne.w	8000420 <__udivmoddi4+0x204>
 8000300:	eba1 040c 	sub.w	r4, r1, ip
 8000304:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000308:	fa1f f78c 	uxth.w	r7, ip
 800030c:	2101      	movs	r1, #1
 800030e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000312:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000316:	fb08 4416 	mls	r4, r8, r6, r4
 800031a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800031e:	fb07 f006 	mul.w	r0, r7, r6
 8000322:	4298      	cmp	r0, r3
 8000324:	d908      	bls.n	8000338 <__udivmoddi4+0x11c>
 8000326:	eb1c 0303 	adds.w	r3, ip, r3
 800032a:	f106 34ff 	add.w	r4, r6, #4294967295
 800032e:	d202      	bcs.n	8000336 <__udivmoddi4+0x11a>
 8000330:	4298      	cmp	r0, r3
 8000332:	f200 80cd 	bhi.w	80004d0 <__udivmoddi4+0x2b4>
 8000336:	4626      	mov	r6, r4
 8000338:	1a1c      	subs	r4, r3, r0
 800033a:	fa1f f38e 	uxth.w	r3, lr
 800033e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000342:	fb08 4410 	mls	r4, r8, r0, r4
 8000346:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800034a:	fb00 f707 	mul.w	r7, r0, r7
 800034e:	429f      	cmp	r7, r3
 8000350:	d908      	bls.n	8000364 <__udivmoddi4+0x148>
 8000352:	eb1c 0303 	adds.w	r3, ip, r3
 8000356:	f100 34ff 	add.w	r4, r0, #4294967295
 800035a:	d202      	bcs.n	8000362 <__udivmoddi4+0x146>
 800035c:	429f      	cmp	r7, r3
 800035e:	f200 80b0 	bhi.w	80004c2 <__udivmoddi4+0x2a6>
 8000362:	4620      	mov	r0, r4
 8000364:	1bdb      	subs	r3, r3, r7
 8000366:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800036a:	e7a5      	b.n	80002b8 <__udivmoddi4+0x9c>
 800036c:	f1c1 0620 	rsb	r6, r1, #32
 8000370:	408b      	lsls	r3, r1
 8000372:	fa22 f706 	lsr.w	r7, r2, r6
 8000376:	431f      	orrs	r7, r3
 8000378:	fa20 fc06 	lsr.w	ip, r0, r6
 800037c:	fa04 f301 	lsl.w	r3, r4, r1
 8000380:	ea43 030c 	orr.w	r3, r3, ip
 8000384:	40f4      	lsrs	r4, r6
 8000386:	fa00 f801 	lsl.w	r8, r0, r1
 800038a:	0c38      	lsrs	r0, r7, #16
 800038c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000390:	fbb4 fef0 	udiv	lr, r4, r0
 8000394:	fa1f fc87 	uxth.w	ip, r7
 8000398:	fb00 441e 	mls	r4, r0, lr, r4
 800039c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003a0:	fb0e f90c 	mul.w	r9, lr, ip
 80003a4:	45a1      	cmp	r9, r4
 80003a6:	fa02 f201 	lsl.w	r2, r2, r1
 80003aa:	d90a      	bls.n	80003c2 <__udivmoddi4+0x1a6>
 80003ac:	193c      	adds	r4, r7, r4
 80003ae:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003b2:	f080 8084 	bcs.w	80004be <__udivmoddi4+0x2a2>
 80003b6:	45a1      	cmp	r9, r4
 80003b8:	f240 8081 	bls.w	80004be <__udivmoddi4+0x2a2>
 80003bc:	f1ae 0e02 	sub.w	lr, lr, #2
 80003c0:	443c      	add	r4, r7
 80003c2:	eba4 0409 	sub.w	r4, r4, r9
 80003c6:	fa1f f983 	uxth.w	r9, r3
 80003ca:	fbb4 f3f0 	udiv	r3, r4, r0
 80003ce:	fb00 4413 	mls	r4, r0, r3, r4
 80003d2:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003d6:	fb03 fc0c 	mul.w	ip, r3, ip
 80003da:	45a4      	cmp	ip, r4
 80003dc:	d907      	bls.n	80003ee <__udivmoddi4+0x1d2>
 80003de:	193c      	adds	r4, r7, r4
 80003e0:	f103 30ff 	add.w	r0, r3, #4294967295
 80003e4:	d267      	bcs.n	80004b6 <__udivmoddi4+0x29a>
 80003e6:	45a4      	cmp	ip, r4
 80003e8:	d965      	bls.n	80004b6 <__udivmoddi4+0x29a>
 80003ea:	3b02      	subs	r3, #2
 80003ec:	443c      	add	r4, r7
 80003ee:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003f2:	fba0 9302 	umull	r9, r3, r0, r2
 80003f6:	eba4 040c 	sub.w	r4, r4, ip
 80003fa:	429c      	cmp	r4, r3
 80003fc:	46ce      	mov	lr, r9
 80003fe:	469c      	mov	ip, r3
 8000400:	d351      	bcc.n	80004a6 <__udivmoddi4+0x28a>
 8000402:	d04e      	beq.n	80004a2 <__udivmoddi4+0x286>
 8000404:	b155      	cbz	r5, 800041c <__udivmoddi4+0x200>
 8000406:	ebb8 030e 	subs.w	r3, r8, lr
 800040a:	eb64 040c 	sbc.w	r4, r4, ip
 800040e:	fa04 f606 	lsl.w	r6, r4, r6
 8000412:	40cb      	lsrs	r3, r1
 8000414:	431e      	orrs	r6, r3
 8000416:	40cc      	lsrs	r4, r1
 8000418:	e9c5 6400 	strd	r6, r4, [r5]
 800041c:	2100      	movs	r1, #0
 800041e:	e750      	b.n	80002c2 <__udivmoddi4+0xa6>
 8000420:	f1c2 0320 	rsb	r3, r2, #32
 8000424:	fa20 f103 	lsr.w	r1, r0, r3
 8000428:	fa0c fc02 	lsl.w	ip, ip, r2
 800042c:	fa24 f303 	lsr.w	r3, r4, r3
 8000430:	4094      	lsls	r4, r2
 8000432:	430c      	orrs	r4, r1
 8000434:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000438:	fa00 fe02 	lsl.w	lr, r0, r2
 800043c:	fa1f f78c 	uxth.w	r7, ip
 8000440:	fbb3 f0f8 	udiv	r0, r3, r8
 8000444:	fb08 3110 	mls	r1, r8, r0, r3
 8000448:	0c23      	lsrs	r3, r4, #16
 800044a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800044e:	fb00 f107 	mul.w	r1, r0, r7
 8000452:	4299      	cmp	r1, r3
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x24c>
 8000456:	eb1c 0303 	adds.w	r3, ip, r3
 800045a:	f100 36ff 	add.w	r6, r0, #4294967295
 800045e:	d22c      	bcs.n	80004ba <__udivmoddi4+0x29e>
 8000460:	4299      	cmp	r1, r3
 8000462:	d92a      	bls.n	80004ba <__udivmoddi4+0x29e>
 8000464:	3802      	subs	r0, #2
 8000466:	4463      	add	r3, ip
 8000468:	1a5b      	subs	r3, r3, r1
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000470:	fb08 3311 	mls	r3, r8, r1, r3
 8000474:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000478:	fb01 f307 	mul.w	r3, r1, r7
 800047c:	42a3      	cmp	r3, r4
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x276>
 8000480:	eb1c 0404 	adds.w	r4, ip, r4
 8000484:	f101 36ff 	add.w	r6, r1, #4294967295
 8000488:	d213      	bcs.n	80004b2 <__udivmoddi4+0x296>
 800048a:	42a3      	cmp	r3, r4
 800048c:	d911      	bls.n	80004b2 <__udivmoddi4+0x296>
 800048e:	3902      	subs	r1, #2
 8000490:	4464      	add	r4, ip
 8000492:	1ae4      	subs	r4, r4, r3
 8000494:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000498:	e739      	b.n	800030e <__udivmoddi4+0xf2>
 800049a:	4604      	mov	r4, r0
 800049c:	e6f0      	b.n	8000280 <__udivmoddi4+0x64>
 800049e:	4608      	mov	r0, r1
 80004a0:	e706      	b.n	80002b0 <__udivmoddi4+0x94>
 80004a2:	45c8      	cmp	r8, r9
 80004a4:	d2ae      	bcs.n	8000404 <__udivmoddi4+0x1e8>
 80004a6:	ebb9 0e02 	subs.w	lr, r9, r2
 80004aa:	eb63 0c07 	sbc.w	ip, r3, r7
 80004ae:	3801      	subs	r0, #1
 80004b0:	e7a8      	b.n	8000404 <__udivmoddi4+0x1e8>
 80004b2:	4631      	mov	r1, r6
 80004b4:	e7ed      	b.n	8000492 <__udivmoddi4+0x276>
 80004b6:	4603      	mov	r3, r0
 80004b8:	e799      	b.n	80003ee <__udivmoddi4+0x1d2>
 80004ba:	4630      	mov	r0, r6
 80004bc:	e7d4      	b.n	8000468 <__udivmoddi4+0x24c>
 80004be:	46d6      	mov	lr, sl
 80004c0:	e77f      	b.n	80003c2 <__udivmoddi4+0x1a6>
 80004c2:	4463      	add	r3, ip
 80004c4:	3802      	subs	r0, #2
 80004c6:	e74d      	b.n	8000364 <__udivmoddi4+0x148>
 80004c8:	4606      	mov	r6, r0
 80004ca:	4623      	mov	r3, r4
 80004cc:	4608      	mov	r0, r1
 80004ce:	e70f      	b.n	80002f0 <__udivmoddi4+0xd4>
 80004d0:	3e02      	subs	r6, #2
 80004d2:	4463      	add	r3, ip
 80004d4:	e730      	b.n	8000338 <__udivmoddi4+0x11c>
 80004d6:	bf00      	nop

080004d8 <__aeabi_idiv0>:
 80004d8:	4770      	bx	lr
 80004da:	bf00      	nop

080004dc <RMS_Init>:
 */

#include "RMS.h"

// Initialization of RMS calculation block (Must be called once for each signal, which RMS is calculated, before start of calculation)
void RMS_Init(tRMSCalc * RMS_Var) {
 80004dc:	b480      	push	{r7}
 80004de:	b083      	sub	sp, #12
 80004e0:	af00      	add	r7, sp, #0
 80004e2:	6078      	str	r0, [r7, #4]
	RMS_Var->MulDivPrev = 0;																			// Previous (Instant^2)/RMSPrev
 80004e4:	687b      	ldr	r3, [r7, #4]
 80004e6:	f04f 0200 	mov.w	r2, #0
 80004ea:	601a      	str	r2, [r3, #0]
	RMS_Var->RMSPrev = RMS_PREV_VAL;																	// Previous RMS value of the signal
 80004ec:	687b      	ldr	r3, [r7, #4]
 80004ee:	4a04      	ldr	r2, [pc, #16]	@ (8000500 <RMS_Init+0x24>)
 80004f0:	605a      	str	r2, [r3, #4]
}
 80004f2:	bf00      	nop
 80004f4:	370c      	adds	r7, #12
 80004f6:	46bd      	mov	sp, r7
 80004f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004fc:	4770      	bx	lr
 80004fe:	bf00      	nop
 8000500:	3a83126f 	.word	0x3a83126f

08000504 <RMS_Step>:

// RMS Calculation step (Need several steps to reach steady state of RMS)
// Algorithm is described in an article https://elibrary.ru/download/elibrary_54475580_91851937.pdf
// Returns RMS value of a signal.
float RMS_Step(tRMSCalc * RMS_Var, float Instant) {
 8000504:	b480      	push	{r7}
 8000506:	b085      	sub	sp, #20
 8000508:	af00      	add	r7, sp, #0
 800050a:	6078      	str	r0, [r7, #4]
 800050c:	ed87 0a00 	vstr	s0, [r7]
	float tmp = Instant * Instant / RMS_Var->RMSPrev;
 8000510:	edd7 7a00 	vldr	s15, [r7]
 8000514:	ee67 6aa7 	vmul.f32	s13, s15, s15
 8000518:	687b      	ldr	r3, [r7, #4]
 800051a:	ed93 7a01 	vldr	s14, [r3, #4]
 800051e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000522:	edc7 7a03 	vstr	s15, [r7, #12]
	RMS_Var->RMSPrev = B0 * tmp + B1 * RMS_Var->MulDivPrev - A1 * RMS_Var->RMSPrev;
 8000526:	edd7 7a03 	vldr	s15, [r7, #12]
 800052a:	ed9f 7a13 	vldr	s14, [pc, #76]	@ 8000578 <RMS_Step+0x74>
 800052e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000532:	687b      	ldr	r3, [r7, #4]
 8000534:	edd3 7a00 	vldr	s15, [r3]
 8000538:	eddf 6a0f 	vldr	s13, [pc, #60]	@ 8000578 <RMS_Step+0x74>
 800053c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8000540:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000544:	687b      	ldr	r3, [r7, #4]
 8000546:	edd3 7a01 	vldr	s15, [r3, #4]
 800054a:	eddf 6a0c 	vldr	s13, [pc, #48]	@ 800057c <RMS_Step+0x78>
 800054e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8000552:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000556:	687b      	ldr	r3, [r7, #4]
 8000558:	edc3 7a01 	vstr	s15, [r3, #4]
	RMS_Var->MulDivPrev = tmp;
 800055c:	687b      	ldr	r3, [r7, #4]
 800055e:	68fa      	ldr	r2, [r7, #12]
 8000560:	601a      	str	r2, [r3, #0]
	return RMS_Var->RMSPrev;
 8000562:	687b      	ldr	r3, [r7, #4]
 8000564:	685b      	ldr	r3, [r3, #4]
 8000566:	ee07 3a90 	vmov	s15, r3

}
 800056a:	eeb0 0a67 	vmov.f32	s0, s15
 800056e:	3714      	adds	r7, #20
 8000570:	46bd      	mov	sp, r7
 8000572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000576:	4770      	bx	lr
 8000578:	3a5a42d7 	.word	0x3a5a42d7
 800057c:	3f7f9097 	.word	0x3f7f9097

08000580 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000584:	f000 fa40 	bl	8000a08 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000588:	f000 f81a 	bl	80005c0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800058c:	f000 f8d8 	bl	8000740 <MX_GPIO_Init>
  MX_TIM1_Init();
 8000590:	f000 f886 	bl	80006a0 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */

  // Init RMS Calculation blocks for 3 signals
  RMS_Init(&RMS_Sin);
 8000594:	4806      	ldr	r0, [pc, #24]	@ (80005b0 <main+0x30>)
 8000596:	f7ff ffa1 	bl	80004dc <RMS_Init>
  RMS_Init(&RMS_Square);
 800059a:	4806      	ldr	r0, [pc, #24]	@ (80005b4 <main+0x34>)
 800059c:	f7ff ff9e 	bl	80004dc <RMS_Init>
  RMS_Init(&RMS_Saw);
 80005a0:	4805      	ldr	r0, [pc, #20]	@ (80005b8 <main+0x38>)
 80005a2:	f7ff ff9b 	bl	80004dc <RMS_Init>

  // Start timer to simulate signals
  HAL_TIM_Base_Start_IT(&htim1);
 80005a6:	4805      	ldr	r0, [pc, #20]	@ (80005bc <main+0x3c>)
 80005a8:	f001 f8b6 	bl	8001718 <HAL_TIM_Base_Start_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005ac:	bf00      	nop
 80005ae:	e7fd      	b.n	80005ac <main+0x2c>
 80005b0:	20000434 	.word	0x20000434
 80005b4:	2000043c 	.word	0x2000043c
 80005b8:	20000444 	.word	0x20000444
 80005bc:	200003ec 	.word	0x200003ec

080005c0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	b094      	sub	sp, #80	@ 0x50
 80005c4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005c6:	f107 0320 	add.w	r3, r7, #32
 80005ca:	2230      	movs	r2, #48	@ 0x30
 80005cc:	2100      	movs	r1, #0
 80005ce:	4618      	mov	r0, r3
 80005d0:	f001 fcc8 	bl	8001f64 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005d4:	f107 030c 	add.w	r3, r7, #12
 80005d8:	2200      	movs	r2, #0
 80005da:	601a      	str	r2, [r3, #0]
 80005dc:	605a      	str	r2, [r3, #4]
 80005de:	609a      	str	r2, [r3, #8]
 80005e0:	60da      	str	r2, [r3, #12]
 80005e2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005e4:	2300      	movs	r3, #0
 80005e6:	60bb      	str	r3, [r7, #8]
 80005e8:	4b2b      	ldr	r3, [pc, #172]	@ (8000698 <SystemClock_Config+0xd8>)
 80005ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005ec:	4a2a      	ldr	r2, [pc, #168]	@ (8000698 <SystemClock_Config+0xd8>)
 80005ee:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80005f2:	6413      	str	r3, [r2, #64]	@ 0x40
 80005f4:	4b28      	ldr	r3, [pc, #160]	@ (8000698 <SystemClock_Config+0xd8>)
 80005f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005f8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80005fc:	60bb      	str	r3, [r7, #8]
 80005fe:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000600:	2300      	movs	r3, #0
 8000602:	607b      	str	r3, [r7, #4]
 8000604:	4b25      	ldr	r3, [pc, #148]	@ (800069c <SystemClock_Config+0xdc>)
 8000606:	681b      	ldr	r3, [r3, #0]
 8000608:	4a24      	ldr	r2, [pc, #144]	@ (800069c <SystemClock_Config+0xdc>)
 800060a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800060e:	6013      	str	r3, [r2, #0]
 8000610:	4b22      	ldr	r3, [pc, #136]	@ (800069c <SystemClock_Config+0xdc>)
 8000612:	681b      	ldr	r3, [r3, #0]
 8000614:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000618:	607b      	str	r3, [r7, #4]
 800061a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800061c:	2301      	movs	r3, #1
 800061e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000620:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000624:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000626:	2302      	movs	r3, #2
 8000628:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800062a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800062e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000630:	2304      	movs	r3, #4
 8000632:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 180;
 8000634:	23b4      	movs	r3, #180	@ 0xb4
 8000636:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000638:	2302      	movs	r3, #2
 800063a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800063c:	2304      	movs	r3, #4
 800063e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000640:	f107 0320 	add.w	r3, r7, #32
 8000644:	4618      	mov	r0, r3
 8000646:	f000 fbb3 	bl	8000db0 <HAL_RCC_OscConfig>
 800064a:	4603      	mov	r3, r0
 800064c:	2b00      	cmp	r3, #0
 800064e:	d001      	beq.n	8000654 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000650:	f000 f90e 	bl	8000870 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000654:	f000 fb5c 	bl	8000d10 <HAL_PWREx_EnableOverDrive>
 8000658:	4603      	mov	r3, r0
 800065a:	2b00      	cmp	r3, #0
 800065c:	d001      	beq.n	8000662 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 800065e:	f000 f907 	bl	8000870 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000662:	230f      	movs	r3, #15
 8000664:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000666:	2302      	movs	r3, #2
 8000668:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800066a:	2300      	movs	r3, #0
 800066c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800066e:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000672:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000674:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000678:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800067a:	f107 030c 	add.w	r3, r7, #12
 800067e:	2105      	movs	r1, #5
 8000680:	4618      	mov	r0, r3
 8000682:	f000 fe0d 	bl	80012a0 <HAL_RCC_ClockConfig>
 8000686:	4603      	mov	r3, r0
 8000688:	2b00      	cmp	r3, #0
 800068a:	d001      	beq.n	8000690 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 800068c:	f000 f8f0 	bl	8000870 <Error_Handler>
  }
}
 8000690:	bf00      	nop
 8000692:	3750      	adds	r7, #80	@ 0x50
 8000694:	46bd      	mov	sp, r7
 8000696:	bd80      	pop	{r7, pc}
 8000698:	40023800 	.word	0x40023800
 800069c:	40007000 	.word	0x40007000

080006a0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	b086      	sub	sp, #24
 80006a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80006a6:	f107 0308 	add.w	r3, r7, #8
 80006aa:	2200      	movs	r2, #0
 80006ac:	601a      	str	r2, [r3, #0]
 80006ae:	605a      	str	r2, [r3, #4]
 80006b0:	609a      	str	r2, [r3, #8]
 80006b2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80006b4:	463b      	mov	r3, r7
 80006b6:	2200      	movs	r2, #0
 80006b8:	601a      	str	r2, [r3, #0]
 80006ba:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80006bc:	4b1e      	ldr	r3, [pc, #120]	@ (8000738 <MX_TIM1_Init+0x98>)
 80006be:	4a1f      	ldr	r2, [pc, #124]	@ (800073c <MX_TIM1_Init+0x9c>)
 80006c0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80006c2:	4b1d      	ldr	r3, [pc, #116]	@ (8000738 <MX_TIM1_Init+0x98>)
 80006c4:	2200      	movs	r2, #0
 80006c6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006c8:	4b1b      	ldr	r3, [pc, #108]	@ (8000738 <MX_TIM1_Init+0x98>)
 80006ca:	2200      	movs	r2, #0
 80006cc:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 44999;
 80006ce:	4b1a      	ldr	r3, [pc, #104]	@ (8000738 <MX_TIM1_Init+0x98>)
 80006d0:	f64a 72c7 	movw	r2, #44999	@ 0xafc7
 80006d4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80006d6:	4b18      	ldr	r3, [pc, #96]	@ (8000738 <MX_TIM1_Init+0x98>)
 80006d8:	2200      	movs	r2, #0
 80006da:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80006dc:	4b16      	ldr	r3, [pc, #88]	@ (8000738 <MX_TIM1_Init+0x98>)
 80006de:	2200      	movs	r2, #0
 80006e0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80006e2:	4b15      	ldr	r3, [pc, #84]	@ (8000738 <MX_TIM1_Init+0x98>)
 80006e4:	2200      	movs	r2, #0
 80006e6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80006e8:	4813      	ldr	r0, [pc, #76]	@ (8000738 <MX_TIM1_Init+0x98>)
 80006ea:	f000 ffc5 	bl	8001678 <HAL_TIM_Base_Init>
 80006ee:	4603      	mov	r3, r0
 80006f0:	2b00      	cmp	r3, #0
 80006f2:	d001      	beq.n	80006f8 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 80006f4:	f000 f8bc 	bl	8000870 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80006f8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80006fc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80006fe:	f107 0308 	add.w	r3, r7, #8
 8000702:	4619      	mov	r1, r3
 8000704:	480c      	ldr	r0, [pc, #48]	@ (8000738 <MX_TIM1_Init+0x98>)
 8000706:	f001 f967 	bl	80019d8 <HAL_TIM_ConfigClockSource>
 800070a:	4603      	mov	r3, r0
 800070c:	2b00      	cmp	r3, #0
 800070e:	d001      	beq.n	8000714 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8000710:	f000 f8ae 	bl	8000870 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000714:	2300      	movs	r3, #0
 8000716:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000718:	2300      	movs	r3, #0
 800071a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800071c:	463b      	mov	r3, r7
 800071e:	4619      	mov	r1, r3
 8000720:	4805      	ldr	r0, [pc, #20]	@ (8000738 <MX_TIM1_Init+0x98>)
 8000722:	f001 fb8f 	bl	8001e44 <HAL_TIMEx_MasterConfigSynchronization>
 8000726:	4603      	mov	r3, r0
 8000728:	2b00      	cmp	r3, #0
 800072a:	d001      	beq.n	8000730 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 800072c:	f000 f8a0 	bl	8000870 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000730:	bf00      	nop
 8000732:	3718      	adds	r7, #24
 8000734:	46bd      	mov	sp, r7
 8000736:	bd80      	pop	{r7, pc}
 8000738:	200003ec 	.word	0x200003ec
 800073c:	40010000 	.word	0x40010000

08000740 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000740:	b480      	push	{r7}
 8000742:	b083      	sub	sp, #12
 8000744:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000746:	2300      	movs	r3, #0
 8000748:	607b      	str	r3, [r7, #4]
 800074a:	4b10      	ldr	r3, [pc, #64]	@ (800078c <MX_GPIO_Init+0x4c>)
 800074c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800074e:	4a0f      	ldr	r2, [pc, #60]	@ (800078c <MX_GPIO_Init+0x4c>)
 8000750:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000754:	6313      	str	r3, [r2, #48]	@ 0x30
 8000756:	4b0d      	ldr	r3, [pc, #52]	@ (800078c <MX_GPIO_Init+0x4c>)
 8000758:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800075a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800075e:	607b      	str	r3, [r7, #4]
 8000760:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000762:	2300      	movs	r3, #0
 8000764:	603b      	str	r3, [r7, #0]
 8000766:	4b09      	ldr	r3, [pc, #36]	@ (800078c <MX_GPIO_Init+0x4c>)
 8000768:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800076a:	4a08      	ldr	r2, [pc, #32]	@ (800078c <MX_GPIO_Init+0x4c>)
 800076c:	f043 0301 	orr.w	r3, r3, #1
 8000770:	6313      	str	r3, [r2, #48]	@ 0x30
 8000772:	4b06      	ldr	r3, [pc, #24]	@ (800078c <MX_GPIO_Init+0x4c>)
 8000774:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000776:	f003 0301 	and.w	r3, r3, #1
 800077a:	603b      	str	r3, [r7, #0]
 800077c:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800077e:	bf00      	nop
 8000780:	370c      	adds	r7, #12
 8000782:	46bd      	mov	sp, r7
 8000784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000788:	4770      	bx	lr
 800078a:	bf00      	nop
 800078c:	40023800 	.word	0x40023800

08000790 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */

// Timer callback
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000790:	b580      	push	{r7, lr}
 8000792:	b084      	sub	sp, #16
 8000794:	af00      	add	r7, sp, #0
 8000796:	6078      	str	r0, [r7, #4]

	if (htim->Instance == TIM1) {
 8000798:	687b      	ldr	r3, [r7, #4]
 800079a:	681b      	ldr	r3, [r3, #0]
 800079c:	4a29      	ldr	r2, [pc, #164]	@ (8000844 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 800079e:	4293      	cmp	r3, r2
 80007a0:	d14b      	bne.n	800083a <HAL_TIM_PeriodElapsedCallback+0xaa>

		// Update instant values of signals and
		// Make sure the value numbers are correct
		for (uint8_t i = 0; i < 3; i++) {
 80007a2:	2300      	movs	r3, #0
 80007a4:	73fb      	strb	r3, [r7, #15]
 80007a6:	e012      	b.n	80007ce <HAL_TIM_PeriodElapsedCallback+0x3e>
			sample_num[i]++;
 80007a8:	7bfb      	ldrb	r3, [r7, #15]
 80007aa:	4a27      	ldr	r2, [pc, #156]	@ (8000848 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 80007ac:	5cd2      	ldrb	r2, [r2, r3]
 80007ae:	3201      	adds	r2, #1
 80007b0:	b2d1      	uxtb	r1, r2
 80007b2:	4a25      	ldr	r2, [pc, #148]	@ (8000848 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 80007b4:	54d1      	strb	r1, [r2, r3]
			if (sample_num[i] >= TABLE_SIZE) {
 80007b6:	7bfb      	ldrb	r3, [r7, #15]
 80007b8:	4a23      	ldr	r2, [pc, #140]	@ (8000848 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 80007ba:	5cd3      	ldrb	r3, [r2, r3]
 80007bc:	2b4f      	cmp	r3, #79	@ 0x4f
 80007be:	d903      	bls.n	80007c8 <HAL_TIM_PeriodElapsedCallback+0x38>
				sample_num[i] = 0;
 80007c0:	7bfb      	ldrb	r3, [r7, #15]
 80007c2:	4a21      	ldr	r2, [pc, #132]	@ (8000848 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 80007c4:	2100      	movs	r1, #0
 80007c6:	54d1      	strb	r1, [r2, r3]
		for (uint8_t i = 0; i < 3; i++) {
 80007c8:	7bfb      	ldrb	r3, [r7, #15]
 80007ca:	3301      	adds	r3, #1
 80007cc:	73fb      	strb	r3, [r7, #15]
 80007ce:	7bfb      	ldrb	r3, [r7, #15]
 80007d0:	2b02      	cmp	r3, #2
 80007d2:	d9e9      	bls.n	80007a8 <HAL_TIM_PeriodElapsedCallback+0x18>
			}
		}

		// Calculate RMS values of all signals
		RMS_Sin_Val = RMS_Step(&RMS_Sin, v_in_sin[sample_num[0]]);
 80007d4:	4b1c      	ldr	r3, [pc, #112]	@ (8000848 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 80007d6:	781b      	ldrb	r3, [r3, #0]
 80007d8:	4a1c      	ldr	r2, [pc, #112]	@ (800084c <HAL_TIM_PeriodElapsedCallback+0xbc>)
 80007da:	009b      	lsls	r3, r3, #2
 80007dc:	4413      	add	r3, r2
 80007de:	edd3 7a00 	vldr	s15, [r3]
 80007e2:	eeb0 0a67 	vmov.f32	s0, s15
 80007e6:	481a      	ldr	r0, [pc, #104]	@ (8000850 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 80007e8:	f7ff fe8c 	bl	8000504 <RMS_Step>
 80007ec:	eef0 7a40 	vmov.f32	s15, s0
 80007f0:	4b18      	ldr	r3, [pc, #96]	@ (8000854 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 80007f2:	edc3 7a00 	vstr	s15, [r3]
		RMS_Square_Val = RMS_Step(&RMS_Square, v_in_square[sample_num[1]]);
 80007f6:	4b14      	ldr	r3, [pc, #80]	@ (8000848 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 80007f8:	785b      	ldrb	r3, [r3, #1]
 80007fa:	4a17      	ldr	r2, [pc, #92]	@ (8000858 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 80007fc:	009b      	lsls	r3, r3, #2
 80007fe:	4413      	add	r3, r2
 8000800:	edd3 7a00 	vldr	s15, [r3]
 8000804:	eeb0 0a67 	vmov.f32	s0, s15
 8000808:	4814      	ldr	r0, [pc, #80]	@ (800085c <HAL_TIM_PeriodElapsedCallback+0xcc>)
 800080a:	f7ff fe7b 	bl	8000504 <RMS_Step>
 800080e:	eef0 7a40 	vmov.f32	s15, s0
 8000812:	4b13      	ldr	r3, [pc, #76]	@ (8000860 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 8000814:	edc3 7a00 	vstr	s15, [r3]
		RMS_Saw_Val = RMS_Step(&RMS_Saw, v_in_saw[sample_num[2]]);
 8000818:	4b0b      	ldr	r3, [pc, #44]	@ (8000848 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 800081a:	789b      	ldrb	r3, [r3, #2]
 800081c:	4a11      	ldr	r2, [pc, #68]	@ (8000864 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 800081e:	009b      	lsls	r3, r3, #2
 8000820:	4413      	add	r3, r2
 8000822:	edd3 7a00 	vldr	s15, [r3]
 8000826:	eeb0 0a67 	vmov.f32	s0, s15
 800082a:	480f      	ldr	r0, [pc, #60]	@ (8000868 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 800082c:	f7ff fe6a 	bl	8000504 <RMS_Step>
 8000830:	eef0 7a40 	vmov.f32	s15, s0
 8000834:	4b0d      	ldr	r3, [pc, #52]	@ (800086c <HAL_TIM_PeriodElapsedCallback+0xdc>)
 8000836:	edc3 7a00 	vstr	s15, [r3]

		// Algorithm needs several steps to reach steady state of RMS

	}

}
 800083a:	bf00      	nop
 800083c:	3710      	adds	r7, #16
 800083e:	46bd      	mov	sp, r7
 8000840:	bd80      	pop	{r7, pc}
 8000842:	bf00      	nop
 8000844:	40010000 	.word	0x40010000
 8000848:	200003c0 	.word	0x200003c0
 800084c:	20000000 	.word	0x20000000
 8000850:	20000434 	.word	0x20000434
 8000854:	2000044c 	.word	0x2000044c
 8000858:	20000140 	.word	0x20000140
 800085c:	2000043c 	.word	0x2000043c
 8000860:	20000450 	.word	0x20000450
 8000864:	20000280 	.word	0x20000280
 8000868:	20000444 	.word	0x20000444
 800086c:	20000454 	.word	0x20000454

08000870 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000870:	b480      	push	{r7}
 8000872:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000874:	b672      	cpsid	i
}
 8000876:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000878:	bf00      	nop
 800087a:	e7fd      	b.n	8000878 <Error_Handler+0x8>

0800087c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800087c:	b480      	push	{r7}
 800087e:	b083      	sub	sp, #12
 8000880:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000882:	2300      	movs	r3, #0
 8000884:	607b      	str	r3, [r7, #4]
 8000886:	4b10      	ldr	r3, [pc, #64]	@ (80008c8 <HAL_MspInit+0x4c>)
 8000888:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800088a:	4a0f      	ldr	r2, [pc, #60]	@ (80008c8 <HAL_MspInit+0x4c>)
 800088c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000890:	6453      	str	r3, [r2, #68]	@ 0x44
 8000892:	4b0d      	ldr	r3, [pc, #52]	@ (80008c8 <HAL_MspInit+0x4c>)
 8000894:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000896:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800089a:	607b      	str	r3, [r7, #4]
 800089c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800089e:	2300      	movs	r3, #0
 80008a0:	603b      	str	r3, [r7, #0]
 80008a2:	4b09      	ldr	r3, [pc, #36]	@ (80008c8 <HAL_MspInit+0x4c>)
 80008a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008a6:	4a08      	ldr	r2, [pc, #32]	@ (80008c8 <HAL_MspInit+0x4c>)
 80008a8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80008ac:	6413      	str	r3, [r2, #64]	@ 0x40
 80008ae:	4b06      	ldr	r3, [pc, #24]	@ (80008c8 <HAL_MspInit+0x4c>)
 80008b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008b2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80008b6:	603b      	str	r3, [r7, #0]
 80008b8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008ba:	bf00      	nop
 80008bc:	370c      	adds	r7, #12
 80008be:	46bd      	mov	sp, r7
 80008c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c4:	4770      	bx	lr
 80008c6:	bf00      	nop
 80008c8:	40023800 	.word	0x40023800

080008cc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	b084      	sub	sp, #16
 80008d0:	af00      	add	r7, sp, #0
 80008d2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	681b      	ldr	r3, [r3, #0]
 80008d8:	4a0e      	ldr	r2, [pc, #56]	@ (8000914 <HAL_TIM_Base_MspInit+0x48>)
 80008da:	4293      	cmp	r3, r2
 80008dc:	d115      	bne.n	800090a <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80008de:	2300      	movs	r3, #0
 80008e0:	60fb      	str	r3, [r7, #12]
 80008e2:	4b0d      	ldr	r3, [pc, #52]	@ (8000918 <HAL_TIM_Base_MspInit+0x4c>)
 80008e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80008e6:	4a0c      	ldr	r2, [pc, #48]	@ (8000918 <HAL_TIM_Base_MspInit+0x4c>)
 80008e8:	f043 0301 	orr.w	r3, r3, #1
 80008ec:	6453      	str	r3, [r2, #68]	@ 0x44
 80008ee:	4b0a      	ldr	r3, [pc, #40]	@ (8000918 <HAL_TIM_Base_MspInit+0x4c>)
 80008f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80008f2:	f003 0301 	and.w	r3, r3, #1
 80008f6:	60fb      	str	r3, [r7, #12]
 80008f8:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 80008fa:	2200      	movs	r2, #0
 80008fc:	2100      	movs	r1, #0
 80008fe:	2019      	movs	r0, #25
 8000900:	f000 f9cf 	bl	8000ca2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000904:	2019      	movs	r0, #25
 8000906:	f000 f9e8 	bl	8000cda <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM1_MspInit 1 */

  }

}
 800090a:	bf00      	nop
 800090c:	3710      	adds	r7, #16
 800090e:	46bd      	mov	sp, r7
 8000910:	bd80      	pop	{r7, pc}
 8000912:	bf00      	nop
 8000914:	40010000 	.word	0x40010000
 8000918:	40023800 	.word	0x40023800

0800091c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800091c:	b480      	push	{r7}
 800091e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000920:	bf00      	nop
 8000922:	e7fd      	b.n	8000920 <NMI_Handler+0x4>

08000924 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000924:	b480      	push	{r7}
 8000926:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000928:	bf00      	nop
 800092a:	e7fd      	b.n	8000928 <HardFault_Handler+0x4>

0800092c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800092c:	b480      	push	{r7}
 800092e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000930:	bf00      	nop
 8000932:	e7fd      	b.n	8000930 <MemManage_Handler+0x4>

08000934 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000934:	b480      	push	{r7}
 8000936:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000938:	bf00      	nop
 800093a:	e7fd      	b.n	8000938 <BusFault_Handler+0x4>

0800093c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800093c:	b480      	push	{r7}
 800093e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000940:	bf00      	nop
 8000942:	e7fd      	b.n	8000940 <UsageFault_Handler+0x4>

08000944 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000944:	b480      	push	{r7}
 8000946:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000948:	bf00      	nop
 800094a:	46bd      	mov	sp, r7
 800094c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000950:	4770      	bx	lr

08000952 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000952:	b480      	push	{r7}
 8000954:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000956:	bf00      	nop
 8000958:	46bd      	mov	sp, r7
 800095a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800095e:	4770      	bx	lr

08000960 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000960:	b480      	push	{r7}
 8000962:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000964:	bf00      	nop
 8000966:	46bd      	mov	sp, r7
 8000968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800096c:	4770      	bx	lr

0800096e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800096e:	b580      	push	{r7, lr}
 8000970:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000972:	f000 f89b 	bl	8000aac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000976:	bf00      	nop
 8000978:	bd80      	pop	{r7, pc}
	...

0800097c <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000980:	4802      	ldr	r0, [pc, #8]	@ (800098c <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000982:	f000 ff39 	bl	80017f8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000986:	bf00      	nop
 8000988:	bd80      	pop	{r7, pc}
 800098a:	bf00      	nop
 800098c:	200003ec 	.word	0x200003ec

08000990 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000990:	b480      	push	{r7}
 8000992:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000994:	4b06      	ldr	r3, [pc, #24]	@ (80009b0 <SystemInit+0x20>)
 8000996:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800099a:	4a05      	ldr	r2, [pc, #20]	@ (80009b0 <SystemInit+0x20>)
 800099c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80009a0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80009a4:	bf00      	nop
 80009a6:	46bd      	mov	sp, r7
 80009a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ac:	4770      	bx	lr
 80009ae:	bf00      	nop
 80009b0:	e000ed00 	.word	0xe000ed00

080009b4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 80009b4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80009ec <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80009b8:	f7ff ffea 	bl	8000990 <SystemInit>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80009bc:	480c      	ldr	r0, [pc, #48]	@ (80009f0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80009be:	490d      	ldr	r1, [pc, #52]	@ (80009f4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80009c0:	4a0d      	ldr	r2, [pc, #52]	@ (80009f8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80009c2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80009c4:	e002      	b.n	80009cc <LoopCopyDataInit>

080009c6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80009c6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009c8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009ca:	3304      	adds	r3, #4

080009cc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80009cc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009ce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80009d0:	d3f9      	bcc.n	80009c6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80009d2:	4a0a      	ldr	r2, [pc, #40]	@ (80009fc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80009d4:	4c0a      	ldr	r4, [pc, #40]	@ (8000a00 <LoopFillZerobss+0x22>)
  movs r3, #0
 80009d6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80009d8:	e001      	b.n	80009de <LoopFillZerobss>

080009da <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80009da:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009dc:	3204      	adds	r2, #4

080009de <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009de:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009e0:	d3fb      	bcc.n	80009da <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80009e2:	f001 fac7 	bl	8001f74 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80009e6:	f7ff fdcb 	bl	8000580 <main>
  bx  lr    
 80009ea:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80009ec:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 80009f0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80009f4:	200003d0 	.word	0x200003d0
  ldr r2, =_sidata
 80009f8:	08001ff4 	.word	0x08001ff4
  ldr r2, =_sbss
 80009fc:	200003d0 	.word	0x200003d0
  ldr r4, =_ebss
 8000a00:	2000045c 	.word	0x2000045c

08000a04 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000a04:	e7fe      	b.n	8000a04 <ADC_IRQHandler>
	...

08000a08 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000a0c:	4b0e      	ldr	r3, [pc, #56]	@ (8000a48 <HAL_Init+0x40>)
 8000a0e:	681b      	ldr	r3, [r3, #0]
 8000a10:	4a0d      	ldr	r2, [pc, #52]	@ (8000a48 <HAL_Init+0x40>)
 8000a12:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000a16:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000a18:	4b0b      	ldr	r3, [pc, #44]	@ (8000a48 <HAL_Init+0x40>)
 8000a1a:	681b      	ldr	r3, [r3, #0]
 8000a1c:	4a0a      	ldr	r2, [pc, #40]	@ (8000a48 <HAL_Init+0x40>)
 8000a1e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000a22:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a24:	4b08      	ldr	r3, [pc, #32]	@ (8000a48 <HAL_Init+0x40>)
 8000a26:	681b      	ldr	r3, [r3, #0]
 8000a28:	4a07      	ldr	r2, [pc, #28]	@ (8000a48 <HAL_Init+0x40>)
 8000a2a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000a2e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a30:	2003      	movs	r0, #3
 8000a32:	f000 f92b 	bl	8000c8c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a36:	200f      	movs	r0, #15
 8000a38:	f000 f808 	bl	8000a4c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a3c:	f7ff ff1e 	bl	800087c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a40:	2300      	movs	r3, #0
}
 8000a42:	4618      	mov	r0, r3
 8000a44:	bd80      	pop	{r7, pc}
 8000a46:	bf00      	nop
 8000a48:	40023c00 	.word	0x40023c00

08000a4c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b082      	sub	sp, #8
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a54:	4b12      	ldr	r3, [pc, #72]	@ (8000aa0 <HAL_InitTick+0x54>)
 8000a56:	681a      	ldr	r2, [r3, #0]
 8000a58:	4b12      	ldr	r3, [pc, #72]	@ (8000aa4 <HAL_InitTick+0x58>)
 8000a5a:	781b      	ldrb	r3, [r3, #0]
 8000a5c:	4619      	mov	r1, r3
 8000a5e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000a62:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a66:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a6a:	4618      	mov	r0, r3
 8000a6c:	f000 f943 	bl	8000cf6 <HAL_SYSTICK_Config>
 8000a70:	4603      	mov	r3, r0
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	d001      	beq.n	8000a7a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000a76:	2301      	movs	r3, #1
 8000a78:	e00e      	b.n	8000a98 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	2b0f      	cmp	r3, #15
 8000a7e:	d80a      	bhi.n	8000a96 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a80:	2200      	movs	r2, #0
 8000a82:	6879      	ldr	r1, [r7, #4]
 8000a84:	f04f 30ff 	mov.w	r0, #4294967295
 8000a88:	f000 f90b 	bl	8000ca2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a8c:	4a06      	ldr	r2, [pc, #24]	@ (8000aa8 <HAL_InitTick+0x5c>)
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000a92:	2300      	movs	r3, #0
 8000a94:	e000      	b.n	8000a98 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000a96:	2301      	movs	r3, #1
}
 8000a98:	4618      	mov	r0, r3
 8000a9a:	3708      	adds	r7, #8
 8000a9c:	46bd      	mov	sp, r7
 8000a9e:	bd80      	pop	{r7, pc}
 8000aa0:	200003c4 	.word	0x200003c4
 8000aa4:	200003cc 	.word	0x200003cc
 8000aa8:	200003c8 	.word	0x200003c8

08000aac <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000aac:	b480      	push	{r7}
 8000aae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ab0:	4b06      	ldr	r3, [pc, #24]	@ (8000acc <HAL_IncTick+0x20>)
 8000ab2:	781b      	ldrb	r3, [r3, #0]
 8000ab4:	461a      	mov	r2, r3
 8000ab6:	4b06      	ldr	r3, [pc, #24]	@ (8000ad0 <HAL_IncTick+0x24>)
 8000ab8:	681b      	ldr	r3, [r3, #0]
 8000aba:	4413      	add	r3, r2
 8000abc:	4a04      	ldr	r2, [pc, #16]	@ (8000ad0 <HAL_IncTick+0x24>)
 8000abe:	6013      	str	r3, [r2, #0]
}
 8000ac0:	bf00      	nop
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac8:	4770      	bx	lr
 8000aca:	bf00      	nop
 8000acc:	200003cc 	.word	0x200003cc
 8000ad0:	20000458 	.word	0x20000458

08000ad4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ad4:	b480      	push	{r7}
 8000ad6:	af00      	add	r7, sp, #0
  return uwTick;
 8000ad8:	4b03      	ldr	r3, [pc, #12]	@ (8000ae8 <HAL_GetTick+0x14>)
 8000ada:	681b      	ldr	r3, [r3, #0]
}
 8000adc:	4618      	mov	r0, r3
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop
 8000ae8:	20000458 	.word	0x20000458

08000aec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000aec:	b480      	push	{r7}
 8000aee:	b085      	sub	sp, #20
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	f003 0307 	and.w	r3, r3, #7
 8000afa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000afc:	4b0c      	ldr	r3, [pc, #48]	@ (8000b30 <__NVIC_SetPriorityGrouping+0x44>)
 8000afe:	68db      	ldr	r3, [r3, #12]
 8000b00:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b02:	68ba      	ldr	r2, [r7, #8]
 8000b04:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000b08:	4013      	ands	r3, r2
 8000b0a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b0c:	68fb      	ldr	r3, [r7, #12]
 8000b0e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b10:	68bb      	ldr	r3, [r7, #8]
 8000b12:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b14:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000b18:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000b1c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b1e:	4a04      	ldr	r2, [pc, #16]	@ (8000b30 <__NVIC_SetPriorityGrouping+0x44>)
 8000b20:	68bb      	ldr	r3, [r7, #8]
 8000b22:	60d3      	str	r3, [r2, #12]
}
 8000b24:	bf00      	nop
 8000b26:	3714      	adds	r7, #20
 8000b28:	46bd      	mov	sp, r7
 8000b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b2e:	4770      	bx	lr
 8000b30:	e000ed00 	.word	0xe000ed00

08000b34 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b34:	b480      	push	{r7}
 8000b36:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b38:	4b04      	ldr	r3, [pc, #16]	@ (8000b4c <__NVIC_GetPriorityGrouping+0x18>)
 8000b3a:	68db      	ldr	r3, [r3, #12]
 8000b3c:	0a1b      	lsrs	r3, r3, #8
 8000b3e:	f003 0307 	and.w	r3, r3, #7
}
 8000b42:	4618      	mov	r0, r3
 8000b44:	46bd      	mov	sp, r7
 8000b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b4a:	4770      	bx	lr
 8000b4c:	e000ed00 	.word	0xe000ed00

08000b50 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b50:	b480      	push	{r7}
 8000b52:	b083      	sub	sp, #12
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	4603      	mov	r3, r0
 8000b58:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b5e:	2b00      	cmp	r3, #0
 8000b60:	db0b      	blt.n	8000b7a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b62:	79fb      	ldrb	r3, [r7, #7]
 8000b64:	f003 021f 	and.w	r2, r3, #31
 8000b68:	4907      	ldr	r1, [pc, #28]	@ (8000b88 <__NVIC_EnableIRQ+0x38>)
 8000b6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b6e:	095b      	lsrs	r3, r3, #5
 8000b70:	2001      	movs	r0, #1
 8000b72:	fa00 f202 	lsl.w	r2, r0, r2
 8000b76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000b7a:	bf00      	nop
 8000b7c:	370c      	adds	r7, #12
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b84:	4770      	bx	lr
 8000b86:	bf00      	nop
 8000b88:	e000e100 	.word	0xe000e100

08000b8c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b8c:	b480      	push	{r7}
 8000b8e:	b083      	sub	sp, #12
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	4603      	mov	r3, r0
 8000b94:	6039      	str	r1, [r7, #0]
 8000b96:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	db0a      	blt.n	8000bb6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ba0:	683b      	ldr	r3, [r7, #0]
 8000ba2:	b2da      	uxtb	r2, r3
 8000ba4:	490c      	ldr	r1, [pc, #48]	@ (8000bd8 <__NVIC_SetPriority+0x4c>)
 8000ba6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000baa:	0112      	lsls	r2, r2, #4
 8000bac:	b2d2      	uxtb	r2, r2
 8000bae:	440b      	add	r3, r1
 8000bb0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000bb4:	e00a      	b.n	8000bcc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bb6:	683b      	ldr	r3, [r7, #0]
 8000bb8:	b2da      	uxtb	r2, r3
 8000bba:	4908      	ldr	r1, [pc, #32]	@ (8000bdc <__NVIC_SetPriority+0x50>)
 8000bbc:	79fb      	ldrb	r3, [r7, #7]
 8000bbe:	f003 030f 	and.w	r3, r3, #15
 8000bc2:	3b04      	subs	r3, #4
 8000bc4:	0112      	lsls	r2, r2, #4
 8000bc6:	b2d2      	uxtb	r2, r2
 8000bc8:	440b      	add	r3, r1
 8000bca:	761a      	strb	r2, [r3, #24]
}
 8000bcc:	bf00      	nop
 8000bce:	370c      	adds	r7, #12
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd6:	4770      	bx	lr
 8000bd8:	e000e100 	.word	0xe000e100
 8000bdc:	e000ed00 	.word	0xe000ed00

08000be0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000be0:	b480      	push	{r7}
 8000be2:	b089      	sub	sp, #36	@ 0x24
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	60f8      	str	r0, [r7, #12]
 8000be8:	60b9      	str	r1, [r7, #8]
 8000bea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000bec:	68fb      	ldr	r3, [r7, #12]
 8000bee:	f003 0307 	and.w	r3, r3, #7
 8000bf2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000bf4:	69fb      	ldr	r3, [r7, #28]
 8000bf6:	f1c3 0307 	rsb	r3, r3, #7
 8000bfa:	2b04      	cmp	r3, #4
 8000bfc:	bf28      	it	cs
 8000bfe:	2304      	movcs	r3, #4
 8000c00:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c02:	69fb      	ldr	r3, [r7, #28]
 8000c04:	3304      	adds	r3, #4
 8000c06:	2b06      	cmp	r3, #6
 8000c08:	d902      	bls.n	8000c10 <NVIC_EncodePriority+0x30>
 8000c0a:	69fb      	ldr	r3, [r7, #28]
 8000c0c:	3b03      	subs	r3, #3
 8000c0e:	e000      	b.n	8000c12 <NVIC_EncodePriority+0x32>
 8000c10:	2300      	movs	r3, #0
 8000c12:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c14:	f04f 32ff 	mov.w	r2, #4294967295
 8000c18:	69bb      	ldr	r3, [r7, #24]
 8000c1a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c1e:	43da      	mvns	r2, r3
 8000c20:	68bb      	ldr	r3, [r7, #8]
 8000c22:	401a      	ands	r2, r3
 8000c24:	697b      	ldr	r3, [r7, #20]
 8000c26:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c28:	f04f 31ff 	mov.w	r1, #4294967295
 8000c2c:	697b      	ldr	r3, [r7, #20]
 8000c2e:	fa01 f303 	lsl.w	r3, r1, r3
 8000c32:	43d9      	mvns	r1, r3
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c38:	4313      	orrs	r3, r2
         );
}
 8000c3a:	4618      	mov	r0, r3
 8000c3c:	3724      	adds	r7, #36	@ 0x24
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c44:	4770      	bx	lr
	...

08000c48 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b082      	sub	sp, #8
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	3b01      	subs	r3, #1
 8000c54:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000c58:	d301      	bcc.n	8000c5e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c5a:	2301      	movs	r3, #1
 8000c5c:	e00f      	b.n	8000c7e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c5e:	4a0a      	ldr	r2, [pc, #40]	@ (8000c88 <SysTick_Config+0x40>)
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	3b01      	subs	r3, #1
 8000c64:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c66:	210f      	movs	r1, #15
 8000c68:	f04f 30ff 	mov.w	r0, #4294967295
 8000c6c:	f7ff ff8e 	bl	8000b8c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c70:	4b05      	ldr	r3, [pc, #20]	@ (8000c88 <SysTick_Config+0x40>)
 8000c72:	2200      	movs	r2, #0
 8000c74:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c76:	4b04      	ldr	r3, [pc, #16]	@ (8000c88 <SysTick_Config+0x40>)
 8000c78:	2207      	movs	r2, #7
 8000c7a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c7c:	2300      	movs	r3, #0
}
 8000c7e:	4618      	mov	r0, r3
 8000c80:	3708      	adds	r7, #8
 8000c82:	46bd      	mov	sp, r7
 8000c84:	bd80      	pop	{r7, pc}
 8000c86:	bf00      	nop
 8000c88:	e000e010 	.word	0xe000e010

08000c8c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b082      	sub	sp, #8
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c94:	6878      	ldr	r0, [r7, #4]
 8000c96:	f7ff ff29 	bl	8000aec <__NVIC_SetPriorityGrouping>
}
 8000c9a:	bf00      	nop
 8000c9c:	3708      	adds	r7, #8
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	bd80      	pop	{r7, pc}

08000ca2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000ca2:	b580      	push	{r7, lr}
 8000ca4:	b086      	sub	sp, #24
 8000ca6:	af00      	add	r7, sp, #0
 8000ca8:	4603      	mov	r3, r0
 8000caa:	60b9      	str	r1, [r7, #8]
 8000cac:	607a      	str	r2, [r7, #4]
 8000cae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000cb4:	f7ff ff3e 	bl	8000b34 <__NVIC_GetPriorityGrouping>
 8000cb8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000cba:	687a      	ldr	r2, [r7, #4]
 8000cbc:	68b9      	ldr	r1, [r7, #8]
 8000cbe:	6978      	ldr	r0, [r7, #20]
 8000cc0:	f7ff ff8e 	bl	8000be0 <NVIC_EncodePriority>
 8000cc4:	4602      	mov	r2, r0
 8000cc6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000cca:	4611      	mov	r1, r2
 8000ccc:	4618      	mov	r0, r3
 8000cce:	f7ff ff5d 	bl	8000b8c <__NVIC_SetPriority>
}
 8000cd2:	bf00      	nop
 8000cd4:	3718      	adds	r7, #24
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	bd80      	pop	{r7, pc}

08000cda <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000cda:	b580      	push	{r7, lr}
 8000cdc:	b082      	sub	sp, #8
 8000cde:	af00      	add	r7, sp, #0
 8000ce0:	4603      	mov	r3, r0
 8000ce2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000ce4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ce8:	4618      	mov	r0, r3
 8000cea:	f7ff ff31 	bl	8000b50 <__NVIC_EnableIRQ>
}
 8000cee:	bf00      	nop
 8000cf0:	3708      	adds	r7, #8
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	bd80      	pop	{r7, pc}

08000cf6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000cf6:	b580      	push	{r7, lr}
 8000cf8:	b082      	sub	sp, #8
 8000cfa:	af00      	add	r7, sp, #0
 8000cfc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000cfe:	6878      	ldr	r0, [r7, #4]
 8000d00:	f7ff ffa2 	bl	8000c48 <SysTick_Config>
 8000d04:	4603      	mov	r3, r0
}
 8000d06:	4618      	mov	r0, r3
 8000d08:	3708      	adds	r7, #8
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	bd80      	pop	{r7, pc}
	...

08000d10 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b082      	sub	sp, #8
 8000d14:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8000d16:	2300      	movs	r3, #0
 8000d18:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	603b      	str	r3, [r7, #0]
 8000d1e:	4b20      	ldr	r3, [pc, #128]	@ (8000da0 <HAL_PWREx_EnableOverDrive+0x90>)
 8000d20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d22:	4a1f      	ldr	r2, [pc, #124]	@ (8000da0 <HAL_PWREx_EnableOverDrive+0x90>)
 8000d24:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000d28:	6413      	str	r3, [r2, #64]	@ 0x40
 8000d2a:	4b1d      	ldr	r3, [pc, #116]	@ (8000da0 <HAL_PWREx_EnableOverDrive+0x90>)
 8000d2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d2e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000d32:	603b      	str	r3, [r7, #0]
 8000d34:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8000d36:	4b1b      	ldr	r3, [pc, #108]	@ (8000da4 <HAL_PWREx_EnableOverDrive+0x94>)
 8000d38:	2201      	movs	r2, #1
 8000d3a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000d3c:	f7ff feca 	bl	8000ad4 <HAL_GetTick>
 8000d40:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8000d42:	e009      	b.n	8000d58 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8000d44:	f7ff fec6 	bl	8000ad4 <HAL_GetTick>
 8000d48:	4602      	mov	r2, r0
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	1ad3      	subs	r3, r2, r3
 8000d4e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8000d52:	d901      	bls.n	8000d58 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8000d54:	2303      	movs	r3, #3
 8000d56:	e01f      	b.n	8000d98 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8000d58:	4b13      	ldr	r3, [pc, #76]	@ (8000da8 <HAL_PWREx_EnableOverDrive+0x98>)
 8000d5a:	685b      	ldr	r3, [r3, #4]
 8000d5c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000d60:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000d64:	d1ee      	bne.n	8000d44 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8000d66:	4b11      	ldr	r3, [pc, #68]	@ (8000dac <HAL_PWREx_EnableOverDrive+0x9c>)
 8000d68:	2201      	movs	r2, #1
 8000d6a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000d6c:	f7ff feb2 	bl	8000ad4 <HAL_GetTick>
 8000d70:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8000d72:	e009      	b.n	8000d88 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8000d74:	f7ff feae 	bl	8000ad4 <HAL_GetTick>
 8000d78:	4602      	mov	r2, r0
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	1ad3      	subs	r3, r2, r3
 8000d7e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8000d82:	d901      	bls.n	8000d88 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8000d84:	2303      	movs	r3, #3
 8000d86:	e007      	b.n	8000d98 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8000d88:	4b07      	ldr	r3, [pc, #28]	@ (8000da8 <HAL_PWREx_EnableOverDrive+0x98>)
 8000d8a:	685b      	ldr	r3, [r3, #4]
 8000d8c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000d90:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8000d94:	d1ee      	bne.n	8000d74 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8000d96:	2300      	movs	r3, #0
}
 8000d98:	4618      	mov	r0, r3
 8000d9a:	3708      	adds	r7, #8
 8000d9c:	46bd      	mov	sp, r7
 8000d9e:	bd80      	pop	{r7, pc}
 8000da0:	40023800 	.word	0x40023800
 8000da4:	420e0040 	.word	0x420e0040
 8000da8:	40007000 	.word	0x40007000
 8000dac:	420e0044 	.word	0x420e0044

08000db0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b086      	sub	sp, #24
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d101      	bne.n	8000dc2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000dbe:	2301      	movs	r3, #1
 8000dc0:	e267      	b.n	8001292 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	f003 0301 	and.w	r3, r3, #1
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d075      	beq.n	8000eba <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8000dce:	4b88      	ldr	r3, [pc, #544]	@ (8000ff0 <HAL_RCC_OscConfig+0x240>)
 8000dd0:	689b      	ldr	r3, [r3, #8]
 8000dd2:	f003 030c 	and.w	r3, r3, #12
 8000dd6:	2b04      	cmp	r3, #4
 8000dd8:	d00c      	beq.n	8000df4 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000dda:	4b85      	ldr	r3, [pc, #532]	@ (8000ff0 <HAL_RCC_OscConfig+0x240>)
 8000ddc:	689b      	ldr	r3, [r3, #8]
 8000dde:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8000de2:	2b08      	cmp	r3, #8
 8000de4:	d112      	bne.n	8000e0c <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000de6:	4b82      	ldr	r3, [pc, #520]	@ (8000ff0 <HAL_RCC_OscConfig+0x240>)
 8000de8:	685b      	ldr	r3, [r3, #4]
 8000dea:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000dee:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8000df2:	d10b      	bne.n	8000e0c <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000df4:	4b7e      	ldr	r3, [pc, #504]	@ (8000ff0 <HAL_RCC_OscConfig+0x240>)
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	d05b      	beq.n	8000eb8 <HAL_RCC_OscConfig+0x108>
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	685b      	ldr	r3, [r3, #4]
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d157      	bne.n	8000eb8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8000e08:	2301      	movs	r3, #1
 8000e0a:	e242      	b.n	8001292 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	685b      	ldr	r3, [r3, #4]
 8000e10:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000e14:	d106      	bne.n	8000e24 <HAL_RCC_OscConfig+0x74>
 8000e16:	4b76      	ldr	r3, [pc, #472]	@ (8000ff0 <HAL_RCC_OscConfig+0x240>)
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	4a75      	ldr	r2, [pc, #468]	@ (8000ff0 <HAL_RCC_OscConfig+0x240>)
 8000e1c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000e20:	6013      	str	r3, [r2, #0]
 8000e22:	e01d      	b.n	8000e60 <HAL_RCC_OscConfig+0xb0>
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	685b      	ldr	r3, [r3, #4]
 8000e28:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8000e2c:	d10c      	bne.n	8000e48 <HAL_RCC_OscConfig+0x98>
 8000e2e:	4b70      	ldr	r3, [pc, #448]	@ (8000ff0 <HAL_RCC_OscConfig+0x240>)
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	4a6f      	ldr	r2, [pc, #444]	@ (8000ff0 <HAL_RCC_OscConfig+0x240>)
 8000e34:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000e38:	6013      	str	r3, [r2, #0]
 8000e3a:	4b6d      	ldr	r3, [pc, #436]	@ (8000ff0 <HAL_RCC_OscConfig+0x240>)
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	4a6c      	ldr	r2, [pc, #432]	@ (8000ff0 <HAL_RCC_OscConfig+0x240>)
 8000e40:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000e44:	6013      	str	r3, [r2, #0]
 8000e46:	e00b      	b.n	8000e60 <HAL_RCC_OscConfig+0xb0>
 8000e48:	4b69      	ldr	r3, [pc, #420]	@ (8000ff0 <HAL_RCC_OscConfig+0x240>)
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	4a68      	ldr	r2, [pc, #416]	@ (8000ff0 <HAL_RCC_OscConfig+0x240>)
 8000e4e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000e52:	6013      	str	r3, [r2, #0]
 8000e54:	4b66      	ldr	r3, [pc, #408]	@ (8000ff0 <HAL_RCC_OscConfig+0x240>)
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	4a65      	ldr	r2, [pc, #404]	@ (8000ff0 <HAL_RCC_OscConfig+0x240>)
 8000e5a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000e5e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	685b      	ldr	r3, [r3, #4]
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	d013      	beq.n	8000e90 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e68:	f7ff fe34 	bl	8000ad4 <HAL_GetTick>
 8000e6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000e6e:	e008      	b.n	8000e82 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000e70:	f7ff fe30 	bl	8000ad4 <HAL_GetTick>
 8000e74:	4602      	mov	r2, r0
 8000e76:	693b      	ldr	r3, [r7, #16]
 8000e78:	1ad3      	subs	r3, r2, r3
 8000e7a:	2b64      	cmp	r3, #100	@ 0x64
 8000e7c:	d901      	bls.n	8000e82 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8000e7e:	2303      	movs	r3, #3
 8000e80:	e207      	b.n	8001292 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000e82:	4b5b      	ldr	r3, [pc, #364]	@ (8000ff0 <HAL_RCC_OscConfig+0x240>)
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d0f0      	beq.n	8000e70 <HAL_RCC_OscConfig+0xc0>
 8000e8e:	e014      	b.n	8000eba <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e90:	f7ff fe20 	bl	8000ad4 <HAL_GetTick>
 8000e94:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000e96:	e008      	b.n	8000eaa <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000e98:	f7ff fe1c 	bl	8000ad4 <HAL_GetTick>
 8000e9c:	4602      	mov	r2, r0
 8000e9e:	693b      	ldr	r3, [r7, #16]
 8000ea0:	1ad3      	subs	r3, r2, r3
 8000ea2:	2b64      	cmp	r3, #100	@ 0x64
 8000ea4:	d901      	bls.n	8000eaa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8000ea6:	2303      	movs	r3, #3
 8000ea8:	e1f3      	b.n	8001292 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000eaa:	4b51      	ldr	r3, [pc, #324]	@ (8000ff0 <HAL_RCC_OscConfig+0x240>)
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d1f0      	bne.n	8000e98 <HAL_RCC_OscConfig+0xe8>
 8000eb6:	e000      	b.n	8000eba <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000eb8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	f003 0302 	and.w	r3, r3, #2
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d063      	beq.n	8000f8e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8000ec6:	4b4a      	ldr	r3, [pc, #296]	@ (8000ff0 <HAL_RCC_OscConfig+0x240>)
 8000ec8:	689b      	ldr	r3, [r3, #8]
 8000eca:	f003 030c 	and.w	r3, r3, #12
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d00b      	beq.n	8000eea <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000ed2:	4b47      	ldr	r3, [pc, #284]	@ (8000ff0 <HAL_RCC_OscConfig+0x240>)
 8000ed4:	689b      	ldr	r3, [r3, #8]
 8000ed6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8000eda:	2b08      	cmp	r3, #8
 8000edc:	d11c      	bne.n	8000f18 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000ede:	4b44      	ldr	r3, [pc, #272]	@ (8000ff0 <HAL_RCC_OscConfig+0x240>)
 8000ee0:	685b      	ldr	r3, [r3, #4]
 8000ee2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d116      	bne.n	8000f18 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000eea:	4b41      	ldr	r3, [pc, #260]	@ (8000ff0 <HAL_RCC_OscConfig+0x240>)
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	f003 0302 	and.w	r3, r3, #2
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d005      	beq.n	8000f02 <HAL_RCC_OscConfig+0x152>
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	68db      	ldr	r3, [r3, #12]
 8000efa:	2b01      	cmp	r3, #1
 8000efc:	d001      	beq.n	8000f02 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8000efe:	2301      	movs	r3, #1
 8000f00:	e1c7      	b.n	8001292 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000f02:	4b3b      	ldr	r3, [pc, #236]	@ (8000ff0 <HAL_RCC_OscConfig+0x240>)
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	691b      	ldr	r3, [r3, #16]
 8000f0e:	00db      	lsls	r3, r3, #3
 8000f10:	4937      	ldr	r1, [pc, #220]	@ (8000ff0 <HAL_RCC_OscConfig+0x240>)
 8000f12:	4313      	orrs	r3, r2
 8000f14:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000f16:	e03a      	b.n	8000f8e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	68db      	ldr	r3, [r3, #12]
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d020      	beq.n	8000f62 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000f20:	4b34      	ldr	r3, [pc, #208]	@ (8000ff4 <HAL_RCC_OscConfig+0x244>)
 8000f22:	2201      	movs	r2, #1
 8000f24:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000f26:	f7ff fdd5 	bl	8000ad4 <HAL_GetTick>
 8000f2a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000f2c:	e008      	b.n	8000f40 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000f2e:	f7ff fdd1 	bl	8000ad4 <HAL_GetTick>
 8000f32:	4602      	mov	r2, r0
 8000f34:	693b      	ldr	r3, [r7, #16]
 8000f36:	1ad3      	subs	r3, r2, r3
 8000f38:	2b02      	cmp	r3, #2
 8000f3a:	d901      	bls.n	8000f40 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8000f3c:	2303      	movs	r3, #3
 8000f3e:	e1a8      	b.n	8001292 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000f40:	4b2b      	ldr	r3, [pc, #172]	@ (8000ff0 <HAL_RCC_OscConfig+0x240>)
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	f003 0302 	and.w	r3, r3, #2
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d0f0      	beq.n	8000f2e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000f4c:	4b28      	ldr	r3, [pc, #160]	@ (8000ff0 <HAL_RCC_OscConfig+0x240>)
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	691b      	ldr	r3, [r3, #16]
 8000f58:	00db      	lsls	r3, r3, #3
 8000f5a:	4925      	ldr	r1, [pc, #148]	@ (8000ff0 <HAL_RCC_OscConfig+0x240>)
 8000f5c:	4313      	orrs	r3, r2
 8000f5e:	600b      	str	r3, [r1, #0]
 8000f60:	e015      	b.n	8000f8e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000f62:	4b24      	ldr	r3, [pc, #144]	@ (8000ff4 <HAL_RCC_OscConfig+0x244>)
 8000f64:	2200      	movs	r2, #0
 8000f66:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000f68:	f7ff fdb4 	bl	8000ad4 <HAL_GetTick>
 8000f6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000f6e:	e008      	b.n	8000f82 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000f70:	f7ff fdb0 	bl	8000ad4 <HAL_GetTick>
 8000f74:	4602      	mov	r2, r0
 8000f76:	693b      	ldr	r3, [r7, #16]
 8000f78:	1ad3      	subs	r3, r2, r3
 8000f7a:	2b02      	cmp	r3, #2
 8000f7c:	d901      	bls.n	8000f82 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8000f7e:	2303      	movs	r3, #3
 8000f80:	e187      	b.n	8001292 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000f82:	4b1b      	ldr	r3, [pc, #108]	@ (8000ff0 <HAL_RCC_OscConfig+0x240>)
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	f003 0302 	and.w	r3, r3, #2
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d1f0      	bne.n	8000f70 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	f003 0308 	and.w	r3, r3, #8
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d036      	beq.n	8001008 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	695b      	ldr	r3, [r3, #20]
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d016      	beq.n	8000fd0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000fa2:	4b15      	ldr	r3, [pc, #84]	@ (8000ff8 <HAL_RCC_OscConfig+0x248>)
 8000fa4:	2201      	movs	r2, #1
 8000fa6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000fa8:	f7ff fd94 	bl	8000ad4 <HAL_GetTick>
 8000fac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000fae:	e008      	b.n	8000fc2 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000fb0:	f7ff fd90 	bl	8000ad4 <HAL_GetTick>
 8000fb4:	4602      	mov	r2, r0
 8000fb6:	693b      	ldr	r3, [r7, #16]
 8000fb8:	1ad3      	subs	r3, r2, r3
 8000fba:	2b02      	cmp	r3, #2
 8000fbc:	d901      	bls.n	8000fc2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8000fbe:	2303      	movs	r3, #3
 8000fc0:	e167      	b.n	8001292 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000fc2:	4b0b      	ldr	r3, [pc, #44]	@ (8000ff0 <HAL_RCC_OscConfig+0x240>)
 8000fc4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8000fc6:	f003 0302 	and.w	r3, r3, #2
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d0f0      	beq.n	8000fb0 <HAL_RCC_OscConfig+0x200>
 8000fce:	e01b      	b.n	8001008 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000fd0:	4b09      	ldr	r3, [pc, #36]	@ (8000ff8 <HAL_RCC_OscConfig+0x248>)
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000fd6:	f7ff fd7d 	bl	8000ad4 <HAL_GetTick>
 8000fda:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000fdc:	e00e      	b.n	8000ffc <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000fde:	f7ff fd79 	bl	8000ad4 <HAL_GetTick>
 8000fe2:	4602      	mov	r2, r0
 8000fe4:	693b      	ldr	r3, [r7, #16]
 8000fe6:	1ad3      	subs	r3, r2, r3
 8000fe8:	2b02      	cmp	r3, #2
 8000fea:	d907      	bls.n	8000ffc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8000fec:	2303      	movs	r3, #3
 8000fee:	e150      	b.n	8001292 <HAL_RCC_OscConfig+0x4e2>
 8000ff0:	40023800 	.word	0x40023800
 8000ff4:	42470000 	.word	0x42470000
 8000ff8:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000ffc:	4b88      	ldr	r3, [pc, #544]	@ (8001220 <HAL_RCC_OscConfig+0x470>)
 8000ffe:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001000:	f003 0302 	and.w	r3, r3, #2
 8001004:	2b00      	cmp	r3, #0
 8001006:	d1ea      	bne.n	8000fde <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	f003 0304 	and.w	r3, r3, #4
 8001010:	2b00      	cmp	r3, #0
 8001012:	f000 8097 	beq.w	8001144 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001016:	2300      	movs	r3, #0
 8001018:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800101a:	4b81      	ldr	r3, [pc, #516]	@ (8001220 <HAL_RCC_OscConfig+0x470>)
 800101c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800101e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001022:	2b00      	cmp	r3, #0
 8001024:	d10f      	bne.n	8001046 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001026:	2300      	movs	r3, #0
 8001028:	60bb      	str	r3, [r7, #8]
 800102a:	4b7d      	ldr	r3, [pc, #500]	@ (8001220 <HAL_RCC_OscConfig+0x470>)
 800102c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800102e:	4a7c      	ldr	r2, [pc, #496]	@ (8001220 <HAL_RCC_OscConfig+0x470>)
 8001030:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001034:	6413      	str	r3, [r2, #64]	@ 0x40
 8001036:	4b7a      	ldr	r3, [pc, #488]	@ (8001220 <HAL_RCC_OscConfig+0x470>)
 8001038:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800103a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800103e:	60bb      	str	r3, [r7, #8]
 8001040:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001042:	2301      	movs	r3, #1
 8001044:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001046:	4b77      	ldr	r3, [pc, #476]	@ (8001224 <HAL_RCC_OscConfig+0x474>)
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800104e:	2b00      	cmp	r3, #0
 8001050:	d118      	bne.n	8001084 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001052:	4b74      	ldr	r3, [pc, #464]	@ (8001224 <HAL_RCC_OscConfig+0x474>)
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	4a73      	ldr	r2, [pc, #460]	@ (8001224 <HAL_RCC_OscConfig+0x474>)
 8001058:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800105c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800105e:	f7ff fd39 	bl	8000ad4 <HAL_GetTick>
 8001062:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001064:	e008      	b.n	8001078 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001066:	f7ff fd35 	bl	8000ad4 <HAL_GetTick>
 800106a:	4602      	mov	r2, r0
 800106c:	693b      	ldr	r3, [r7, #16]
 800106e:	1ad3      	subs	r3, r2, r3
 8001070:	2b02      	cmp	r3, #2
 8001072:	d901      	bls.n	8001078 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001074:	2303      	movs	r3, #3
 8001076:	e10c      	b.n	8001292 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001078:	4b6a      	ldr	r3, [pc, #424]	@ (8001224 <HAL_RCC_OscConfig+0x474>)
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001080:	2b00      	cmp	r3, #0
 8001082:	d0f0      	beq.n	8001066 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	689b      	ldr	r3, [r3, #8]
 8001088:	2b01      	cmp	r3, #1
 800108a:	d106      	bne.n	800109a <HAL_RCC_OscConfig+0x2ea>
 800108c:	4b64      	ldr	r3, [pc, #400]	@ (8001220 <HAL_RCC_OscConfig+0x470>)
 800108e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001090:	4a63      	ldr	r2, [pc, #396]	@ (8001220 <HAL_RCC_OscConfig+0x470>)
 8001092:	f043 0301 	orr.w	r3, r3, #1
 8001096:	6713      	str	r3, [r2, #112]	@ 0x70
 8001098:	e01c      	b.n	80010d4 <HAL_RCC_OscConfig+0x324>
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	689b      	ldr	r3, [r3, #8]
 800109e:	2b05      	cmp	r3, #5
 80010a0:	d10c      	bne.n	80010bc <HAL_RCC_OscConfig+0x30c>
 80010a2:	4b5f      	ldr	r3, [pc, #380]	@ (8001220 <HAL_RCC_OscConfig+0x470>)
 80010a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80010a6:	4a5e      	ldr	r2, [pc, #376]	@ (8001220 <HAL_RCC_OscConfig+0x470>)
 80010a8:	f043 0304 	orr.w	r3, r3, #4
 80010ac:	6713      	str	r3, [r2, #112]	@ 0x70
 80010ae:	4b5c      	ldr	r3, [pc, #368]	@ (8001220 <HAL_RCC_OscConfig+0x470>)
 80010b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80010b2:	4a5b      	ldr	r2, [pc, #364]	@ (8001220 <HAL_RCC_OscConfig+0x470>)
 80010b4:	f043 0301 	orr.w	r3, r3, #1
 80010b8:	6713      	str	r3, [r2, #112]	@ 0x70
 80010ba:	e00b      	b.n	80010d4 <HAL_RCC_OscConfig+0x324>
 80010bc:	4b58      	ldr	r3, [pc, #352]	@ (8001220 <HAL_RCC_OscConfig+0x470>)
 80010be:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80010c0:	4a57      	ldr	r2, [pc, #348]	@ (8001220 <HAL_RCC_OscConfig+0x470>)
 80010c2:	f023 0301 	bic.w	r3, r3, #1
 80010c6:	6713      	str	r3, [r2, #112]	@ 0x70
 80010c8:	4b55      	ldr	r3, [pc, #340]	@ (8001220 <HAL_RCC_OscConfig+0x470>)
 80010ca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80010cc:	4a54      	ldr	r2, [pc, #336]	@ (8001220 <HAL_RCC_OscConfig+0x470>)
 80010ce:	f023 0304 	bic.w	r3, r3, #4
 80010d2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	689b      	ldr	r3, [r3, #8]
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d015      	beq.n	8001108 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80010dc:	f7ff fcfa 	bl	8000ad4 <HAL_GetTick>
 80010e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80010e2:	e00a      	b.n	80010fa <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80010e4:	f7ff fcf6 	bl	8000ad4 <HAL_GetTick>
 80010e8:	4602      	mov	r2, r0
 80010ea:	693b      	ldr	r3, [r7, #16]
 80010ec:	1ad3      	subs	r3, r2, r3
 80010ee:	f241 3288 	movw	r2, #5000	@ 0x1388
 80010f2:	4293      	cmp	r3, r2
 80010f4:	d901      	bls.n	80010fa <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80010f6:	2303      	movs	r3, #3
 80010f8:	e0cb      	b.n	8001292 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80010fa:	4b49      	ldr	r3, [pc, #292]	@ (8001220 <HAL_RCC_OscConfig+0x470>)
 80010fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80010fe:	f003 0302 	and.w	r3, r3, #2
 8001102:	2b00      	cmp	r3, #0
 8001104:	d0ee      	beq.n	80010e4 <HAL_RCC_OscConfig+0x334>
 8001106:	e014      	b.n	8001132 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001108:	f7ff fce4 	bl	8000ad4 <HAL_GetTick>
 800110c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800110e:	e00a      	b.n	8001126 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001110:	f7ff fce0 	bl	8000ad4 <HAL_GetTick>
 8001114:	4602      	mov	r2, r0
 8001116:	693b      	ldr	r3, [r7, #16]
 8001118:	1ad3      	subs	r3, r2, r3
 800111a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800111e:	4293      	cmp	r3, r2
 8001120:	d901      	bls.n	8001126 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001122:	2303      	movs	r3, #3
 8001124:	e0b5      	b.n	8001292 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001126:	4b3e      	ldr	r3, [pc, #248]	@ (8001220 <HAL_RCC_OscConfig+0x470>)
 8001128:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800112a:	f003 0302 	and.w	r3, r3, #2
 800112e:	2b00      	cmp	r3, #0
 8001130:	d1ee      	bne.n	8001110 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001132:	7dfb      	ldrb	r3, [r7, #23]
 8001134:	2b01      	cmp	r3, #1
 8001136:	d105      	bne.n	8001144 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001138:	4b39      	ldr	r3, [pc, #228]	@ (8001220 <HAL_RCC_OscConfig+0x470>)
 800113a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800113c:	4a38      	ldr	r2, [pc, #224]	@ (8001220 <HAL_RCC_OscConfig+0x470>)
 800113e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001142:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	699b      	ldr	r3, [r3, #24]
 8001148:	2b00      	cmp	r3, #0
 800114a:	f000 80a1 	beq.w	8001290 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800114e:	4b34      	ldr	r3, [pc, #208]	@ (8001220 <HAL_RCC_OscConfig+0x470>)
 8001150:	689b      	ldr	r3, [r3, #8]
 8001152:	f003 030c 	and.w	r3, r3, #12
 8001156:	2b08      	cmp	r3, #8
 8001158:	d05c      	beq.n	8001214 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	699b      	ldr	r3, [r3, #24]
 800115e:	2b02      	cmp	r3, #2
 8001160:	d141      	bne.n	80011e6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001162:	4b31      	ldr	r3, [pc, #196]	@ (8001228 <HAL_RCC_OscConfig+0x478>)
 8001164:	2200      	movs	r2, #0
 8001166:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001168:	f7ff fcb4 	bl	8000ad4 <HAL_GetTick>
 800116c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800116e:	e008      	b.n	8001182 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001170:	f7ff fcb0 	bl	8000ad4 <HAL_GetTick>
 8001174:	4602      	mov	r2, r0
 8001176:	693b      	ldr	r3, [r7, #16]
 8001178:	1ad3      	subs	r3, r2, r3
 800117a:	2b02      	cmp	r3, #2
 800117c:	d901      	bls.n	8001182 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800117e:	2303      	movs	r3, #3
 8001180:	e087      	b.n	8001292 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001182:	4b27      	ldr	r3, [pc, #156]	@ (8001220 <HAL_RCC_OscConfig+0x470>)
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800118a:	2b00      	cmp	r3, #0
 800118c:	d1f0      	bne.n	8001170 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	69da      	ldr	r2, [r3, #28]
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	6a1b      	ldr	r3, [r3, #32]
 8001196:	431a      	orrs	r2, r3
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800119c:	019b      	lsls	r3, r3, #6
 800119e:	431a      	orrs	r2, r3
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80011a4:	085b      	lsrs	r3, r3, #1
 80011a6:	3b01      	subs	r3, #1
 80011a8:	041b      	lsls	r3, r3, #16
 80011aa:	431a      	orrs	r2, r3
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80011b0:	061b      	lsls	r3, r3, #24
 80011b2:	491b      	ldr	r1, [pc, #108]	@ (8001220 <HAL_RCC_OscConfig+0x470>)
 80011b4:	4313      	orrs	r3, r2
 80011b6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80011b8:	4b1b      	ldr	r3, [pc, #108]	@ (8001228 <HAL_RCC_OscConfig+0x478>)
 80011ba:	2201      	movs	r2, #1
 80011bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011be:	f7ff fc89 	bl	8000ad4 <HAL_GetTick>
 80011c2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80011c4:	e008      	b.n	80011d8 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80011c6:	f7ff fc85 	bl	8000ad4 <HAL_GetTick>
 80011ca:	4602      	mov	r2, r0
 80011cc:	693b      	ldr	r3, [r7, #16]
 80011ce:	1ad3      	subs	r3, r2, r3
 80011d0:	2b02      	cmp	r3, #2
 80011d2:	d901      	bls.n	80011d8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80011d4:	2303      	movs	r3, #3
 80011d6:	e05c      	b.n	8001292 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80011d8:	4b11      	ldr	r3, [pc, #68]	@ (8001220 <HAL_RCC_OscConfig+0x470>)
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d0f0      	beq.n	80011c6 <HAL_RCC_OscConfig+0x416>
 80011e4:	e054      	b.n	8001290 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80011e6:	4b10      	ldr	r3, [pc, #64]	@ (8001228 <HAL_RCC_OscConfig+0x478>)
 80011e8:	2200      	movs	r2, #0
 80011ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011ec:	f7ff fc72 	bl	8000ad4 <HAL_GetTick>
 80011f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80011f2:	e008      	b.n	8001206 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80011f4:	f7ff fc6e 	bl	8000ad4 <HAL_GetTick>
 80011f8:	4602      	mov	r2, r0
 80011fa:	693b      	ldr	r3, [r7, #16]
 80011fc:	1ad3      	subs	r3, r2, r3
 80011fe:	2b02      	cmp	r3, #2
 8001200:	d901      	bls.n	8001206 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001202:	2303      	movs	r3, #3
 8001204:	e045      	b.n	8001292 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001206:	4b06      	ldr	r3, [pc, #24]	@ (8001220 <HAL_RCC_OscConfig+0x470>)
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800120e:	2b00      	cmp	r3, #0
 8001210:	d1f0      	bne.n	80011f4 <HAL_RCC_OscConfig+0x444>
 8001212:	e03d      	b.n	8001290 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	699b      	ldr	r3, [r3, #24]
 8001218:	2b01      	cmp	r3, #1
 800121a:	d107      	bne.n	800122c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800121c:	2301      	movs	r3, #1
 800121e:	e038      	b.n	8001292 <HAL_RCC_OscConfig+0x4e2>
 8001220:	40023800 	.word	0x40023800
 8001224:	40007000 	.word	0x40007000
 8001228:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800122c:	4b1b      	ldr	r3, [pc, #108]	@ (800129c <HAL_RCC_OscConfig+0x4ec>)
 800122e:	685b      	ldr	r3, [r3, #4]
 8001230:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	699b      	ldr	r3, [r3, #24]
 8001236:	2b01      	cmp	r3, #1
 8001238:	d028      	beq.n	800128c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800123a:	68fb      	ldr	r3, [r7, #12]
 800123c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001244:	429a      	cmp	r2, r3
 8001246:	d121      	bne.n	800128c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001248:	68fb      	ldr	r3, [r7, #12]
 800124a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001252:	429a      	cmp	r2, r3
 8001254:	d11a      	bne.n	800128c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001256:	68fa      	ldr	r2, [r7, #12]
 8001258:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800125c:	4013      	ands	r3, r2
 800125e:	687a      	ldr	r2, [r7, #4]
 8001260:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001262:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001264:	4293      	cmp	r3, r2
 8001266:	d111      	bne.n	800128c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001268:	68fb      	ldr	r3, [r7, #12]
 800126a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001272:	085b      	lsrs	r3, r3, #1
 8001274:	3b01      	subs	r3, #1
 8001276:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001278:	429a      	cmp	r2, r3
 800127a:	d107      	bne.n	800128c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800127c:	68fb      	ldr	r3, [r7, #12]
 800127e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001286:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001288:	429a      	cmp	r2, r3
 800128a:	d001      	beq.n	8001290 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 800128c:	2301      	movs	r3, #1
 800128e:	e000      	b.n	8001292 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001290:	2300      	movs	r3, #0
}
 8001292:	4618      	mov	r0, r3
 8001294:	3718      	adds	r7, #24
 8001296:	46bd      	mov	sp, r7
 8001298:	bd80      	pop	{r7, pc}
 800129a:	bf00      	nop
 800129c:	40023800 	.word	0x40023800

080012a0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b084      	sub	sp, #16
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]
 80012a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d101      	bne.n	80012b4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80012b0:	2301      	movs	r3, #1
 80012b2:	e0cc      	b.n	800144e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80012b4:	4b68      	ldr	r3, [pc, #416]	@ (8001458 <HAL_RCC_ClockConfig+0x1b8>)
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	f003 030f 	and.w	r3, r3, #15
 80012bc:	683a      	ldr	r2, [r7, #0]
 80012be:	429a      	cmp	r2, r3
 80012c0:	d90c      	bls.n	80012dc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80012c2:	4b65      	ldr	r3, [pc, #404]	@ (8001458 <HAL_RCC_ClockConfig+0x1b8>)
 80012c4:	683a      	ldr	r2, [r7, #0]
 80012c6:	b2d2      	uxtb	r2, r2
 80012c8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80012ca:	4b63      	ldr	r3, [pc, #396]	@ (8001458 <HAL_RCC_ClockConfig+0x1b8>)
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	f003 030f 	and.w	r3, r3, #15
 80012d2:	683a      	ldr	r2, [r7, #0]
 80012d4:	429a      	cmp	r2, r3
 80012d6:	d001      	beq.n	80012dc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80012d8:	2301      	movs	r3, #1
 80012da:	e0b8      	b.n	800144e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	f003 0302 	and.w	r3, r3, #2
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d020      	beq.n	800132a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	f003 0304 	and.w	r3, r3, #4
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d005      	beq.n	8001300 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80012f4:	4b59      	ldr	r3, [pc, #356]	@ (800145c <HAL_RCC_ClockConfig+0x1bc>)
 80012f6:	689b      	ldr	r3, [r3, #8]
 80012f8:	4a58      	ldr	r2, [pc, #352]	@ (800145c <HAL_RCC_ClockConfig+0x1bc>)
 80012fa:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80012fe:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	f003 0308 	and.w	r3, r3, #8
 8001308:	2b00      	cmp	r3, #0
 800130a:	d005      	beq.n	8001318 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800130c:	4b53      	ldr	r3, [pc, #332]	@ (800145c <HAL_RCC_ClockConfig+0x1bc>)
 800130e:	689b      	ldr	r3, [r3, #8]
 8001310:	4a52      	ldr	r2, [pc, #328]	@ (800145c <HAL_RCC_ClockConfig+0x1bc>)
 8001312:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001316:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001318:	4b50      	ldr	r3, [pc, #320]	@ (800145c <HAL_RCC_ClockConfig+0x1bc>)
 800131a:	689b      	ldr	r3, [r3, #8]
 800131c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	689b      	ldr	r3, [r3, #8]
 8001324:	494d      	ldr	r1, [pc, #308]	@ (800145c <HAL_RCC_ClockConfig+0x1bc>)
 8001326:	4313      	orrs	r3, r2
 8001328:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	f003 0301 	and.w	r3, r3, #1
 8001332:	2b00      	cmp	r3, #0
 8001334:	d044      	beq.n	80013c0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	685b      	ldr	r3, [r3, #4]
 800133a:	2b01      	cmp	r3, #1
 800133c:	d107      	bne.n	800134e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800133e:	4b47      	ldr	r3, [pc, #284]	@ (800145c <HAL_RCC_ClockConfig+0x1bc>)
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001346:	2b00      	cmp	r3, #0
 8001348:	d119      	bne.n	800137e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800134a:	2301      	movs	r3, #1
 800134c:	e07f      	b.n	800144e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	685b      	ldr	r3, [r3, #4]
 8001352:	2b02      	cmp	r3, #2
 8001354:	d003      	beq.n	800135e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800135a:	2b03      	cmp	r3, #3
 800135c:	d107      	bne.n	800136e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800135e:	4b3f      	ldr	r3, [pc, #252]	@ (800145c <HAL_RCC_ClockConfig+0x1bc>)
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001366:	2b00      	cmp	r3, #0
 8001368:	d109      	bne.n	800137e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800136a:	2301      	movs	r3, #1
 800136c:	e06f      	b.n	800144e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800136e:	4b3b      	ldr	r3, [pc, #236]	@ (800145c <HAL_RCC_ClockConfig+0x1bc>)
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	f003 0302 	and.w	r3, r3, #2
 8001376:	2b00      	cmp	r3, #0
 8001378:	d101      	bne.n	800137e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800137a:	2301      	movs	r3, #1
 800137c:	e067      	b.n	800144e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800137e:	4b37      	ldr	r3, [pc, #220]	@ (800145c <HAL_RCC_ClockConfig+0x1bc>)
 8001380:	689b      	ldr	r3, [r3, #8]
 8001382:	f023 0203 	bic.w	r2, r3, #3
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	685b      	ldr	r3, [r3, #4]
 800138a:	4934      	ldr	r1, [pc, #208]	@ (800145c <HAL_RCC_ClockConfig+0x1bc>)
 800138c:	4313      	orrs	r3, r2
 800138e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001390:	f7ff fba0 	bl	8000ad4 <HAL_GetTick>
 8001394:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001396:	e00a      	b.n	80013ae <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001398:	f7ff fb9c 	bl	8000ad4 <HAL_GetTick>
 800139c:	4602      	mov	r2, r0
 800139e:	68fb      	ldr	r3, [r7, #12]
 80013a0:	1ad3      	subs	r3, r2, r3
 80013a2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80013a6:	4293      	cmp	r3, r2
 80013a8:	d901      	bls.n	80013ae <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80013aa:	2303      	movs	r3, #3
 80013ac:	e04f      	b.n	800144e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80013ae:	4b2b      	ldr	r3, [pc, #172]	@ (800145c <HAL_RCC_ClockConfig+0x1bc>)
 80013b0:	689b      	ldr	r3, [r3, #8]
 80013b2:	f003 020c 	and.w	r2, r3, #12
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	685b      	ldr	r3, [r3, #4]
 80013ba:	009b      	lsls	r3, r3, #2
 80013bc:	429a      	cmp	r2, r3
 80013be:	d1eb      	bne.n	8001398 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80013c0:	4b25      	ldr	r3, [pc, #148]	@ (8001458 <HAL_RCC_ClockConfig+0x1b8>)
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	f003 030f 	and.w	r3, r3, #15
 80013c8:	683a      	ldr	r2, [r7, #0]
 80013ca:	429a      	cmp	r2, r3
 80013cc:	d20c      	bcs.n	80013e8 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80013ce:	4b22      	ldr	r3, [pc, #136]	@ (8001458 <HAL_RCC_ClockConfig+0x1b8>)
 80013d0:	683a      	ldr	r2, [r7, #0]
 80013d2:	b2d2      	uxtb	r2, r2
 80013d4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80013d6:	4b20      	ldr	r3, [pc, #128]	@ (8001458 <HAL_RCC_ClockConfig+0x1b8>)
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	f003 030f 	and.w	r3, r3, #15
 80013de:	683a      	ldr	r2, [r7, #0]
 80013e0:	429a      	cmp	r2, r3
 80013e2:	d001      	beq.n	80013e8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80013e4:	2301      	movs	r3, #1
 80013e6:	e032      	b.n	800144e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	f003 0304 	and.w	r3, r3, #4
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d008      	beq.n	8001406 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80013f4:	4b19      	ldr	r3, [pc, #100]	@ (800145c <HAL_RCC_ClockConfig+0x1bc>)
 80013f6:	689b      	ldr	r3, [r3, #8]
 80013f8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	68db      	ldr	r3, [r3, #12]
 8001400:	4916      	ldr	r1, [pc, #88]	@ (800145c <HAL_RCC_ClockConfig+0x1bc>)
 8001402:	4313      	orrs	r3, r2
 8001404:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	f003 0308 	and.w	r3, r3, #8
 800140e:	2b00      	cmp	r3, #0
 8001410:	d009      	beq.n	8001426 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001412:	4b12      	ldr	r3, [pc, #72]	@ (800145c <HAL_RCC_ClockConfig+0x1bc>)
 8001414:	689b      	ldr	r3, [r3, #8]
 8001416:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	691b      	ldr	r3, [r3, #16]
 800141e:	00db      	lsls	r3, r3, #3
 8001420:	490e      	ldr	r1, [pc, #56]	@ (800145c <HAL_RCC_ClockConfig+0x1bc>)
 8001422:	4313      	orrs	r3, r2
 8001424:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001426:	f000 f821 	bl	800146c <HAL_RCC_GetSysClockFreq>
 800142a:	4602      	mov	r2, r0
 800142c:	4b0b      	ldr	r3, [pc, #44]	@ (800145c <HAL_RCC_ClockConfig+0x1bc>)
 800142e:	689b      	ldr	r3, [r3, #8]
 8001430:	091b      	lsrs	r3, r3, #4
 8001432:	f003 030f 	and.w	r3, r3, #15
 8001436:	490a      	ldr	r1, [pc, #40]	@ (8001460 <HAL_RCC_ClockConfig+0x1c0>)
 8001438:	5ccb      	ldrb	r3, [r1, r3]
 800143a:	fa22 f303 	lsr.w	r3, r2, r3
 800143e:	4a09      	ldr	r2, [pc, #36]	@ (8001464 <HAL_RCC_ClockConfig+0x1c4>)
 8001440:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8001442:	4b09      	ldr	r3, [pc, #36]	@ (8001468 <HAL_RCC_ClockConfig+0x1c8>)
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	4618      	mov	r0, r3
 8001448:	f7ff fb00 	bl	8000a4c <HAL_InitTick>

  return HAL_OK;
 800144c:	2300      	movs	r3, #0
}
 800144e:	4618      	mov	r0, r3
 8001450:	3710      	adds	r7, #16
 8001452:	46bd      	mov	sp, r7
 8001454:	bd80      	pop	{r7, pc}
 8001456:	bf00      	nop
 8001458:	40023c00 	.word	0x40023c00
 800145c:	40023800 	.word	0x40023800
 8001460:	08001fd4 	.word	0x08001fd4
 8001464:	200003c4 	.word	0x200003c4
 8001468:	200003c8 	.word	0x200003c8

0800146c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800146c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001470:	b094      	sub	sp, #80	@ 0x50
 8001472:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001474:	2300      	movs	r3, #0
 8001476:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8001478:	2300      	movs	r3, #0
 800147a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 800147c:	2300      	movs	r3, #0
 800147e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8001480:	2300      	movs	r3, #0
 8001482:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001484:	4b79      	ldr	r3, [pc, #484]	@ (800166c <HAL_RCC_GetSysClockFreq+0x200>)
 8001486:	689b      	ldr	r3, [r3, #8]
 8001488:	f003 030c 	and.w	r3, r3, #12
 800148c:	2b08      	cmp	r3, #8
 800148e:	d00d      	beq.n	80014ac <HAL_RCC_GetSysClockFreq+0x40>
 8001490:	2b08      	cmp	r3, #8
 8001492:	f200 80e1 	bhi.w	8001658 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001496:	2b00      	cmp	r3, #0
 8001498:	d002      	beq.n	80014a0 <HAL_RCC_GetSysClockFreq+0x34>
 800149a:	2b04      	cmp	r3, #4
 800149c:	d003      	beq.n	80014a6 <HAL_RCC_GetSysClockFreq+0x3a>
 800149e:	e0db      	b.n	8001658 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80014a0:	4b73      	ldr	r3, [pc, #460]	@ (8001670 <HAL_RCC_GetSysClockFreq+0x204>)
 80014a2:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80014a4:	e0db      	b.n	800165e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80014a6:	4b73      	ldr	r3, [pc, #460]	@ (8001674 <HAL_RCC_GetSysClockFreq+0x208>)
 80014a8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80014aa:	e0d8      	b.n	800165e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80014ac:	4b6f      	ldr	r3, [pc, #444]	@ (800166c <HAL_RCC_GetSysClockFreq+0x200>)
 80014ae:	685b      	ldr	r3, [r3, #4]
 80014b0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80014b4:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80014b6:	4b6d      	ldr	r3, [pc, #436]	@ (800166c <HAL_RCC_GetSysClockFreq+0x200>)
 80014b8:	685b      	ldr	r3, [r3, #4]
 80014ba:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d063      	beq.n	800158a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80014c2:	4b6a      	ldr	r3, [pc, #424]	@ (800166c <HAL_RCC_GetSysClockFreq+0x200>)
 80014c4:	685b      	ldr	r3, [r3, #4]
 80014c6:	099b      	lsrs	r3, r3, #6
 80014c8:	2200      	movs	r2, #0
 80014ca:	63bb      	str	r3, [r7, #56]	@ 0x38
 80014cc:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80014ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80014d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80014d4:	633b      	str	r3, [r7, #48]	@ 0x30
 80014d6:	2300      	movs	r3, #0
 80014d8:	637b      	str	r3, [r7, #52]	@ 0x34
 80014da:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80014de:	4622      	mov	r2, r4
 80014e0:	462b      	mov	r3, r5
 80014e2:	f04f 0000 	mov.w	r0, #0
 80014e6:	f04f 0100 	mov.w	r1, #0
 80014ea:	0159      	lsls	r1, r3, #5
 80014ec:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80014f0:	0150      	lsls	r0, r2, #5
 80014f2:	4602      	mov	r2, r0
 80014f4:	460b      	mov	r3, r1
 80014f6:	4621      	mov	r1, r4
 80014f8:	1a51      	subs	r1, r2, r1
 80014fa:	6139      	str	r1, [r7, #16]
 80014fc:	4629      	mov	r1, r5
 80014fe:	eb63 0301 	sbc.w	r3, r3, r1
 8001502:	617b      	str	r3, [r7, #20]
 8001504:	f04f 0200 	mov.w	r2, #0
 8001508:	f04f 0300 	mov.w	r3, #0
 800150c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001510:	4659      	mov	r1, fp
 8001512:	018b      	lsls	r3, r1, #6
 8001514:	4651      	mov	r1, sl
 8001516:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800151a:	4651      	mov	r1, sl
 800151c:	018a      	lsls	r2, r1, #6
 800151e:	4651      	mov	r1, sl
 8001520:	ebb2 0801 	subs.w	r8, r2, r1
 8001524:	4659      	mov	r1, fp
 8001526:	eb63 0901 	sbc.w	r9, r3, r1
 800152a:	f04f 0200 	mov.w	r2, #0
 800152e:	f04f 0300 	mov.w	r3, #0
 8001532:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001536:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800153a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800153e:	4690      	mov	r8, r2
 8001540:	4699      	mov	r9, r3
 8001542:	4623      	mov	r3, r4
 8001544:	eb18 0303 	adds.w	r3, r8, r3
 8001548:	60bb      	str	r3, [r7, #8]
 800154a:	462b      	mov	r3, r5
 800154c:	eb49 0303 	adc.w	r3, r9, r3
 8001550:	60fb      	str	r3, [r7, #12]
 8001552:	f04f 0200 	mov.w	r2, #0
 8001556:	f04f 0300 	mov.w	r3, #0
 800155a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800155e:	4629      	mov	r1, r5
 8001560:	024b      	lsls	r3, r1, #9
 8001562:	4621      	mov	r1, r4
 8001564:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001568:	4621      	mov	r1, r4
 800156a:	024a      	lsls	r2, r1, #9
 800156c:	4610      	mov	r0, r2
 800156e:	4619      	mov	r1, r3
 8001570:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001572:	2200      	movs	r2, #0
 8001574:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001576:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001578:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800157c:	f7fe fe36 	bl	80001ec <__aeabi_uldivmod>
 8001580:	4602      	mov	r2, r0
 8001582:	460b      	mov	r3, r1
 8001584:	4613      	mov	r3, r2
 8001586:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001588:	e058      	b.n	800163c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800158a:	4b38      	ldr	r3, [pc, #224]	@ (800166c <HAL_RCC_GetSysClockFreq+0x200>)
 800158c:	685b      	ldr	r3, [r3, #4]
 800158e:	099b      	lsrs	r3, r3, #6
 8001590:	2200      	movs	r2, #0
 8001592:	4618      	mov	r0, r3
 8001594:	4611      	mov	r1, r2
 8001596:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800159a:	623b      	str	r3, [r7, #32]
 800159c:	2300      	movs	r3, #0
 800159e:	627b      	str	r3, [r7, #36]	@ 0x24
 80015a0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80015a4:	4642      	mov	r2, r8
 80015a6:	464b      	mov	r3, r9
 80015a8:	f04f 0000 	mov.w	r0, #0
 80015ac:	f04f 0100 	mov.w	r1, #0
 80015b0:	0159      	lsls	r1, r3, #5
 80015b2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80015b6:	0150      	lsls	r0, r2, #5
 80015b8:	4602      	mov	r2, r0
 80015ba:	460b      	mov	r3, r1
 80015bc:	4641      	mov	r1, r8
 80015be:	ebb2 0a01 	subs.w	sl, r2, r1
 80015c2:	4649      	mov	r1, r9
 80015c4:	eb63 0b01 	sbc.w	fp, r3, r1
 80015c8:	f04f 0200 	mov.w	r2, #0
 80015cc:	f04f 0300 	mov.w	r3, #0
 80015d0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80015d4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80015d8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80015dc:	ebb2 040a 	subs.w	r4, r2, sl
 80015e0:	eb63 050b 	sbc.w	r5, r3, fp
 80015e4:	f04f 0200 	mov.w	r2, #0
 80015e8:	f04f 0300 	mov.w	r3, #0
 80015ec:	00eb      	lsls	r3, r5, #3
 80015ee:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80015f2:	00e2      	lsls	r2, r4, #3
 80015f4:	4614      	mov	r4, r2
 80015f6:	461d      	mov	r5, r3
 80015f8:	4643      	mov	r3, r8
 80015fa:	18e3      	adds	r3, r4, r3
 80015fc:	603b      	str	r3, [r7, #0]
 80015fe:	464b      	mov	r3, r9
 8001600:	eb45 0303 	adc.w	r3, r5, r3
 8001604:	607b      	str	r3, [r7, #4]
 8001606:	f04f 0200 	mov.w	r2, #0
 800160a:	f04f 0300 	mov.w	r3, #0
 800160e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001612:	4629      	mov	r1, r5
 8001614:	028b      	lsls	r3, r1, #10
 8001616:	4621      	mov	r1, r4
 8001618:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800161c:	4621      	mov	r1, r4
 800161e:	028a      	lsls	r2, r1, #10
 8001620:	4610      	mov	r0, r2
 8001622:	4619      	mov	r1, r3
 8001624:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001626:	2200      	movs	r2, #0
 8001628:	61bb      	str	r3, [r7, #24]
 800162a:	61fa      	str	r2, [r7, #28]
 800162c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001630:	f7fe fddc 	bl	80001ec <__aeabi_uldivmod>
 8001634:	4602      	mov	r2, r0
 8001636:	460b      	mov	r3, r1
 8001638:	4613      	mov	r3, r2
 800163a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 800163c:	4b0b      	ldr	r3, [pc, #44]	@ (800166c <HAL_RCC_GetSysClockFreq+0x200>)
 800163e:	685b      	ldr	r3, [r3, #4]
 8001640:	0c1b      	lsrs	r3, r3, #16
 8001642:	f003 0303 	and.w	r3, r3, #3
 8001646:	3301      	adds	r3, #1
 8001648:	005b      	lsls	r3, r3, #1
 800164a:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 800164c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800164e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001650:	fbb2 f3f3 	udiv	r3, r2, r3
 8001654:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001656:	e002      	b.n	800165e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001658:	4b05      	ldr	r3, [pc, #20]	@ (8001670 <HAL_RCC_GetSysClockFreq+0x204>)
 800165a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800165c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800165e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8001660:	4618      	mov	r0, r3
 8001662:	3750      	adds	r7, #80	@ 0x50
 8001664:	46bd      	mov	sp, r7
 8001666:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800166a:	bf00      	nop
 800166c:	40023800 	.word	0x40023800
 8001670:	00f42400 	.word	0x00f42400
 8001674:	007a1200 	.word	0x007a1200

08001678 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	b082      	sub	sp, #8
 800167c:	af00      	add	r7, sp, #0
 800167e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	2b00      	cmp	r3, #0
 8001684:	d101      	bne.n	800168a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001686:	2301      	movs	r3, #1
 8001688:	e041      	b.n	800170e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001690:	b2db      	uxtb	r3, r3
 8001692:	2b00      	cmp	r3, #0
 8001694:	d106      	bne.n	80016a4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	2200      	movs	r2, #0
 800169a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800169e:	6878      	ldr	r0, [r7, #4]
 80016a0:	f7ff f914 	bl	80008cc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	2202      	movs	r2, #2
 80016a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681a      	ldr	r2, [r3, #0]
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	3304      	adds	r3, #4
 80016b4:	4619      	mov	r1, r3
 80016b6:	4610      	mov	r0, r2
 80016b8:	f000 fa7e 	bl	8001bb8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	2201      	movs	r2, #1
 80016c0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	2201      	movs	r2, #1
 80016c8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	2201      	movs	r2, #1
 80016d0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	2201      	movs	r2, #1
 80016d8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	2201      	movs	r2, #1
 80016e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	2201      	movs	r2, #1
 80016e8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	2201      	movs	r2, #1
 80016f0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	2201      	movs	r2, #1
 80016f8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	2201      	movs	r2, #1
 8001700:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	2201      	movs	r2, #1
 8001708:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800170c:	2300      	movs	r3, #0
}
 800170e:	4618      	mov	r0, r3
 8001710:	3708      	adds	r7, #8
 8001712:	46bd      	mov	sp, r7
 8001714:	bd80      	pop	{r7, pc}
	...

08001718 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001718:	b480      	push	{r7}
 800171a:	b085      	sub	sp, #20
 800171c:	af00      	add	r7, sp, #0
 800171e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001726:	b2db      	uxtb	r3, r3
 8001728:	2b01      	cmp	r3, #1
 800172a:	d001      	beq.n	8001730 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800172c:	2301      	movs	r3, #1
 800172e:	e04e      	b.n	80017ce <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	2202      	movs	r2, #2
 8001734:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	68da      	ldr	r2, [r3, #12]
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	f042 0201 	orr.w	r2, r2, #1
 8001746:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	4a23      	ldr	r2, [pc, #140]	@ (80017dc <HAL_TIM_Base_Start_IT+0xc4>)
 800174e:	4293      	cmp	r3, r2
 8001750:	d022      	beq.n	8001798 <HAL_TIM_Base_Start_IT+0x80>
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800175a:	d01d      	beq.n	8001798 <HAL_TIM_Base_Start_IT+0x80>
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	4a1f      	ldr	r2, [pc, #124]	@ (80017e0 <HAL_TIM_Base_Start_IT+0xc8>)
 8001762:	4293      	cmp	r3, r2
 8001764:	d018      	beq.n	8001798 <HAL_TIM_Base_Start_IT+0x80>
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	4a1e      	ldr	r2, [pc, #120]	@ (80017e4 <HAL_TIM_Base_Start_IT+0xcc>)
 800176c:	4293      	cmp	r3, r2
 800176e:	d013      	beq.n	8001798 <HAL_TIM_Base_Start_IT+0x80>
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	4a1c      	ldr	r2, [pc, #112]	@ (80017e8 <HAL_TIM_Base_Start_IT+0xd0>)
 8001776:	4293      	cmp	r3, r2
 8001778:	d00e      	beq.n	8001798 <HAL_TIM_Base_Start_IT+0x80>
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	4a1b      	ldr	r2, [pc, #108]	@ (80017ec <HAL_TIM_Base_Start_IT+0xd4>)
 8001780:	4293      	cmp	r3, r2
 8001782:	d009      	beq.n	8001798 <HAL_TIM_Base_Start_IT+0x80>
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	4a19      	ldr	r2, [pc, #100]	@ (80017f0 <HAL_TIM_Base_Start_IT+0xd8>)
 800178a:	4293      	cmp	r3, r2
 800178c:	d004      	beq.n	8001798 <HAL_TIM_Base_Start_IT+0x80>
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	4a18      	ldr	r2, [pc, #96]	@ (80017f4 <HAL_TIM_Base_Start_IT+0xdc>)
 8001794:	4293      	cmp	r3, r2
 8001796:	d111      	bne.n	80017bc <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	689b      	ldr	r3, [r3, #8]
 800179e:	f003 0307 	and.w	r3, r3, #7
 80017a2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	2b06      	cmp	r3, #6
 80017a8:	d010      	beq.n	80017cc <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	681a      	ldr	r2, [r3, #0]
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	f042 0201 	orr.w	r2, r2, #1
 80017b8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80017ba:	e007      	b.n	80017cc <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	681a      	ldr	r2, [r3, #0]
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	f042 0201 	orr.w	r2, r2, #1
 80017ca:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80017cc:	2300      	movs	r3, #0
}
 80017ce:	4618      	mov	r0, r3
 80017d0:	3714      	adds	r7, #20
 80017d2:	46bd      	mov	sp, r7
 80017d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d8:	4770      	bx	lr
 80017da:	bf00      	nop
 80017dc:	40010000 	.word	0x40010000
 80017e0:	40000400 	.word	0x40000400
 80017e4:	40000800 	.word	0x40000800
 80017e8:	40000c00 	.word	0x40000c00
 80017ec:	40010400 	.word	0x40010400
 80017f0:	40014000 	.word	0x40014000
 80017f4:	40001800 	.word	0x40001800

080017f8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	b084      	sub	sp, #16
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	68db      	ldr	r3, [r3, #12]
 8001806:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	691b      	ldr	r3, [r3, #16]
 800180e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8001810:	68bb      	ldr	r3, [r7, #8]
 8001812:	f003 0302 	and.w	r3, r3, #2
 8001816:	2b00      	cmp	r3, #0
 8001818:	d020      	beq.n	800185c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	f003 0302 	and.w	r3, r3, #2
 8001820:	2b00      	cmp	r3, #0
 8001822:	d01b      	beq.n	800185c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	f06f 0202 	mvn.w	r2, #2
 800182c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	2201      	movs	r2, #1
 8001832:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	699b      	ldr	r3, [r3, #24]
 800183a:	f003 0303 	and.w	r3, r3, #3
 800183e:	2b00      	cmp	r3, #0
 8001840:	d003      	beq.n	800184a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001842:	6878      	ldr	r0, [r7, #4]
 8001844:	f000 f999 	bl	8001b7a <HAL_TIM_IC_CaptureCallback>
 8001848:	e005      	b.n	8001856 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800184a:	6878      	ldr	r0, [r7, #4]
 800184c:	f000 f98b 	bl	8001b66 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001850:	6878      	ldr	r0, [r7, #4]
 8001852:	f000 f99c 	bl	8001b8e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	2200      	movs	r2, #0
 800185a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800185c:	68bb      	ldr	r3, [r7, #8]
 800185e:	f003 0304 	and.w	r3, r3, #4
 8001862:	2b00      	cmp	r3, #0
 8001864:	d020      	beq.n	80018a8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	f003 0304 	and.w	r3, r3, #4
 800186c:	2b00      	cmp	r3, #0
 800186e:	d01b      	beq.n	80018a8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	f06f 0204 	mvn.w	r2, #4
 8001878:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	2202      	movs	r2, #2
 800187e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	699b      	ldr	r3, [r3, #24]
 8001886:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800188a:	2b00      	cmp	r3, #0
 800188c:	d003      	beq.n	8001896 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800188e:	6878      	ldr	r0, [r7, #4]
 8001890:	f000 f973 	bl	8001b7a <HAL_TIM_IC_CaptureCallback>
 8001894:	e005      	b.n	80018a2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001896:	6878      	ldr	r0, [r7, #4]
 8001898:	f000 f965 	bl	8001b66 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800189c:	6878      	ldr	r0, [r7, #4]
 800189e:	f000 f976 	bl	8001b8e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	2200      	movs	r2, #0
 80018a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80018a8:	68bb      	ldr	r3, [r7, #8]
 80018aa:	f003 0308 	and.w	r3, r3, #8
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d020      	beq.n	80018f4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	f003 0308 	and.w	r3, r3, #8
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d01b      	beq.n	80018f4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	f06f 0208 	mvn.w	r2, #8
 80018c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	2204      	movs	r2, #4
 80018ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	69db      	ldr	r3, [r3, #28]
 80018d2:	f003 0303 	and.w	r3, r3, #3
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d003      	beq.n	80018e2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80018da:	6878      	ldr	r0, [r7, #4]
 80018dc:	f000 f94d 	bl	8001b7a <HAL_TIM_IC_CaptureCallback>
 80018e0:	e005      	b.n	80018ee <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80018e2:	6878      	ldr	r0, [r7, #4]
 80018e4:	f000 f93f 	bl	8001b66 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80018e8:	6878      	ldr	r0, [r7, #4]
 80018ea:	f000 f950 	bl	8001b8e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	2200      	movs	r2, #0
 80018f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80018f4:	68bb      	ldr	r3, [r7, #8]
 80018f6:	f003 0310 	and.w	r3, r3, #16
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d020      	beq.n	8001940 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	f003 0310 	and.w	r3, r3, #16
 8001904:	2b00      	cmp	r3, #0
 8001906:	d01b      	beq.n	8001940 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	f06f 0210 	mvn.w	r2, #16
 8001910:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	2208      	movs	r2, #8
 8001916:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	69db      	ldr	r3, [r3, #28]
 800191e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001922:	2b00      	cmp	r3, #0
 8001924:	d003      	beq.n	800192e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001926:	6878      	ldr	r0, [r7, #4]
 8001928:	f000 f927 	bl	8001b7a <HAL_TIM_IC_CaptureCallback>
 800192c:	e005      	b.n	800193a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800192e:	6878      	ldr	r0, [r7, #4]
 8001930:	f000 f919 	bl	8001b66 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001934:	6878      	ldr	r0, [r7, #4]
 8001936:	f000 f92a 	bl	8001b8e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	2200      	movs	r2, #0
 800193e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8001940:	68bb      	ldr	r3, [r7, #8]
 8001942:	f003 0301 	and.w	r3, r3, #1
 8001946:	2b00      	cmp	r3, #0
 8001948:	d00c      	beq.n	8001964 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	f003 0301 	and.w	r3, r3, #1
 8001950:	2b00      	cmp	r3, #0
 8001952:	d007      	beq.n	8001964 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	f06f 0201 	mvn.w	r2, #1
 800195c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800195e:	6878      	ldr	r0, [r7, #4]
 8001960:	f7fe ff16 	bl	8000790 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8001964:	68bb      	ldr	r3, [r7, #8]
 8001966:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800196a:	2b00      	cmp	r3, #0
 800196c:	d00c      	beq.n	8001988 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001974:	2b00      	cmp	r3, #0
 8001976:	d007      	beq.n	8001988 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8001980:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001982:	6878      	ldr	r0, [r7, #4]
 8001984:	f000 fae4 	bl	8001f50 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8001988:	68bb      	ldr	r3, [r7, #8]
 800198a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800198e:	2b00      	cmp	r3, #0
 8001990:	d00c      	beq.n	80019ac <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001998:	2b00      	cmp	r3, #0
 800199a:	d007      	beq.n	80019ac <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80019a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80019a6:	6878      	ldr	r0, [r7, #4]
 80019a8:	f000 f8fb 	bl	8001ba2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80019ac:	68bb      	ldr	r3, [r7, #8]
 80019ae:	f003 0320 	and.w	r3, r3, #32
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d00c      	beq.n	80019d0 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	f003 0320 	and.w	r3, r3, #32
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d007      	beq.n	80019d0 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	f06f 0220 	mvn.w	r2, #32
 80019c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80019ca:	6878      	ldr	r0, [r7, #4]
 80019cc:	f000 fab6 	bl	8001f3c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80019d0:	bf00      	nop
 80019d2:	3710      	adds	r7, #16
 80019d4:	46bd      	mov	sp, r7
 80019d6:	bd80      	pop	{r7, pc}

080019d8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	b084      	sub	sp, #16
 80019dc:	af00      	add	r7, sp, #0
 80019de:	6078      	str	r0, [r7, #4]
 80019e0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80019e2:	2300      	movs	r3, #0
 80019e4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80019ec:	2b01      	cmp	r3, #1
 80019ee:	d101      	bne.n	80019f4 <HAL_TIM_ConfigClockSource+0x1c>
 80019f0:	2302      	movs	r3, #2
 80019f2:	e0b4      	b.n	8001b5e <HAL_TIM_ConfigClockSource+0x186>
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	2201      	movs	r2, #1
 80019f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	2202      	movs	r2, #2
 8001a00:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	689b      	ldr	r3, [r3, #8]
 8001a0a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8001a0c:	68bb      	ldr	r3, [r7, #8]
 8001a0e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8001a12:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001a14:	68bb      	ldr	r3, [r7, #8]
 8001a16:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8001a1a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	68ba      	ldr	r2, [r7, #8]
 8001a22:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8001a24:	683b      	ldr	r3, [r7, #0]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001a2c:	d03e      	beq.n	8001aac <HAL_TIM_ConfigClockSource+0xd4>
 8001a2e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001a32:	f200 8087 	bhi.w	8001b44 <HAL_TIM_ConfigClockSource+0x16c>
 8001a36:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001a3a:	f000 8086 	beq.w	8001b4a <HAL_TIM_ConfigClockSource+0x172>
 8001a3e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001a42:	d87f      	bhi.n	8001b44 <HAL_TIM_ConfigClockSource+0x16c>
 8001a44:	2b70      	cmp	r3, #112	@ 0x70
 8001a46:	d01a      	beq.n	8001a7e <HAL_TIM_ConfigClockSource+0xa6>
 8001a48:	2b70      	cmp	r3, #112	@ 0x70
 8001a4a:	d87b      	bhi.n	8001b44 <HAL_TIM_ConfigClockSource+0x16c>
 8001a4c:	2b60      	cmp	r3, #96	@ 0x60
 8001a4e:	d050      	beq.n	8001af2 <HAL_TIM_ConfigClockSource+0x11a>
 8001a50:	2b60      	cmp	r3, #96	@ 0x60
 8001a52:	d877      	bhi.n	8001b44 <HAL_TIM_ConfigClockSource+0x16c>
 8001a54:	2b50      	cmp	r3, #80	@ 0x50
 8001a56:	d03c      	beq.n	8001ad2 <HAL_TIM_ConfigClockSource+0xfa>
 8001a58:	2b50      	cmp	r3, #80	@ 0x50
 8001a5a:	d873      	bhi.n	8001b44 <HAL_TIM_ConfigClockSource+0x16c>
 8001a5c:	2b40      	cmp	r3, #64	@ 0x40
 8001a5e:	d058      	beq.n	8001b12 <HAL_TIM_ConfigClockSource+0x13a>
 8001a60:	2b40      	cmp	r3, #64	@ 0x40
 8001a62:	d86f      	bhi.n	8001b44 <HAL_TIM_ConfigClockSource+0x16c>
 8001a64:	2b30      	cmp	r3, #48	@ 0x30
 8001a66:	d064      	beq.n	8001b32 <HAL_TIM_ConfigClockSource+0x15a>
 8001a68:	2b30      	cmp	r3, #48	@ 0x30
 8001a6a:	d86b      	bhi.n	8001b44 <HAL_TIM_ConfigClockSource+0x16c>
 8001a6c:	2b20      	cmp	r3, #32
 8001a6e:	d060      	beq.n	8001b32 <HAL_TIM_ConfigClockSource+0x15a>
 8001a70:	2b20      	cmp	r3, #32
 8001a72:	d867      	bhi.n	8001b44 <HAL_TIM_ConfigClockSource+0x16c>
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d05c      	beq.n	8001b32 <HAL_TIM_ConfigClockSource+0x15a>
 8001a78:	2b10      	cmp	r3, #16
 8001a7a:	d05a      	beq.n	8001b32 <HAL_TIM_ConfigClockSource+0x15a>
 8001a7c:	e062      	b.n	8001b44 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8001a82:	683b      	ldr	r3, [r7, #0]
 8001a84:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8001a86:	683b      	ldr	r3, [r7, #0]
 8001a88:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8001a8a:	683b      	ldr	r3, [r7, #0]
 8001a8c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8001a8e:	f000 f9b9 	bl	8001e04 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	689b      	ldr	r3, [r3, #8]
 8001a98:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001a9a:	68bb      	ldr	r3, [r7, #8]
 8001a9c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8001aa0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	68ba      	ldr	r2, [r7, #8]
 8001aa8:	609a      	str	r2, [r3, #8]
      break;
 8001aaa:	e04f      	b.n	8001b4c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8001ab0:	683b      	ldr	r3, [r7, #0]
 8001ab2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8001ab4:	683b      	ldr	r3, [r7, #0]
 8001ab6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8001ab8:	683b      	ldr	r3, [r7, #0]
 8001aba:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8001abc:	f000 f9a2 	bl	8001e04 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	689a      	ldr	r2, [r3, #8]
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8001ace:	609a      	str	r2, [r3, #8]
      break;
 8001ad0:	e03c      	b.n	8001b4c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8001ad6:	683b      	ldr	r3, [r7, #0]
 8001ad8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8001ada:	683b      	ldr	r3, [r7, #0]
 8001adc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001ade:	461a      	mov	r2, r3
 8001ae0:	f000 f916 	bl	8001d10 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	2150      	movs	r1, #80	@ 0x50
 8001aea:	4618      	mov	r0, r3
 8001aec:	f000 f96f 	bl	8001dce <TIM_ITRx_SetConfig>
      break;
 8001af0:	e02c      	b.n	8001b4c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8001af6:	683b      	ldr	r3, [r7, #0]
 8001af8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8001afa:	683b      	ldr	r3, [r7, #0]
 8001afc:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8001afe:	461a      	mov	r2, r3
 8001b00:	f000 f935 	bl	8001d6e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	2160      	movs	r1, #96	@ 0x60
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	f000 f95f 	bl	8001dce <TIM_ITRx_SetConfig>
      break;
 8001b10:	e01c      	b.n	8001b4c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8001b16:	683b      	ldr	r3, [r7, #0]
 8001b18:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8001b1a:	683b      	ldr	r3, [r7, #0]
 8001b1c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001b1e:	461a      	mov	r2, r3
 8001b20:	f000 f8f6 	bl	8001d10 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	2140      	movs	r1, #64	@ 0x40
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	f000 f94f 	bl	8001dce <TIM_ITRx_SetConfig>
      break;
 8001b30:	e00c      	b.n	8001b4c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681a      	ldr	r2, [r3, #0]
 8001b36:	683b      	ldr	r3, [r7, #0]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	4619      	mov	r1, r3
 8001b3c:	4610      	mov	r0, r2
 8001b3e:	f000 f946 	bl	8001dce <TIM_ITRx_SetConfig>
      break;
 8001b42:	e003      	b.n	8001b4c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8001b44:	2301      	movs	r3, #1
 8001b46:	73fb      	strb	r3, [r7, #15]
      break;
 8001b48:	e000      	b.n	8001b4c <HAL_TIM_ConfigClockSource+0x174>
      break;
 8001b4a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	2201      	movs	r2, #1
 8001b50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	2200      	movs	r2, #0
 8001b58:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8001b5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b5e:	4618      	mov	r0, r3
 8001b60:	3710      	adds	r7, #16
 8001b62:	46bd      	mov	sp, r7
 8001b64:	bd80      	pop	{r7, pc}

08001b66 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001b66:	b480      	push	{r7}
 8001b68:	b083      	sub	sp, #12
 8001b6a:	af00      	add	r7, sp, #0
 8001b6c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001b6e:	bf00      	nop
 8001b70:	370c      	adds	r7, #12
 8001b72:	46bd      	mov	sp, r7
 8001b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b78:	4770      	bx	lr

08001b7a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001b7a:	b480      	push	{r7}
 8001b7c:	b083      	sub	sp, #12
 8001b7e:	af00      	add	r7, sp, #0
 8001b80:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001b82:	bf00      	nop
 8001b84:	370c      	adds	r7, #12
 8001b86:	46bd      	mov	sp, r7
 8001b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8c:	4770      	bx	lr

08001b8e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001b8e:	b480      	push	{r7}
 8001b90:	b083      	sub	sp, #12
 8001b92:	af00      	add	r7, sp, #0
 8001b94:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001b96:	bf00      	nop
 8001b98:	370c      	adds	r7, #12
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba0:	4770      	bx	lr

08001ba2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001ba2:	b480      	push	{r7}
 8001ba4:	b083      	sub	sp, #12
 8001ba6:	af00      	add	r7, sp, #0
 8001ba8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001baa:	bf00      	nop
 8001bac:	370c      	adds	r7, #12
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb4:	4770      	bx	lr
	...

08001bb8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001bb8:	b480      	push	{r7}
 8001bba:	b085      	sub	sp, #20
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	6078      	str	r0, [r7, #4]
 8001bc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	4a46      	ldr	r2, [pc, #280]	@ (8001ce4 <TIM_Base_SetConfig+0x12c>)
 8001bcc:	4293      	cmp	r3, r2
 8001bce:	d013      	beq.n	8001bf8 <TIM_Base_SetConfig+0x40>
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001bd6:	d00f      	beq.n	8001bf8 <TIM_Base_SetConfig+0x40>
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	4a43      	ldr	r2, [pc, #268]	@ (8001ce8 <TIM_Base_SetConfig+0x130>)
 8001bdc:	4293      	cmp	r3, r2
 8001bde:	d00b      	beq.n	8001bf8 <TIM_Base_SetConfig+0x40>
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	4a42      	ldr	r2, [pc, #264]	@ (8001cec <TIM_Base_SetConfig+0x134>)
 8001be4:	4293      	cmp	r3, r2
 8001be6:	d007      	beq.n	8001bf8 <TIM_Base_SetConfig+0x40>
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	4a41      	ldr	r2, [pc, #260]	@ (8001cf0 <TIM_Base_SetConfig+0x138>)
 8001bec:	4293      	cmp	r3, r2
 8001bee:	d003      	beq.n	8001bf8 <TIM_Base_SetConfig+0x40>
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	4a40      	ldr	r2, [pc, #256]	@ (8001cf4 <TIM_Base_SetConfig+0x13c>)
 8001bf4:	4293      	cmp	r3, r2
 8001bf6:	d108      	bne.n	8001c0a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001bfe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001c00:	683b      	ldr	r3, [r7, #0]
 8001c02:	685b      	ldr	r3, [r3, #4]
 8001c04:	68fa      	ldr	r2, [r7, #12]
 8001c06:	4313      	orrs	r3, r2
 8001c08:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	4a35      	ldr	r2, [pc, #212]	@ (8001ce4 <TIM_Base_SetConfig+0x12c>)
 8001c0e:	4293      	cmp	r3, r2
 8001c10:	d02b      	beq.n	8001c6a <TIM_Base_SetConfig+0xb2>
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001c18:	d027      	beq.n	8001c6a <TIM_Base_SetConfig+0xb2>
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	4a32      	ldr	r2, [pc, #200]	@ (8001ce8 <TIM_Base_SetConfig+0x130>)
 8001c1e:	4293      	cmp	r3, r2
 8001c20:	d023      	beq.n	8001c6a <TIM_Base_SetConfig+0xb2>
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	4a31      	ldr	r2, [pc, #196]	@ (8001cec <TIM_Base_SetConfig+0x134>)
 8001c26:	4293      	cmp	r3, r2
 8001c28:	d01f      	beq.n	8001c6a <TIM_Base_SetConfig+0xb2>
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	4a30      	ldr	r2, [pc, #192]	@ (8001cf0 <TIM_Base_SetConfig+0x138>)
 8001c2e:	4293      	cmp	r3, r2
 8001c30:	d01b      	beq.n	8001c6a <TIM_Base_SetConfig+0xb2>
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	4a2f      	ldr	r2, [pc, #188]	@ (8001cf4 <TIM_Base_SetConfig+0x13c>)
 8001c36:	4293      	cmp	r3, r2
 8001c38:	d017      	beq.n	8001c6a <TIM_Base_SetConfig+0xb2>
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	4a2e      	ldr	r2, [pc, #184]	@ (8001cf8 <TIM_Base_SetConfig+0x140>)
 8001c3e:	4293      	cmp	r3, r2
 8001c40:	d013      	beq.n	8001c6a <TIM_Base_SetConfig+0xb2>
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	4a2d      	ldr	r2, [pc, #180]	@ (8001cfc <TIM_Base_SetConfig+0x144>)
 8001c46:	4293      	cmp	r3, r2
 8001c48:	d00f      	beq.n	8001c6a <TIM_Base_SetConfig+0xb2>
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	4a2c      	ldr	r2, [pc, #176]	@ (8001d00 <TIM_Base_SetConfig+0x148>)
 8001c4e:	4293      	cmp	r3, r2
 8001c50:	d00b      	beq.n	8001c6a <TIM_Base_SetConfig+0xb2>
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	4a2b      	ldr	r2, [pc, #172]	@ (8001d04 <TIM_Base_SetConfig+0x14c>)
 8001c56:	4293      	cmp	r3, r2
 8001c58:	d007      	beq.n	8001c6a <TIM_Base_SetConfig+0xb2>
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	4a2a      	ldr	r2, [pc, #168]	@ (8001d08 <TIM_Base_SetConfig+0x150>)
 8001c5e:	4293      	cmp	r3, r2
 8001c60:	d003      	beq.n	8001c6a <TIM_Base_SetConfig+0xb2>
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	4a29      	ldr	r2, [pc, #164]	@ (8001d0c <TIM_Base_SetConfig+0x154>)
 8001c66:	4293      	cmp	r3, r2
 8001c68:	d108      	bne.n	8001c7c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001c70:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001c72:	683b      	ldr	r3, [r7, #0]
 8001c74:	68db      	ldr	r3, [r3, #12]
 8001c76:	68fa      	ldr	r2, [r7, #12]
 8001c78:	4313      	orrs	r3, r2
 8001c7a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8001c82:	683b      	ldr	r3, [r7, #0]
 8001c84:	695b      	ldr	r3, [r3, #20]
 8001c86:	4313      	orrs	r3, r2
 8001c88:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	68fa      	ldr	r2, [r7, #12]
 8001c8e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001c90:	683b      	ldr	r3, [r7, #0]
 8001c92:	689a      	ldr	r2, [r3, #8]
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001c98:	683b      	ldr	r3, [r7, #0]
 8001c9a:	681a      	ldr	r2, [r3, #0]
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	4a10      	ldr	r2, [pc, #64]	@ (8001ce4 <TIM_Base_SetConfig+0x12c>)
 8001ca4:	4293      	cmp	r3, r2
 8001ca6:	d003      	beq.n	8001cb0 <TIM_Base_SetConfig+0xf8>
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	4a12      	ldr	r2, [pc, #72]	@ (8001cf4 <TIM_Base_SetConfig+0x13c>)
 8001cac:	4293      	cmp	r3, r2
 8001cae:	d103      	bne.n	8001cb8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001cb0:	683b      	ldr	r3, [r7, #0]
 8001cb2:	691a      	ldr	r2, [r3, #16]
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	2201      	movs	r2, #1
 8001cbc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	691b      	ldr	r3, [r3, #16]
 8001cc2:	f003 0301 	and.w	r3, r3, #1
 8001cc6:	2b01      	cmp	r3, #1
 8001cc8:	d105      	bne.n	8001cd6 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	691b      	ldr	r3, [r3, #16]
 8001cce:	f023 0201 	bic.w	r2, r3, #1
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	611a      	str	r2, [r3, #16]
  }
}
 8001cd6:	bf00      	nop
 8001cd8:	3714      	adds	r7, #20
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce0:	4770      	bx	lr
 8001ce2:	bf00      	nop
 8001ce4:	40010000 	.word	0x40010000
 8001ce8:	40000400 	.word	0x40000400
 8001cec:	40000800 	.word	0x40000800
 8001cf0:	40000c00 	.word	0x40000c00
 8001cf4:	40010400 	.word	0x40010400
 8001cf8:	40014000 	.word	0x40014000
 8001cfc:	40014400 	.word	0x40014400
 8001d00:	40014800 	.word	0x40014800
 8001d04:	40001800 	.word	0x40001800
 8001d08:	40001c00 	.word	0x40001c00
 8001d0c:	40002000 	.word	0x40002000

08001d10 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8001d10:	b480      	push	{r7}
 8001d12:	b087      	sub	sp, #28
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	60f8      	str	r0, [r7, #12]
 8001d18:	60b9      	str	r1, [r7, #8]
 8001d1a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	6a1b      	ldr	r3, [r3, #32]
 8001d20:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	6a1b      	ldr	r3, [r3, #32]
 8001d26:	f023 0201 	bic.w	r2, r3, #1
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	699b      	ldr	r3, [r3, #24]
 8001d32:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001d34:	693b      	ldr	r3, [r7, #16]
 8001d36:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001d3a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	011b      	lsls	r3, r3, #4
 8001d40:	693a      	ldr	r2, [r7, #16]
 8001d42:	4313      	orrs	r3, r2
 8001d44:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001d46:	697b      	ldr	r3, [r7, #20]
 8001d48:	f023 030a 	bic.w	r3, r3, #10
 8001d4c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8001d4e:	697a      	ldr	r2, [r7, #20]
 8001d50:	68bb      	ldr	r3, [r7, #8]
 8001d52:	4313      	orrs	r3, r2
 8001d54:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	693a      	ldr	r2, [r7, #16]
 8001d5a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	697a      	ldr	r2, [r7, #20]
 8001d60:	621a      	str	r2, [r3, #32]
}
 8001d62:	bf00      	nop
 8001d64:	371c      	adds	r7, #28
 8001d66:	46bd      	mov	sp, r7
 8001d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6c:	4770      	bx	lr

08001d6e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8001d6e:	b480      	push	{r7}
 8001d70:	b087      	sub	sp, #28
 8001d72:	af00      	add	r7, sp, #0
 8001d74:	60f8      	str	r0, [r7, #12]
 8001d76:	60b9      	str	r1, [r7, #8]
 8001d78:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	6a1b      	ldr	r3, [r3, #32]
 8001d7e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	6a1b      	ldr	r3, [r3, #32]
 8001d84:	f023 0210 	bic.w	r2, r3, #16
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	699b      	ldr	r3, [r3, #24]
 8001d90:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8001d92:	693b      	ldr	r3, [r7, #16]
 8001d94:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8001d98:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	031b      	lsls	r3, r3, #12
 8001d9e:	693a      	ldr	r2, [r7, #16]
 8001da0:	4313      	orrs	r3, r2
 8001da2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8001da4:	697b      	ldr	r3, [r7, #20]
 8001da6:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8001daa:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8001dac:	68bb      	ldr	r3, [r7, #8]
 8001dae:	011b      	lsls	r3, r3, #4
 8001db0:	697a      	ldr	r2, [r7, #20]
 8001db2:	4313      	orrs	r3, r2
 8001db4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	693a      	ldr	r2, [r7, #16]
 8001dba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	697a      	ldr	r2, [r7, #20]
 8001dc0:	621a      	str	r2, [r3, #32]
}
 8001dc2:	bf00      	nop
 8001dc4:	371c      	adds	r7, #28
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dcc:	4770      	bx	lr

08001dce <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8001dce:	b480      	push	{r7}
 8001dd0:	b085      	sub	sp, #20
 8001dd2:	af00      	add	r7, sp, #0
 8001dd4:	6078      	str	r0, [r7, #4]
 8001dd6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	689b      	ldr	r3, [r3, #8]
 8001ddc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001de4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8001de6:	683a      	ldr	r2, [r7, #0]
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	4313      	orrs	r3, r2
 8001dec:	f043 0307 	orr.w	r3, r3, #7
 8001df0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	68fa      	ldr	r2, [r7, #12]
 8001df6:	609a      	str	r2, [r3, #8]
}
 8001df8:	bf00      	nop
 8001dfa:	3714      	adds	r7, #20
 8001dfc:	46bd      	mov	sp, r7
 8001dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e02:	4770      	bx	lr

08001e04 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8001e04:	b480      	push	{r7}
 8001e06:	b087      	sub	sp, #28
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	60f8      	str	r0, [r7, #12]
 8001e0c:	60b9      	str	r1, [r7, #8]
 8001e0e:	607a      	str	r2, [r7, #4]
 8001e10:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	689b      	ldr	r3, [r3, #8]
 8001e16:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001e18:	697b      	ldr	r3, [r7, #20]
 8001e1a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8001e1e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001e20:	683b      	ldr	r3, [r7, #0]
 8001e22:	021a      	lsls	r2, r3, #8
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	431a      	orrs	r2, r3
 8001e28:	68bb      	ldr	r3, [r7, #8]
 8001e2a:	4313      	orrs	r3, r2
 8001e2c:	697a      	ldr	r2, [r7, #20]
 8001e2e:	4313      	orrs	r3, r2
 8001e30:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	697a      	ldr	r2, [r7, #20]
 8001e36:	609a      	str	r2, [r3, #8]
}
 8001e38:	bf00      	nop
 8001e3a:	371c      	adds	r7, #28
 8001e3c:	46bd      	mov	sp, r7
 8001e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e42:	4770      	bx	lr

08001e44 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8001e44:	b480      	push	{r7}
 8001e46:	b085      	sub	sp, #20
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	6078      	str	r0, [r7, #4]
 8001e4c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001e54:	2b01      	cmp	r3, #1
 8001e56:	d101      	bne.n	8001e5c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8001e58:	2302      	movs	r3, #2
 8001e5a:	e05a      	b.n	8001f12 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	2201      	movs	r2, #1
 8001e60:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	2202      	movs	r2, #2
 8001e68:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	685b      	ldr	r3, [r3, #4]
 8001e72:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	689b      	ldr	r3, [r3, #8]
 8001e7a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001e82:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8001e84:	683b      	ldr	r3, [r7, #0]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	68fa      	ldr	r2, [r7, #12]
 8001e8a:	4313      	orrs	r3, r2
 8001e8c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	68fa      	ldr	r2, [r7, #12]
 8001e94:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	4a21      	ldr	r2, [pc, #132]	@ (8001f20 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8001e9c:	4293      	cmp	r3, r2
 8001e9e:	d022      	beq.n	8001ee6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001ea8:	d01d      	beq.n	8001ee6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	4a1d      	ldr	r2, [pc, #116]	@ (8001f24 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8001eb0:	4293      	cmp	r3, r2
 8001eb2:	d018      	beq.n	8001ee6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	4a1b      	ldr	r2, [pc, #108]	@ (8001f28 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8001eba:	4293      	cmp	r3, r2
 8001ebc:	d013      	beq.n	8001ee6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	4a1a      	ldr	r2, [pc, #104]	@ (8001f2c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8001ec4:	4293      	cmp	r3, r2
 8001ec6:	d00e      	beq.n	8001ee6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	4a18      	ldr	r2, [pc, #96]	@ (8001f30 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8001ece:	4293      	cmp	r3, r2
 8001ed0:	d009      	beq.n	8001ee6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	4a17      	ldr	r2, [pc, #92]	@ (8001f34 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8001ed8:	4293      	cmp	r3, r2
 8001eda:	d004      	beq.n	8001ee6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	4a15      	ldr	r2, [pc, #84]	@ (8001f38 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8001ee2:	4293      	cmp	r3, r2
 8001ee4:	d10c      	bne.n	8001f00 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8001ee6:	68bb      	ldr	r3, [r7, #8]
 8001ee8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001eec:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8001eee:	683b      	ldr	r3, [r7, #0]
 8001ef0:	685b      	ldr	r3, [r3, #4]
 8001ef2:	68ba      	ldr	r2, [r7, #8]
 8001ef4:	4313      	orrs	r3, r2
 8001ef6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	68ba      	ldr	r2, [r7, #8]
 8001efe:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	2201      	movs	r2, #1
 8001f04:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8001f10:	2300      	movs	r3, #0
}
 8001f12:	4618      	mov	r0, r3
 8001f14:	3714      	adds	r7, #20
 8001f16:	46bd      	mov	sp, r7
 8001f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1c:	4770      	bx	lr
 8001f1e:	bf00      	nop
 8001f20:	40010000 	.word	0x40010000
 8001f24:	40000400 	.word	0x40000400
 8001f28:	40000800 	.word	0x40000800
 8001f2c:	40000c00 	.word	0x40000c00
 8001f30:	40010400 	.word	0x40010400
 8001f34:	40014000 	.word	0x40014000
 8001f38:	40001800 	.word	0x40001800

08001f3c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001f3c:	b480      	push	{r7}
 8001f3e:	b083      	sub	sp, #12
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001f44:	bf00      	nop
 8001f46:	370c      	adds	r7, #12
 8001f48:	46bd      	mov	sp, r7
 8001f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4e:	4770      	bx	lr

08001f50 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001f50:	b480      	push	{r7}
 8001f52:	b083      	sub	sp, #12
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001f58:	bf00      	nop
 8001f5a:	370c      	adds	r7, #12
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f62:	4770      	bx	lr

08001f64 <memset>:
 8001f64:	4402      	add	r2, r0
 8001f66:	4603      	mov	r3, r0
 8001f68:	4293      	cmp	r3, r2
 8001f6a:	d100      	bne.n	8001f6e <memset+0xa>
 8001f6c:	4770      	bx	lr
 8001f6e:	f803 1b01 	strb.w	r1, [r3], #1
 8001f72:	e7f9      	b.n	8001f68 <memset+0x4>

08001f74 <__libc_init_array>:
 8001f74:	b570      	push	{r4, r5, r6, lr}
 8001f76:	4d0d      	ldr	r5, [pc, #52]	@ (8001fac <__libc_init_array+0x38>)
 8001f78:	4c0d      	ldr	r4, [pc, #52]	@ (8001fb0 <__libc_init_array+0x3c>)
 8001f7a:	1b64      	subs	r4, r4, r5
 8001f7c:	10a4      	asrs	r4, r4, #2
 8001f7e:	2600      	movs	r6, #0
 8001f80:	42a6      	cmp	r6, r4
 8001f82:	d109      	bne.n	8001f98 <__libc_init_array+0x24>
 8001f84:	4d0b      	ldr	r5, [pc, #44]	@ (8001fb4 <__libc_init_array+0x40>)
 8001f86:	4c0c      	ldr	r4, [pc, #48]	@ (8001fb8 <__libc_init_array+0x44>)
 8001f88:	f000 f818 	bl	8001fbc <_init>
 8001f8c:	1b64      	subs	r4, r4, r5
 8001f8e:	10a4      	asrs	r4, r4, #2
 8001f90:	2600      	movs	r6, #0
 8001f92:	42a6      	cmp	r6, r4
 8001f94:	d105      	bne.n	8001fa2 <__libc_init_array+0x2e>
 8001f96:	bd70      	pop	{r4, r5, r6, pc}
 8001f98:	f855 3b04 	ldr.w	r3, [r5], #4
 8001f9c:	4798      	blx	r3
 8001f9e:	3601      	adds	r6, #1
 8001fa0:	e7ee      	b.n	8001f80 <__libc_init_array+0xc>
 8001fa2:	f855 3b04 	ldr.w	r3, [r5], #4
 8001fa6:	4798      	blx	r3
 8001fa8:	3601      	adds	r6, #1
 8001faa:	e7f2      	b.n	8001f92 <__libc_init_array+0x1e>
 8001fac:	08001fec 	.word	0x08001fec
 8001fb0:	08001fec 	.word	0x08001fec
 8001fb4:	08001fec 	.word	0x08001fec
 8001fb8:	08001ff0 	.word	0x08001ff0

08001fbc <_init>:
 8001fbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001fbe:	bf00      	nop
 8001fc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001fc2:	bc08      	pop	{r3}
 8001fc4:	469e      	mov	lr, r3
 8001fc6:	4770      	bx	lr

08001fc8 <_fini>:
 8001fc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001fca:	bf00      	nop
 8001fcc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001fce:	bc08      	pop	{r3}
 8001fd0:	469e      	mov	lr, r3
 8001fd2:	4770      	bx	lr
